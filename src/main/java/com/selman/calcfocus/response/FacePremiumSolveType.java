//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-147 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.23 at 11:48:47 AM EDT 
//


package com.selman.calcfocus.response;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for FacePremiumSolveType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="FacePremiumSolveType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="AnnualPremium"/>
 *     &lt;enumeration value="ModalPremium"/>
 *     &lt;enumeration value="MaximumPremium"/>
 *     &lt;enumeration value="GuidelineLevelPremium"/>
 *     &lt;enumeration value="GuidelineSinglePremium"/>
 *     &lt;enumeration value="SevenPayPremium"/>
 *     &lt;enumeration value="MinimumNAR"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "FacePremiumSolveType")
@XmlEnum
public enum FacePremiumSolveType {

    @XmlEnumValue("AnnualPremium")
    ANNUAL_PREMIUM("AnnualPremium"),
    @XmlEnumValue("ModalPremium")
    MODAL_PREMIUM("ModalPremium"),
    @XmlEnumValue("MaximumPremium")
    MAXIMUM_PREMIUM("MaximumPremium"),
    @XmlEnumValue("GuidelineLevelPremium")
    GUIDELINE_LEVEL_PREMIUM("GuidelineLevelPremium"),
    @XmlEnumValue("GuidelineSinglePremium")
    GUIDELINE_SINGLE_PREMIUM("GuidelineSinglePremium"),
    @XmlEnumValue("SevenPayPremium")
    SEVEN_PAY_PREMIUM("SevenPayPremium"),
    @XmlEnumValue("MinimumNAR")
    MINIMUM_NAR("MinimumNAR");
    private final String value;

    FacePremiumSolveType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static FacePremiumSolveType fromValue(String v) {
        for (FacePremiumSolveType c: FacePremiumSolveType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
