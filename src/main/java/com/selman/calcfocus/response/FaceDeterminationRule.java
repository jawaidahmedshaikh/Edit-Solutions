//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-147 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.03.23 at 11:48:47 AM EDT 
//


package com.selman.calcfocus.response;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for FaceDeterminationRule.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="FaceDeterminationRule">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="None"/>
 *     &lt;enumeration value="InputValue"/>
 *     &lt;enumeration value="DerivedFromParent"/>
 *     &lt;enumeration value="Solve"/>
 *     &lt;enumeration value="FaceSolveBasedOnPremium"/>
 *     &lt;enumeration value="SolveLowestFaceToAvoidMEC"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "FaceDeterminationRule")
@XmlEnum
public enum FaceDeterminationRule {

    @XmlEnumValue("None")
    NONE("None"),
    @XmlEnumValue("InputValue")
    INPUT_VALUE("InputValue"),
    @XmlEnumValue("DerivedFromParent")
    DERIVED_FROM_PARENT("DerivedFromParent"),
    @XmlEnumValue("Solve")
    SOLVE("Solve"),
    @XmlEnumValue("FaceSolveBasedOnPremium")
    FACE_SOLVE_BASED_ON_PREMIUM("FaceSolveBasedOnPremium"),
    @XmlEnumValue("SolveLowestFaceToAvoidMEC")
    SOLVE_LOWEST_FACE_TO_AVOID_MEC("SolveLowestFaceToAvoidMEC");
    private final String value;

    FaceDeterminationRule(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static FaceDeterminationRule fromValue(String v) {
        for (FaceDeterminationRule c: FaceDeterminationRule.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
