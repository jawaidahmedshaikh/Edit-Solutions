package com.segsoftware.event
{
	import com.adobe.cairngorm.control.CairngormEvent;
	
	/**
	 * Ideally, an event "happens" as generated by a user's gesture.
	 * This event is then progated to the proper controller as
	 * defined by the Cairngorm framework. Currently, this involves
	 * propagation to the SEGController.
	 * 
	 * What is at issue is the need to gather some information from 
	 * the originating event (such as the row data selected from
	 * a GridTable). The CairngormEvent does not support any 
	 * defined way to do this.
	 * 
	 * With the SEGEvent, the user is expected to have access to a Model when the
	 * event is generated and dispacted. This Model is expected to resemble
	 * a HTML Form in "spirit". Here's an example:
	 * 	<mx:Model id="formData">
	 *  	<formData>
	 *			<selectedBillGroupVO>{billGroupDataGrid.selectedItem}</selectedBillGroupVO>
	 * 			<contractGroupPK>{contractGroupPK.text}</contractGroupPK>
	 *		</formData>
	 *	</mx:Model>
	 * 
	 * The event would thus look like:
	 * 
	 * new SEGEvent(SEGController.EVENT_FOO, formData);
	 * 
	 * The Command that received the event [must] know the structure of the
	 * formData (essentially, the name/value pairs). For example, in the
	 * Command's execute(..) method:
	 * 
	 * var billGroupVO:XML = segEvent.getFormData().selectedBillGroupVO as XML;
	 * 
	 */ 
	public class SEGEvent extends CairngormEvent
	{
		/**
		 * Most SEGEvents will want to supply data that helps the
		 * Command(s) respond to the event.
		 */
		private var _formData:Object;
		
		/**
		 * Calling object. 
		 */
		private var _caller:Object;
			
		/**
		 * Constructor that traps the original triggering 
		 * event while maintaining the Cairngorm defaults.
		 */ 		
		public function SEGEvent(type:String, formData:Object, caller:Object=null)
		{
			super(type);
			
			_formData = formData;
			
			_caller = caller;
		}
		
		/**
		 * @see #_formData
		 */ 
		public function get formData():Object
		{
			return _formData;
		}
		
		/**
		 * @see #_caller
		 */ 
		public function get caller():Object
		{
			return _caller;
		}
	}
}