package test.engine.sp.custom.document;

import edit.services.db.hibernate.SessionHelper;

import engine.sp.custom.document.GroupSetupDocument;

import event.Charge;
import event.ClientSetup;
import event.ContractSetup;
import event.EDITTrx;
import event.GroupSetup;
import event.InvestmentAllocationOverride;
import event.ScheduledEvent;

import junit.framework.Assert;
import junit.framework.TestCase;

import test.textfixture.TestHelper;


public class GroupSetupDocumentTest extends TestCase
{

  private TestHelper th;

  public GroupSetupDocumentTest(String sTestName)
  {
    super(sTestName);
  }

  protected void setUp() throws Exception
  {
    super.setUp();

    th = new TestHelper();

    th.setUp();
  }

  protected void tearDown() throws Exception
  {
    super.tearDown();

    th.tearDown();
  }

  /**
   * 1. Builds the Hibernate structure of:
   * GroupSetup.ContractSetup.ClientSetup.EDITTrx
   * GroupSetup.Charge
   * GroupSetup.ScheduledEvent
   * ContractSetup.InvestmentAllocationOverride
   * 
   * 2. Uses GroupSetupDocument to build the DOM4J equivalent of the Hiberate Structure.
   * 
   * 3. Compare GroupSetup and the GroupSetup DOM4J for equivalency.
   * 
   * @see GroupSetupDocument#build()
   */
  public void testBuild()
  {
    // 1. Build the Hibernate test structure.
    GroupSetup groupSetup = (GroupSetup) th.buildEntity(GroupSetup.class, SessionHelper.EDITSOLUTIONS);

    Charge charge = (Charge) th.buildEntity(Charge.class, SessionHelper.EDITSOLUTIONS);

    ScheduledEvent scheduledEvent = (ScheduledEvent) th.buildEntity(ScheduledEvent.class, SessionHelper.EDITSOLUTIONS);

    ContractSetup contractSetup = (ContractSetup) th.buildEntity(ContractSetup.class, SessionHelper.EDITSOLUTIONS);
    
    InvestmentAllocationOverride investmentAllocationOverride = (InvestmentAllocationOverride) th.buildEntity(InvestmentAllocationOverride.class, SessionHelper.EDITSOLUTIONS);

    ClientSetup clientSetup = (ClientSetup) th.buildEntity(ClientSetup.class, SessionHelper.EDITSOLUTIONS);

    EDITTrx editTrx = (EDITTrx) th.buildEntity(EDITTrx.class, SessionHelper.EDITSOLUTIONS);

    groupSetup.addScheduledEvent(scheduledEvent);

    groupSetup.addCharge(charge);

    groupSetup.addScheduledEvent(scheduledEvent);

    groupSetup.addContractSetup(contractSetup);

    contractSetup.addInvestmentAllocationOverride(investmentAllocationOverride);

    contractSetup.addClientSetup(clientSetup);

    clientSetup.addEDITTrx(editTrx);

    // Save to get the EDITTrxPK generated by Hibernate.
    // Flush or you won't be able to query for these entities a little later.
    SessionHelper.saveOrUpdate(groupSetup, SessionHelper.EDITSOLUTIONS);

    SessionHelper.flushSessions();

    // 2. Build the GroupSetupDocument
    GroupSetupDocument document = new GroupSetupDocument(editTrx.getEDITTrxPK());

    document.build();

    // 3. Does the DOM4J contain the proper Elements?
    String xml = document.asXML();

    Assert.assertTrue("Validating existence of [GroupSetupDocVO]", xml.indexOf("<GroupSetupDocVO>") >= 0);

    Assert.assertTrue("Validating existence of [GroupSetupVO]", xml.indexOf("<GroupSetupVO>") >= 0);

    Assert.assertTrue("Validating existence of [ContractSetupVO]", xml.indexOf("<ContractSetupVO>") >= 0);

    Assert.assertTrue("Validating existence of [ClientSetupVO]", xml.indexOf("<ClientSetupVO>") >= 0);

    Assert.assertTrue("Validating existence of [EDITTrxVO]", xml.indexOf("<EDITTrxVO>") >= 0);

    Assert.assertTrue("Validating existence of [ChargeVO]", xml.indexOf("<ChargeVO>") >= 0);

    Assert.assertTrue("Validating existence of [ScheduledEventVO]", xml.indexOf("<ScheduledEventVO>") >= 0);

    Assert.assertTrue("Validating existence of [InvestmentAllocationOverrideVO]", xml.indexOf("<InvestmentAllocationOverrideVO>") >= 0);
  }
}
