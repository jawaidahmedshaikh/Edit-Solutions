/*
 * User: unknown
 * Date: Jan 1, 2000
 * Time: unknown
 *
 * (c) 2000-2008 Systems Engineering Group, LLC.  All Rights Reserved
 * Systems Engineering Group, LLC Proprietary and confidential.  Any use is
 * subject to the license agreement.
 */
package contract.ui.servlet;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;

import javax.servlet.http.HttpSession;

import agent.Agent;
import agent.component.AgentComponent;
import billing.Bill;
import billing.BillSchedule;
import client.ClientAddress;
import client.ClientDetail;
import client.Preference;
import client.component.ClientUseCaseComponent;
import codetable.component.CodeTableComponent;
import contract.AgentHierarchyAllocation;
import contract.Bucket;
import contract.ChangeHistory;
import contract.ComplexChange;
import contract.ContractClient;
import contract.ContractClientAllocation;
import contract.Deposits;
import contract.HistoryFilter;
import contract.HistoryFilterRow;
import contract.InherentRider;
import contract.Investment;
import contract.Life;
import contract.MasterContract;
import contract.PremiumDue;
import contract.Requirement;
import contract.Segment;
import contract.ValueAtIssue;
import contract.business.Contract;
import contract.component.ContractComponent;
import contract.component.InforceUseCaseComponent;
import contract.dm.composer.VOComposer;
import contract.dm.dao.DAOFactory;
import contract.util.ContractNotesUtil;
import contract.util.UtilitiesForTran;
import edit.common.Change;
import edit.common.CodeTableWrapper;
import edit.common.EDITBigDecimal;
import edit.common.EDITDate;
import edit.common.EDITDateTime;
import edit.common.exceptions.EDITContractException;
import edit.common.exceptions.EDITEventException;
import edit.common.exceptions.EDITLockException;
import edit.common.exceptions.EDITValidationException;
import edit.common.exceptions.VOEditException;
import edit.common.vo.AgentHierarchyAllocationVO;
import edit.common.vo.AgentHierarchyVO;
import edit.common.vo.AgentSnapshotVO;
import edit.common.vo.AgentVO;
import edit.common.vo.AreaValueVO;
import edit.common.vo.BillScheduleVO;
import edit.common.vo.BucketAllocationVO;
import edit.common.vo.BucketHistoryVO;
import edit.common.vo.BucketVO;
import edit.common.vo.ChangeHistoryVO;
import edit.common.vo.ChargeCodeVO;
import edit.common.vo.ChargeHistoryVO;
import edit.common.vo.ChargeVO;
import edit.common.vo.ClientAddressVO;
import edit.common.vo.ClientDetailVO;
import edit.common.vo.ClientRoleVO;
import edit.common.vo.ClientSetupVO;
import edit.common.vo.CodeTableVO;
import edit.common.vo.CommissionInvestmentHistoryVO;
import edit.common.vo.CommissionPhaseVO;
import edit.common.vo.CommissionProfileVO;
import edit.common.vo.ContactInformationVO;
import edit.common.vo.ContractClientAllocationOvrdVO;
import edit.common.vo.ContractClientAllocationVO;
import edit.common.vo.ContractClientVO;
import edit.common.vo.ContractRequirementVO;
import edit.common.vo.ContractSetupVO;
import edit.common.vo.ContractTreatyVO;
import edit.common.vo.ContractVO;
import edit.common.vo.DepositsVO;
import edit.common.vo.EDITServicesConfig;
import edit.common.vo.EDITTrxCorrespondenceVO;
import edit.common.vo.EDITTrxHistoryVO;
import edit.common.vo.EDITTrxVO;
import edit.common.vo.FilteredFundVO;
import edit.common.vo.FilteredRequirementVO;
import edit.common.vo.FinancialHistoryVO;
import edit.common.vo.FundVO;
import edit.common.vo.GroupSetupVO;
import edit.common.vo.InSuspenseVO;
import edit.common.vo.InherentRiderVO;
import edit.common.vo.InvestmentAllocationOverrideVO;
import edit.common.vo.InvestmentAllocationVO;
import edit.common.vo.InvestmentHistoryVO;
import edit.common.vo.InvestmentVO;
import edit.common.vo.LifeVO;
import edit.common.vo.LoanPayoffQuoteVO;
import edit.common.vo.NaturalDocVO;
import edit.common.vo.NoteReminderVO;
import edit.common.vo.OutSuspenseVO;
import edit.common.vo.OverdueChargeRemainingVO;
import edit.common.vo.OverdueChargeSettledVO;
import edit.common.vo.OverdueChargeVO;
import edit.common.vo.PayoutVO;
import edit.common.vo.PlacedAgentBranchVO;
import edit.common.vo.PlacedAgentVO;
import edit.common.vo.PreferenceVO;
import edit.common.vo.PremiumDueVO;
import edit.common.vo.ProductStructureVO;
import edit.common.vo.ProposalVO;
import edit.common.vo.QuoteVO;
import edit.common.vo.RealTimeActivityVO;
import edit.common.vo.ReinsurerVO;
import edit.common.vo.RequiredMinDistributionVO;
import edit.common.vo.RequirementVO;
import edit.common.vo.SPOutputVO;
import edit.common.vo.ScheduledEventVO;
import edit.common.vo.SearchResponseContractInfo;
import edit.common.vo.SearchResponseVO;
import edit.common.vo.SegmentBackupVO;
import edit.common.vo.SegmentHistoryVO;
import edit.common.vo.SegmentVO;
import edit.common.vo.SuspenseVO;
import edit.common.vo.TaxInformationVO;
import edit.common.vo.TaxProfileVO;
import edit.common.vo.TransactionCorrespondenceVO;
import edit.common.vo.UIAgentHierarchyVO;
import edit.common.vo.UIFilteredFundVO;
import edit.common.vo.UIInvestmentOverrideVO;
import edit.common.vo.ValidationVO;
import edit.common.vo.ValueAtIssueVO;
import edit.common.vo.WithholdingHistoryVO;
import edit.common.vo.WithholdingOverrideVO;
import edit.common.vo.WithholdingVO;
import edit.portal.common.session.UserSession;
import edit.portal.exceptions.PortalEditingException;
import edit.portal.widget.BatchReversalTableModel;
import edit.portal.widget.CommissionPhaseHistoryTableModel;
import edit.portal.widget.ContractBillHistoryTableModel;
import edit.portal.widget.ContractBillingTableModel;
import edit.portal.widget.ContractHistorySummaryTableModel;
import edit.portal.widget.EnrollmentLeadServiceAgentTableModel;
import edit.portal.widget.FilterSuspenseTableModel;
import edit.portal.widget.FinancialHistoryTableModel;
import edit.portal.widget.LoanSummaryTableModel;
import edit.portal.widget.PremiumDueHistoryTableModel;
import edit.portal.widget.QuestionnaireResponseTableModel;
import edit.portal.widget.SuspenseHistoryTableModel;
import edit.portal.widget.SuspenseTransferTableModel;
import edit.portal.widget.TransactionSuspenseTableModel;
import edit.services.config.ServicesConfig;
import edit.services.db.CRUD;
import edit.services.db.CRUDFactory;
import edit.services.db.ConnectionFactory;
import edit.services.db.hibernate.HibernateEntityDifference;
import edit.services.db.hibernate.SessionHelper;
import engine.ChargeCode;
import engine.Company;
import engine.ProductStructure;
import engine.business.Analyzer;
import engine.component.AnalyzerComponent;
import engine.sp.SPException;
import event.CashBatchContract;
import event.ContractSetup;
import event.EDITTrx;
import event.EDITTrxHistory;
import event.InvestmentAllocationOverride;
import event.InvestmentHistory;
import event.OutSuspense;
import event.OverdueChargeRemaining;
import event.Proposal;
import event.Quote;
import event.Suspense;
import event.TransactionPriority;
import event.business.Event;
import event.business.EventUseCase;
import event.component.EventComponent;
import event.component.EventUseCaseComponent;
import event.dm.dao.ContractSetupDAO;
import event.dm.dao.GroupSetupDAO;
import event.transaction.TransactionProcessor;
import fission.beans.FormBean;
import fission.beans.PageBean;
import fission.beans.SessionBean;
import fission.global.AppReqBlock;
import fission.utility.DateTimeUtil;
import fission.utility.Util;
import group.BatchContractSetup;
import group.CaseProductUnderwriting;
import group.ContractGroup;
import group.DepartmentLocation;
import logging.Log;
import reinsurance.Reinsurer;
import role.ClientRole;
import security.Operator;
import util.PendingStatus;


public class ContractDetailTran extends AbstractContractTran
{
    private static final String TRADITIONAL = "Traditional";
    private static final String NON_TRAD_LIFE = "NonTradLife";
    private static final String DEFERRED_ANNUITY = "DFA";
    private static final String AH = "A&H";
	
    private static final String[] TRADITIONAL_PRODUCTS = new  String[] {"Traditional"};
    private static final String[] NON_TRADITIONAL_LIFE_PRODUCTS = new String[] {"VL", "TL"};
    private static final String[] DEFERRED_ANNUITY_PRODUCTS = new String[] {"DFA"};

    //These actions are for showing the tabs of the contract system
    private static final String SHOW_DELETE_CONTRACT_CONFIRMATION_DIALOG = "showDeleteContractConfirmationDialog";
    private static final String SHOW_CANCEL_CONTRACT_CONFIRMATION_DIALOG = "showCancelContractConfirmationDialog";
    private static final String LOAD_CONTRACT_AFTER_SEARCH = "loadContractAfterSearch";
    private static final String SHOW_CONTRACT_MAIN_DEFAULT = "showContractMainDefault";
    private static final String SHOW_CONTRACT_MAIN_CONTENT = "showContractMainContent";
    private static final String SHOW_CONTRACT_RIDERS = "showContractRiders";
    private static final String SHOW_CONTRACT_INVESTMENTS = "showContractInvestments";
    private static final String SHOW_LOAN_PAYOFF_QUOTE_DIALOG = "showLoanPayoffQuoteDialog";
    private static final String SHOW_CONTRACT_NON_PAYEE_OR_PAYEE = "showContractNonPayeeOrPayee";
    private static final String SHOW_CONTRACT_AGENTS = "showContractAgents";
    private static final String SHOW_CONTRACT_HISTORY = "showContractHistory";
    private static final String SHOW_CLIENT_DETAIL_SUMMARY = "showClientDetailSummary";
    private static final String SHOW_HISTORY_DETAIL_SUMMARY = "showHistoryDetailSummary";
    private static final String SHOW_TRANSACTION_DETAIL_SUMMARY = "showTransactionDetailSummary";
    private static final String SHOW_TRANSACTION_DEFAULT = "showTransactionDefault";
    private static final String SHOW_PROCESS_OVERRIDE_DIALOG = "showProcessOverrideDialog";
    private static final String UPDATE_PROCESS_OVERRIDE = "updateProcessOverride";
    private static final String SHOW_EMPLOYER_EMPLOYEE_OVERRIDE_DIALOG = "showEmployerEmployeeOverrideDialog";
    private static final String UPDATE_EMPLOYER_EMPLOYEE_OVERRIDE = "updateEmployerEmployeeOverride";
    private static final String SHOW_BILL_AMT_EDIT_OVERRIDE_DIALOG = "showBillAmtEditOverrideDialog";
    private static final String UPDATE_BILL_AMT_EDIT_OVERRIDE = "updateBillAmtEditOverride";
    private static final String SHOW_SUSPENSE = "showSuspense";
    private static final String SHOW_ORIGINAL_SUSPENSE_INFO = "showOriginalSuspenseInfo";
    private static final String SHOW_SUSPENSE_CLIENT_INFO = "showSuspenseClientInfo";
//    private static final String SAVE_SUSPENSE_CLIENT_INFO = "saveSuspenseClientInfo";
//    private static final String CANCEL_SUSPENSE_CLIENT_INFO = "cancelSuspenseClientInfo";
    private static final String SHOW_SUSPENSE_TRANSACTION_INFO = "showSuspenseTransactionInfo";
    private static final String CLOSE_SUSPENSE_TRANSACTION_INFO = "closeSuspenseTransactionInfo";
    private static final String SHOW_ACCUMULATION_DIALOG = "showAccumulationDialog";
    private static final String SHOW_NOTES_DIALOG = "showNotesDialog";
    private static final String SHOW_NOTES_DETAIL_SUMMARY = "showNotesDetailSummary";
    private static final String SHOW_TAXES_DIALOG = "showTaxesDialog";
    private static final String SHOW_CONTRACT_CLIENT_ADD_DIALOG = "showContractClientAddDialog";
    private static final String SHOW_DEPOSIT_BUCKETS = "showDepositBuckets";
    private static final String SHOW_DEPOSIT_BUCKETS_DETAIL_SUMMARY = "showDepositBucketsDetailSummary";
    private static final String SCROLL_DEPOSIT_BUCKETS = "scrollDepositBuckets";
    private static final String SHOW_FILTER_ALLOCATION_DIALOG = "showFilterAllocationDialog";
    private static final String SHOW_FILTER_ALLOCATION_DETAIL = "showFilterAllocationDetail";
    private static final String SHOW_TRX_SUSPENSE_DIALOG = "showTrxSuspenseDialog";
    private static final String SHOW_CHARGES_DIALOG = "showChargesDialog";
    private static final String SHOW_AGENT_SELECTION_DIALOG = "showAgentSelectionDialog";
    private static final String SHOW_CONTRACT_RIDER_AGENT_SELECTION_DIALOG = "showContractRiderAgentSelectionDialog";
    private static final String SHOW_REPORT_TO_AGENT = "showReportToAgent";
    private static final String SAVE_AGENT_SELECTION = "saveAgentSelection";
    private static final String CLOSE_AGENT_SELECTION_DIALOG = "closeAgentSelectionDialog";
    private static final String CLEAR_CONTRACT_AGENT_FORM = "clearContractAgentForm";
    private static final String CLEAR_ALLOCATION_FORM = "clearAllocationForm";
    private static final String SHOW_AGENT_HIERARCHY_DIALOG = "showAgentHierarchyDialog";
    private static final String SHOW_SELECTED_HIERARCHY_ROW = "showSelectedHierarchyRow";
    private static final String SELECT_COMM_PROFILE_FOR_AGENT = "selectCommProfileForAgent";
    private static final String SAVE_AGENT_HIERARCHY = "saveAgentHierarchy";
    private static final String CLOSE_AGENT_HIERARCHY = "closeAgentHierarchy";
    private static final String SHOW_COMMISSION_OVERRIDES = "showCommissionOverrides";
    private static final String SAVE_COMMISSION_OVERRIDES = "saveCommissionOverrides";
    private static final String DELETE_COMMISSION_OVERRIDES = "deleteCommissionOverrides";
    private static final String CANCEL_COMMISSION_OVERRIDES = "cancelCommissionOverrides";
    private static final String SHOW_TRANSFER_FUND_DETAIL = "showTransferFundDetail";
    private static final String SHOW_DEPOSIT_DIALOG = "showDepositDialog";
    private static final String SHOW_TRX_DEPOSIT_DETAIL_SUMMARY = "showTrxDepositDetailSummary";
    private static final String SHOW_SELECTED_TRX_SUSPENSE = "showSelectedTrxSuspense";
    private static final String SHOW_INFORCE_QUOTE_DIALOG = "showInforceQuoteDialog";
    private static final String CLOSE_INFORCE_QUOTE_DIALOG = "closeInforceQuoteDialog";
    private static final String CLOSE_TRAN_DIALOG = "closeTranDialog";
    private static final String PERFORM_INFORCE_QUOTE = "performInforceQuote";
    private static final String CLEAR_INFORCE_QUOTE_DIALOG = "clearInforceQuoteDialog";
    private static final String CREATE_NEW_EDIT_TRX_CORR = "createNewEDITTrxCorrespondence";
    private static final String PERFORM_LOAN_PAYOFF_QUOTE = "performLoanPayoffQuote";
    private static final String CLEAR_LOAN_PAYOFF_QUOTE_DIALOG = "clearLoanPayoffQuoteDialog";
    private static final String CLOSE_LOAN_PAYOFF_QUOTE_DIALOG = "closeLoanPayoffQuoteDialog";
    private static final String VOID_SUSPENSE_ENTRY = "voidSuspenseEntry";
    private static final String SHOW_REFUND_SUSPENSE_DIALOG = "showRefundSuspenseDialog";
    private static final String REFUND_SUSPENSE = "refundSuspense";
    private static final String SELECT_CLIENT_DETAIL_FOR_REFUND = "selectClientDetailForRefund";
    private static final String FIND_CLIENTS_BY_NAME_FOR_REFUND = "findClientsByNameForRefund";
    private static final String FIND_CLIENT_BY_TAX_ID_FOR_REFUND = "findClientByTaxIdForRefund";
    private static final String CANCEL_REFUND = "cancelRefund";
    private static final String CLEAR_TRX_SUSPENSE_FORM_ON_CANCEL = "clearTrxSuspenseFormOnCancel";
    private static final String SAVE_TRX_SUSPENSE_SELECTION_TO_SUMMARY = "saveTrxSuspenseSelectionToSummary";
    private static final String CLOSE_TRX_SUSPENSE_DIALOG = "closeTrxSuspenseDialog";
    private static final String DELETE_SELECTED_DEPOSIT = "deleteSelectedDeposit";
    private static final String SHOW_DEPOSIT_DETAIL_SUMMARY = "showDepositDetailSummary";
    private static final String SHOW_CONTRACT_REQUIREMENTS = "showContractRequirements";
    private static final String SHOW_MANUAL_REQUIREMENT_SELECTION_DIALOG = "showManualRequirementSelectionDialog";
    private static final String CANCEL_REQUIREMENT = "cancelRequirement";
    private static final String SAVE_REQUIREMENT_TO_SUMMARY = "saveRequirementToSummary";
    private static final String DELETE_SELECTED_REQUIREMENT = "deleteSelectedRequirement";
    private static final String SHOW_REQUIREMENT_DETAIL = "showRequirementDetail";
    private static final String SHOW_MANUAL_REQUIREMENT_DESCRIPTION = "showManualRequirementDescription";
    private static final String SAVE_MANUAL_REQUIREMENT = "saveManualRequirement";
    private static final String SHOW_BUCKET_AND_INVESTMENT_HISTORIES = "showBucketAndInvestmentHistories";
    private static final String SHOW_SELECT_COVERAGE_DIALOG = "showSelectCoverageDialog";
    private static final String ADD_LIFE_RIDER = "addLifeRider";
    private static final String SAVE_LIFE_RIDER = "saveLifeRider";
    private static final String CHECK_IF_NEW_AGENT_HIERARCHY_NEEDED = "checkIfNewAgentHierarchyNeeded";
    private static final String DELETE_LIFE_RIDER = "deleteLifeRider";
    private static final String SHOW_RMD_DIALOG = "showRMDDialog";
    private static final String SAVE_RMD_DIALOG = "saveRmdDialog";
    private static final String CLOSE_RMD_DIALOG = "closeRmdDialog";
    private static final String INITIALIZE_CONTRACT_STATE = "initializeContractState";
    private static final String GET_AGENT_INFO = "getAgentInfo";
    private static final String LOAD_CONTRACT = "loadContract";
    private static final String LOAD_TRANSACTION_PROCESS = "loadTransactionProcess";
    private static final String ADD_FUND = "addFund";
    private static final String SAVE_FUND = "saveFund";
    private static final String UPDATE_CLIENT_INFO = "updateClientInfo";
    private static final String UPDATE_INVESTMENT_OVERRIDE = "updateInvestmentOverride";
    private static final String CANCEL_INVESTMENT_OVERRIDE = "cancelInvestmentOverride";
    private static final String DELETE_INVESTMENT_OVERRIDE = "deleteInvestmentOverride";
    private static final String SAVE_AGENT_TO_SUMMARY = "saveAllocationToSummary";
    private static final String SAVE_ALLOCATION_CHANGES = "saveAllocationChanges";
    private static final String CANCEL_ALLOCATION_CHANGES = "cancelAllocationChanges";
    private static final String SAVE_FUND_TO_SUMMARY = "saveFundToSummary";
    private static final String SAVE_RELATIONSHIP_COVERAGE = "saveRelationshipCoverage";
    private static final String SAVE_CONTRACT_DETAIL = "saveContractDetail";
    private static final String SAVE_CONTRACT = "saveContract";
    private static final String SAVE_NOTE_TO_SUMMARY = "saveNoteToSummary";
    private static final String SAVE_NOTES = "saveNotes";
    private static final String SAVE_TAXES = "saveTaxes";
    private static final String SAVE_SCHEDULED_PREMIUM = "saveScheduledPremium";
    private static final String SAVE_UNITS = "saveUnits";
    private static final String ANALYZE_TRANSACTION = "analyzeTransaction";
    private static final String SHOW_ANALYZER = "showAnalyzer";
    private static final String SAVE_TRANSACTION_TO_SUMMARY = "saveTransactionToSummary";
    private static final String CANCEL_CONTRACT = "cancelContract";
    private static final String CANCEL_CONTRACT_NON_PAYEE_OR_PAYEE = "cancelContractNonPayeeOrPayee";
    private static final String CANCEL_FUND = "cancelFund";
    private static final String CANCEL_NOTES = "cancelNotes";
    private static final String SELECT_AVAILABLE_INV_OVERRIDE = "selectAvailableInvestmentOverride";
    private static final String SELECT_AVAILABLE_ITEMS = "selectAvailableItems";
    private static final String REMOVE_SELECTED_ITEMS = "removeSelectedItems";
    private static final String SAVE_FILTER_ALLOC_TO_SUMMARY = "saveFilterAllocToSummary";
    private static final String CLOSE_FILTER_ALLOC_DIALOG = "closeFilterAllocDialog";
    private static final String CLOSE_AND_SAVE_INV_ALLOC = "closeAndSaveInvestmentAllocations";
    private static final String SHOW_PAYEE_OVERRIDE_DETAIL_SUMMARY = "showPayeeOverrideDetailSummary";
    private static final String UPDATE_CONTRACT_CLIENT = "updateContractClient";
    private static final String ADD_CONTRACT_CLIENT = "addContractClient";
    private static final String CANCEL_CONTRACT_CLIENT = "cancelContractClient";
    private static final String CREATE_NEW_CONTRACT_CLIENT_OVERRIDES = "createNewContractClientOverrides";
    private static final String ADD_OR_CANCEL_SUSPENSE_ENTRY = "addOrCancelSuspenseEntry";
    private static final String SAVE_SUSPENSE_ENTRY = "saveSuspenseEntry";
    private static final String SHOW_SUSPENSE_DETAIL = "showSuspenseDetail";
    private static final String CANCEL_TRANSACTION = "cancelTransaction";
    private static final String RUN_REVERSAL = "runReversal";
    private static final String REVERSE_SELECTED_TRX = "reverseSelectedTrx";
    private static final String REVERSE_TO_SUBMITTED = "reverseToSubmitted";
    private static final String REVERSE_TO_SUBMITPEND = "reverseToSubmitPend";
    private static final String REVERSE_THROUGH_DATE = "reverseThroughDate";
    private static final String RUN_BATCH_REVERSALS = "runBatchReversals";
    private static final String SHOW_BATCH_REVERSAL_DIALOG = "showBatchReversalDialog";
    private static final String SAVE_RIDER = "saveRider";
    private static final String CLEAR_INVESTMENTS_FOR_ADD_OR_CANCEL = "clearInvestmentsForAddOrCancel";
    private static final String CLEAR_NOTES_FOR_ADD_OR_CANCEL = "clearNotesForAddOrCancel";
    private static final String UPDATE_CHARGE_OVERRIDE = "updateChargeOverride";
    private static final String DELETE_CHARGE_OVERRIDE = "deleteChargeOverride";
    private static final String DELETE_CONTRACT = "deleteContract";
    private static final String DELETE_SELECTED_CLIENT = "deleteSelectedClient";
    private static final String DELETE_SELECTED_AGENT = "deleteSelectedAllocation";
    private static final String DELETE_SELECTED_FUND = "deleteSelectedFund";
    private static final String DELETE_SELECTED_RIDER = "deleteSelectedRider";
    private static final String DELETE_FUND = "deleteFund";
    private static final String DELETE_CURRENT_NOTE = "deleteCurrentNote";
    private static final String DELETE_TRANSACTION = "deleteTransaction";
    private static final String DELETE_CONTRACT_CLIENT = "deleteContractClient";
    private static final String GET_CLIENT_INFO = "getClientInfo";
    private static final String FIND_CLIENTS_BY_NAME_DOB = "findClientsByNameDOB";
    private static final String FIND_CLIENTS = "findClients";
    private static final String BUILD_ROLES_AND_CONTRACT_CLIENTS = "buildRolesAndContractClients";
    private static final String SHOW_FINANCIAL_VALUES = "showFinancialValues";
    private static final String SHOW_DATE_VALUES = "showDateValues";
    private static final String SHOW_AGENT_DETAIL_SUMMARY = "showAgentDetailSummary";
    private static final String SHOW_FUND_DETAIL_SUMMARY = "showFundDetailSummary";
    private static final String SHOW_RIDER_DETAIL_SUMMARY = "showRiderDetailSummary";
    private static final String SAVE_BASE_RIDER = "saveBaseRider";
    private static final String SHOW_EVENT_DIALOG = "showEventDialog";
    private static final String SHOW_INVESTMENT_DIALOG = "showInvestmentDialog";
    private static final String SHOW_CONTRACT_LOAN = "showContractLoan";
    private static final String SHOW_INVESTMENT_DETAIL_SUMMARY = "showInvestmentDetailSummary";
    private static final String SHOW_PAYEE_DIALOG = "showPayeeDialog";
    private static final String SHOW_PAYEE_DETAIL_SUMMARY = "showPayeeDetailSummary";
    private static final String SHOW_CHARGE_DETAIL_SUMMARY = "showChargeDetailSummary";
    private static final String SHOW_TAX_ADJUSTMENT_DIALOG = "showTaxAdjustmentDialog";
    private static final String SAVE_TAX_ADJUSTMENT = "saveTaxAdjustment";
    private static final String SHOW_DISBURSE_TAX_ADJUST_DIALOG = "showDisburseTaxAdjustDialog";
    private static final String SAVE_DISBURSE_TAX_ADJUSTMENT = "saveDisburseTaxAdjustment";
    private static final String SHOW_FILTER_CRITERIA_DIALOG = "showFilterCriteriaDialog";
    private static final String AUTO_GENERATE_CONTRACT_NUMBER = "autoGenerateContractNumber";
    private static final String RESTORE_CONTRACT_FROM_BACKUP = "restoreContractFromBackup";
    private static final String SHOW_EDITING_EXCEPTION_DIALOG = "showEditingExceptionDialog";
    private static final String SHOW_LOCKED_VALUES_DIALOG = "showLockedValuesDialog";
    private static final String SHOW_INVALID_INVESTMENTS_DIALOG = "showInvalidInvestmentsDialog";
    private static final String LOCK_CONTRACT = "lockContract";
    private static final String ADD_NEW_CONTRACT = "addNewContract";
    private static final String SHOW_JUMP_TO_DIALOG = "showJumpToDialog";
    private static final String SHOW_VO_EDIT_EXCEPTION_DIALOG = "showVOEditExceptionDialog";
    private static final String SHOW_CORRESPONDENCE_DIALOG = "showCorrespondenceDialog";
    private static final String SHOW_HISTORY_CORRESPONDENCE_DIALOG = "showHistoryCorrespondenceDialog";
    private static final String SHOW_SELECTED_INF_QUOTE_FUND = "showSelectedInfQuoteFund";
    private static final String SAVE_SELECTED_CLIENT_FOR_PAYEEOVRD = "saveSelectedClientForPayeeOvrd";
    private static final String FIND_PAYEE_CLIENT_BY_TAXID = "findPayeeClientByTaxId";
    private static final String FIND_PAYEE_CLIENTS_BY_NAME = "findPayeeClientsByName";
    private static final String FIND_PAYEE_CLIENTS_BY_NAMEDOB = "findPayeeClienstByNameDOB";
	private static final String SHOW_SUPPLEMENTAL_DIALOG = "showSupplementalDialog";
    private static final String CANCEL_FILTER_CRITERIA_DIALOG = "cancelFilterCriteriaDialog";
    private static final String SHOW_CONTRACT_HISTORY_FILTER_DIALOG = "showContractHistoryFilterDialog";
    private static final String FILTER_CONTRACT_HISTORY = "filterContractHistory";
    private static final String SHOW_PROPOSAL_DIALOG = "showProposalDialog";
    private static final String PERFORM_PROPOSAL = "performProposal";
    private static final String CLEAR_PROPOSAL_DIALOG = "clearProposalDialog";
    private static final String CLOSE_PROPOSAL_DIALOG = "closeProposalDialog";
    private static final String ENABLE_DEPOSIT_FOR_ADJUSTMENT = "enableDepositForAdjustment";
    private static final String SAVE_DEPOSIT_ADJUSTMENT = "saveDepositAdjustment";
    private static final String ANALYZE_INFORCE_QUOTE = "analyzeInforceQuote";
    private static final String GET_ADDRESS_FOR_TYPE = "getAddressForType";
    private static final String SHOW_AGENT_HIERARCHY_ALLOCATION_DIALOG = "showAgentHierarchyAllocationDialog";
    private static final String SHOW_AGENT_HIERARCHY_ALLOCATION_DETAIL = "showAgentHierarchyAllocationDetail";
    private static final String SHOW_CONTRACT_BILLING_DIALOG = "showContractBillingDialog";
    private static final String SHOW_SCHEDULED_PREMIUM_DIALOG = "showContractScheduledPremiumDialog";
    private static final String SHOW_UNITS_DIALOG = "showContractUnitsDialog";
    private static final String SAVE_BILLING_CHANGE = "saveBillingChange";
    private static final String CHANGE_TO_INDIVIDUAL_BILL = "changeToIndividualBill";
    private static final String CHANGE_TO_LIST_BILL = "changeToListBill";
    private static final String SAVE_CHANGE_TO_INDIVIDUAL_BILL = "saveChangeToIndividualBill";
    private static final String SAVE_CHANGE_TO_LIST_BILL = "saveChangeToListBill";
    private static final String SHOW_QUESTIONNAIRE_RESPONSE_DIALOG = "showQuestionnaireResponseDialog";
    private static final String SHOW_LOAN_FOR_TRAD = "showLoanInfoForTrad";
    private static final String SHOW_LOAN_DETAIL_FOR_TRAD = "showLoanDetailForTrad";
    private static final String FIND_DEPARTMENT_LOCATIONS = "findDepartmentLocations";
    private static final String SHOW_NFO_DBO_CHANGE_DIALOG = "showNFODBOChangeDialog";
    private static final String SAVE_NFO_DBO_CHANGE_DIALOG = "saveNFODBOChangeDialog";
    private static final String SHOW_CLASS_GENDER_RATINGS_DIALOG = "showClassGenderRatingsDialog";
    private static final String SAVE_CLASS_GENDER_RATINGS_DIALOG = "saveClassGenderRatingsDialog";
    private static final String CREATE_TRANSACTION_FROM_QUOTE = "createTransactionFromQuote";
    private static final String SHOW_NOT_TAKEN_OVERRIDE_DIALOG = "showNotTakenOverrideDialog";
    private static final String SAVE_NOT_TAKEN_OVERRIDE_INDICATOR = "saveNotTakenOverrideIndicator";
    private static final String SHOW_FILTER_SUSPENSE_DIALOG = "showFilterSuspenseDialog";
    private static final String SHOW_SUSPENSE_TRANSFER_DIALOG = "showSuspenseTransferDialog";
    private static final String SUSPENSE_TRANSFER_SAVE_TO_SUMMARY = "suspenseTransferSaveToSummary";
    private static final String SHOW_SUSPENSE_TRANSFER_DETAIL = "showSuspenseTransferDetail";
    private static final String SUSPENSE_TRANSFER = "suspenseTransfer";
    private static final String SUSPENSE_TRANSFER_DELETE = "suspenseTransferDelete";
    private static final String CLOSE_SUSPENSE_DIALOG = "closeSuspenseDialog";
    private static final String CLOSE_SUSPENSE_TRANSFER_DIALOG = "closeSuspenseTransferDialog";
    private static final String SHOW_SUSPENSE_HISTORY_DIALOG = "showSuspenseHistoryDialog";
    private static final String SHOW_PREFERENCES = "showPreferences";
    private static final String SHOW_SELECTED_PREFERENCE = "showSelectedPreference";
    private static final String CLEAR_PREFERENCE_FOR_ADD = "clearPreferenceForAdd";
    private static final String SHOW_CONTRACT_AGENT_INFO = "showContractAgentInfo";
    private static final String SAVE_PREFERENCE = "savePreference";
    private static final String SELECT_PREFERENCE_FOR_CLIENT = "selectPreferenceForClient";
    private static final String SHOW_PREMIUM_DUE_HISTORY_DIALOG = "showPremiumDueHistoryDialog";
    private static final String SHOW_FINANCIAL_HISTORY_DIALOG = "showFinancialHistoryDialog";
    private static final String SHOW_CONTRACT_BILLS_HISTORY_DIALOG = "showContractBillHistoryDialog";
    private static final String SHOW_ENROLLMENTLEADSERVICEAGENT_INFO = "showEnrollmentLeadServiceAgentInfo";
    private static final String SHOW_BILLING_CHANGE_DIALOG = "showBillingChangeDialog";
    private static final String SAVE_BILLING_CHANGE_DIALOG = "saveBillingChangeDialog";
    private static final String SHOW_PUA_DIALOG = "showPUADialog";
    private static final String SHOW_VALUE_AT_ISSUE_DIALOG = "showValueAtIssueDialog";
    private static final String SHOW_RIDER_COVERAGE_SELECTION_DIALOG = "showRiderCoverageSelectionDialog";
    private static final String SAVE_RIDER_COVERAGE =  "saveRiderCoverage";
    private static final String SHOW_COMMISSION_PHASE_HISTORY =  "showCommissionPhaseHistoryDialog";
    private static final String SHOW_QUICK_PAY_DIALOG = "showQuickPayDialog";

    //Pages that the Tran will return
    private static final String CORRESPONDENCE_DIALOG = "/contract/jsp/correspondenceDialog.jsp";
    private static final String TAB_CONTENT = "/contract/jsp/contractTabContent.jsp";
    private static final String MAIN_FRAMESET = "/contract/jsp/mainframeset.jsp";
    private static final String CONTRACT_MAIN = "/contract/jsp/contractMain.jsp";
    private static final String CONTRACT_DEFERRED_ANNUITY_MAIN = "/contract/jsp/contractDeferredAnnuityMain.jsp";
    private static final String CONTRACT_LIFE_MAIN = "/contract/jsp/contractLifeMain.jsp";
    private static final String CONTRACT_TRAD_MAIN = "/contract/jsp/contractTradMain.jsp";
    private static final String CONTRACT_UNIVERSAL_LIFE_MAIN = "/contract/jsp/contractUniversalLifeMain.jsp";
    private static final String CONTRACT_AH_MAIN = "/contract/jsp/contractA&HMain.jsp";
    private static final String CONTRACT_RIDERS = "/contract/jsp/contractRider.jsp";
    private static final String CONTRACT_INVESTMENTS = "/contract/jsp/contractInvestments.jsp";
    private static final String CONTRACT_LOAN_INVESTMENTS = "/contract/jsp/contractLoanInvestments.jsp";
    private static final String CONTRACT_NON_PAYEE = "/contract/jsp/contractNonPayee.jsp";
    private static final String CONTRACT_PAYEE = "/contract/jsp/contractPayee.jsp";
    private static final String CONTRACT_INSURED = "/contract/jsp/contractInsured.jsp";
    private static final String CONTRACT_AGENT = "/contract/jsp/contractAgent.jsp";
    private static final String CONTRACT_HISTORY = "/contract/jsp/changeHistoryDetail.jsp";
    private static final String CONTRACT_FH_HISTORY = "/contract/jsp/historyDetail.jsp";
    private static final String CONTRACT_DH_HISTORY = "/contract/jsp/disbursementHistoryDetail.jsp";
    private static final String CONTRACT_YE_HISTORY = "/contract/jsp/yearEndHistoryDetail.jsp";
    private static final String SCHEDULED_PREMIUM_DIALOG = "/contract/jsp/contractScheduledPremiumDialog.jsp";
    private static final String UNITS_DIALOG = "/contract/jsp/contractUnitsDialog.jsp";

    // Dialog boxes that the Tran will return
//    private static final String CONTRACT_CLIENT_INFO_DIALOG = "/contract/jsp/contractClientInfoDialog.jsp";
    private static final String CONTRACT_NUMBER_DIALOG = "/contract/jsp/contractNumberDialog.jsp";
    private static final String CONTRACT_CHECK_IF_NEW_AGENT_HIERARCHY_NEEDED_DIALOG = "/contract/jsp/contractCheckIfNewHierarchyNeededDialog.jsp";
    private static final String LOAD_CONTRACT_DIALOG = "/contract/jsp/loadContractDialog.jsp";
    private static final String CONTRACT_FINANCIAL_VALUE_DIALOG = "/contract/jsp/financialValues.jsp";
    private static final String CONTRACT_TRAD_FINANCIAL_VALUE_DIALOG = "/contract/jsp/financialValuesTrad.jsp";
    private static final String CONTRACT_UNIVERSAL_LIFE_FINANCIAL_VALUE_DIALOG = "/contract/jsp/financialValuesUniversalLife.jsp";
    private static final String CONTRACT_DATE_VALUE_DIALOG = "/contract/jsp/contractDatesDialog.jsp";
    private static final String CONTRACT_CLIENT_ADD_DIALOG = "/contract/jsp/contractClientAdd.jsp";
    private static final String CONTRACT_TRANS_SCHEDULED_EVENT = "/contract/jsp/contractTransScheduledEvent.jsp";
    private static final String CONTRACT_TRANS_WITHDRAWAL = "/contract/jsp/contractTransWithdrawal.jsp";
    private static final String CONTRACT_TRANS_PAYMENT = "/contract/jsp/contractTranPayment.jsp";
    private static final String CONTRACT_TRANSFER = "/contract/jsp/contractTransfer.jsp";
    private static final String CONTRACT_TRANS_CHARGE_DIALOG = "/contract/jsp/contractTransChargeDialog.jsp";
    private static final String CONTRACT_TRANS_INVESTMENT_DIALOG = "/contract/jsp/contractTransInvestmentDialog.jsp";
    private static final String CONTRACT_TRANS_PAYEE_DIALOG = "/contract/jsp/contractTransPayeeDialog.jsp";
    private static final String QUICK_PAY_DIALOG = "/contract/jsp/quickPayDialog.jsp";
    private static final String TRX_SUSPENSE_DIALOG = "/contract/jsp/trxSuspenseDialog.jsp";
    private static final String FILTER_CRITERIA_DIALOG = "/contract/jsp/filterCriteriaDialog.jsp";
//    private static final String CONTRACT_REAL_TIME_LOG = "/contract/jsp/contractRTLog.jsp";
    private static final String INFORCE_QUOTE_DIALOG = "/contract/jsp/inforceQuoteDialog.jsp";
    private static final String LOAN_PAYOFF_QUOTE_DIALOG = "/contract/jsp/loanPayoffQuoteDialog.jsp";
    private static final String CONTRACT_SUSPENSE = "/contract/jsp/contractSuspense.jsp";
    private static final String CONTRACT_ORIGINAL_SUSPENSE_INFO = "/contract/jsp/contractOriginalSuspenseInfo.jsp";
//    private static final String SUSPENSE_CLIENT_INFO = "/contract/jsp/suspenseClientInfo.jsp";
    private static final String REFUND_SUSPENSE_DIALOG = "/contract/jsp/refundSuspenseDialog.jsp";
    private static final String SUSPENSE_TRANSACTION_INFO = "/contract/jsp/contractSuspenseTrxInfoDialog.jsp";
    private static final String CONTRACT_ACCUMULATION_DIALOG = "/contract/jsp/contractAccumulationDialog.jsp";
    private static final String EDITING_EXCEPTION_DIALOG = "/common/jsp/editingExceptionDialog.jsp";
    private static final String LOCKED_VALUES_DIALOG = "/common/jsp/lockedValuesDialog.jsp";
    private static final String INVALID_INVESTMENTS_DIALOG = "/common/jsp/invalidInvestmentsDialog.jsp";
    private static final String DELETE_CONTRACT_CONFIRMATION_DIALOG = "/contract/jsp/deleteContractConfirmationDialog.jsp";
    private static final String CANCEL_CONTRACT_CONFIRMATION_DIALOG = "/contract/jsp/cancelContractConfirmationDialog.jsp";
    private static final String JUMP_TO_DIALOG = "/common/jsp/jumpToDialog.jsp";
    private static final String CONTRACT_NOTES_DIALOG = "/contract/jsp/contractNotesDialog.jsp";
    private static final String VO_EDIT_EXCEPTION_DIALOG = "/common/jsp/VOEditExceptionDialog.jsp";
    private static final String ANALYZER_DIALOG = "/engine/jsp/dbugmain.jsp";
    private static final String CHARGES_DIALOG = "/contract/jsp/contractChargesDialog.jsp";
    private static final String TAX_ADJUSTMENT_DIALOG = "/contract/jsp/taxAdjustmentDialog.jsp";
    private static final String DISBURSE_TAX_ADJUST_DIALOG = "/contract/jsp/disburseTaxAdjustDialog.jsp";
    private static final String CONTRACT_TAXES_DIALOG = "/contract/jsp/contractTaxesDialog.jsp";
    private static final String FILTER_ALLOCATIONS_DIALOG = "/contract/jsp/filterAllocationsDialog.jsp";
    private static final String DEPOSIT_BUCKETS_DIALOG = "/contract/jsp/depositBucketsDialog.jsp";
    private static final String AGENT_SELECTION_DIALOG = "/contract/jsp/agentSelectionDialog.jsp";
    private static final String AGENT_HIERARCHY_DIALOG = "/contract/jsp/agentHierarchyDialog.jsp";
    private static final String COMMISSION_OVERRIDES_DIALOG = "/contract/jsp/commissionOverridesDialog.jsp";
    private static final String DEPOSIT_DIALOG = "/contract/jsp/depositDialog.jsp";
    private static final String PROCESS_OVERRIDE_DIALOG = "/contract/jsp/processOverrideDialog.jsp";
    private static final String EMPLOYER_EMPLOYEE_OVERRIDE_DIALOG = "/contract/jsp/employerEmployeeOverrideDialog.jsp";
    private static final String BILL_AMT_EDIT_OVERRIDE_DIALOG = "/contract/jsp/billAmtEditOverrideDialog.jsp";
    private static final String HISTORY_CORRESPONDENCE_DIALOG = "/contract/jsp/historyCorrespondenceDialog.jsp";
    private static final String CONTRACT_REQUIREMENTS = "/contract/jsp/contractRequirements.jsp";
    private static final String MANUAL_REQUIREMENT_SELECTION_DIALOG = "/contract/jsp/manualRequirementSelectionDialog.jsp";
    private static final String BUCKET_AND_INVESTMENT_HISTORIES_DIALOG = "/contract/jsp/bucketAndInvestmentHistoriesDialog.jsp";
    private static final String SELECT_COVERAGE_DIALOG = "/contract/jsp/selectCoverageDialog.jsp";
    private static final String RMD_DIALOG = "/contract/jsp/rmdDialog.jsp";
    private static final String CONTRACT_TRANSFER_FUND = "addingNewFundFromTransfer";
    private static final String SHOW_OVERDUE_CHARGE_REMAINING_DIALOG = "showOverdueChargeRemainingDialog";
    private static final String OVERDUE_CHARGE_REMAINING_DIALOG = "/contract/jsp/overdueChargeRemainingDialog.jsp";
    private static final String CONTRACT_TRAD_LIFE_RIDER = "/contract/jsp/contractTradLifeRider.jsp";
    private static final String CONTRACT_NON_TRAD_LIFE_RIDER = "/contract/jsp/contractNonTradLifeRider.jsp";
    private static final String CONTRACT_UNIVERSAL_LIFE_RIDER = "/contract/jsp/contractUniversalLifeRider.jsp";
    private static final String SHOW_LIFE_RIDER_DETAIL_SUMMARY = "showLifeRiderDetailSummary";
    private static final String SHOW_ORIGINATING_TRX_DIALOG = "showOriginatingTrxDialog";
    private static final String SHOW_LOAN_SETTLEMENT_DIALOG = "showLoanSettlementDialog";
    private static final String ORIGINATING_TRX_DIALOG = "/contract/jsp/originatingTrxDialog.jsp";
    private static final String ADD_PAYEE_OVERRIDE_DIALOG = "/contract/jsp/addPayeeOverrideDialog.jsp";
    private static final String SUPPLEMENTAL_DIALOG = "/contract/jsp/supplementalDialog.jsp";
    private static final String CONTRACT_HISTORY_FILTER_DIALOG = "/contract/jsp/contractHistoryFilterDialog.jsp";
    private static final String PROPOSAL_DIALOG = "/contract/jsp/proposalDialog.jsp";
    private static final String LOAN_QUOTE_DIALOG = "/contract/jsp/loanQuoteDialog.jsp";
    private static final String LOAN_SETTLEMENT_DIALOG = "/contract/jsp/loanSettlementDialog.jsp";
    private static final String AGENT_HIERARCHY_ALLOCATION_DIALOG = "/contract/jsp/contractAgentHierarchyAllocationDialog.jsp";
    private static final String CONTRACT_AGENT_HIERARCHY_ALLOCATION_DIALOG = "/contract/jsp/contractRiderAgentHierarchyAllocationDialog.jsp";
    private static final String CONTRACT_LIST_BILLING_DIALOG = "/contract/jsp/contractListBillingDialog.jsp";
    private static final String CONTRACT_INDIVIDUAL_BILLING_DIALOG = "/contract/jsp/contractIndividualBillingDialog.jsp";
    private static final String CONTRACT_LIST_UL_BILLING_DIALOG = "/contract/jsp/contractListUniversalLifeBillingDialog.jsp";
    private static final String CONTRACT_INDIVIDUAL_UL_BILLING_DIALOG = "/contract/jsp/contractIndividualUniversalLifeBillingDialog.jsp";
    private static final String CHANGE_TO_INDIVIDUAL_BILL_DIALOG = "/contract/jsp/changeToIndividualBillDialog.jsp";
    private static final String CHANGE_TO_LIST_BILL_DIALOG = "/contract/jsp/changeToListBillDialog.jsp";
    private static final String QUESTIONNAIRE_RESPONSE_DIALOG = "/common/jsp/questionnaireResponseDialog.jsp";
    private static final String CONTRACT_LOAN_TRAD = "/contract/jsp/contractLoanTrad.jsp";
    private static final String NFO_DBO_CHANGE_DIALOG = "/contract/jsp/nfoDBOChangeDialog.jsp";
    private static final String CLASS_GENDER_RATINGS_DIALOG = "/contract/jsp/classGenderRatingsDialog.jsp";
    private static final String TRAD_INFORCE_QUOTE_DIALOG = "/contract/jsp/tradInforceQuoteDialog.jsp";
    private static final String NOT_TAKEN_OVERRIDE_DIALOG = "/contract/jsp/notTakenOverrideDialog.jsp";
    private static final String FILTER_SUSPENSE_DIALOG = "/contract/jsp/filterSuspenseDialog.jsp";
    private static final String SUSPENSE_TRANSFER_DIALOG = "/contract/jsp/suspenseTransferDialog.jsp";
    private static final String SUSPENSE_HISTORY_DIALOG = "/contract/jsp/suspenseHistoryDialog.jsp";
    private static final String PREMIUM_DUE_HISTORY_DIALOG = "/contract/jsp/premiumDueHistoryDialog.jsp";
    private static final String FINANCIAL_HISTORY_DIALOG = "/contract/jsp/financialHistoryDialog.jsp";
    private static final String RPU_QUOTE_DIALOG = "/contract/jsp/rpuQuoteDialog.jsp";
    private static final String CONTRACT_RIDER_AGENT_SELECTION_DIALOG = "/contract/jsp/contractRiderAgentSelectionDialog.jsp";
    private static final String BATCH_REVERSAL_DIALOG = "/contract/jsp/batchReversalDialog.jsp";
    private static final String BATCH_REVERSAL_CONFIRMATION_DIALOG = "/contract/jsp/batchReversalConfirmationDialog.jsp";
    private static final String PREFERENCES_DIALOG = "/contract/jsp/preferencesDialog.jsp";
    private static final String CONTRACT_AGENT_INFO_DIALOG = "/contract/jsp/contractAgentInformationDialog.jsp";
    private static final String ENROLLMENT_LEAD_SERVICE_AGENT_DIALOG = "/contract/jsp/enrollmentLeadServiceAgentInfoDialog.jsp";
    private static final String TEMPLATE_DIALOG = "/common/jsp/template/template-dialog.jsp";
    private static final String BILLING_CHANGE_DIALOG = "/contract/jsp/billingChangeDialog.jsp";
    private static final String CONTRACT_BILLS_HISTORY = "/contract/jsp/contractBillHistoryDialog.jsp";
    private static final String CONTRACT_PUA_DIALOG = "/contract/jsp/contractPUADialog.jsp";
    private static final String VALUE_AT_ISSUE_DIALOG = "/contract/jsp/valueAtIssueDialog.jsp";
    private static final String RIDER_COVERAGE_SELECTION_DIALOG = "/contract/jsp/contractRiderCoverageSelectionDialog.jsp";
    private static final String COMMISSION_PHASE_HISTORY_DIALOG = "/contract/jsp/commissionPhaseHistoryDialog.jsp";

    //    private java.util.Date currentDate = null;
    //    private CodeTableVO codeTableVO = null;
    //    FundVO[] fundNameVOs = null;
    boolean noScrolling = false;
    private static final String NOT_TAKEN_TYPE = "NotTaken";
    private static final String FULL_SURRENDER_TYPE = "FullSurrender";

    /**
     * NOTE: CompanyStructure and ProductStructure are used interchangeably
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    public String execute(AppReqBlock appReqBlock) throws Exception
    {
        preProcessRequest(appReqBlock);

        String action = appReqBlock.getReqParm("action");
        String returnPage = null;

        try
        {
            if (action.equals(SHOW_CONTRACT_MAIN_DEFAULT))
            {
                returnPage = showContractMainDefault(appReqBlock);
            }
            else if (action.equals(SHOW_CONTRACT_MAIN_CONTENT))
            {
                returnPage = showContractMainContent(appReqBlock);
            }
            else if (action.equals(GET_CLIENT_INFO))
            {
                returnPage = getClientInfo(appReqBlock);
            }
            else if (action.equals(SHOW_CONTRACT_RIDERS))
            {
                returnPage = showContractRiders(appReqBlock);
            }
            else if (action.equals(SHOW_CONTRACT_INVESTMENTS))
            {
                returnPage = showContractInvestments(appReqBlock);
            }
            else if (action.equals(SHOW_LOAN_PAYOFF_QUOTE_DIALOG))
            {
                returnPage = showLoanPayoffQuoteDialog(appReqBlock);
            }
            else if (action.equals(CLEAR_INVESTMENTS_FOR_ADD_OR_CANCEL))
            {
                returnPage = clearInvestmentsForAddOrCancel(appReqBlock);
            }
            else if (action.equals(CLEAR_NOTES_FOR_ADD_OR_CANCEL))
            {
                returnPage = clearNotesForAddOrCancel(appReqBlock);
            }
            else if (action.equals(SHOW_CONTRACT_NON_PAYEE_OR_PAYEE))
            {
                returnPage = showContractNonPayeeOrPayee(appReqBlock);
            }
            else if (action.equals(SHOW_CONTRACT_AGENTS))
            {
                returnPage = showContractAgents(appReqBlock);
            }
            else if (action.equals(SHOW_AGENT_SELECTION_DIALOG))
            {
                returnPage = showAgentSelectionDialog(appReqBlock);
            }
            else if (action.equals(SHOW_CONTRACT_RIDER_AGENT_SELECTION_DIALOG))
            {
                returnPage = showContractRiderAgentSelectionDialog(appReqBlock);
            }
            else if (action.equals(GET_AGENT_INFO))
            {
                returnPage = getAgentInfo(appReqBlock);
            }
            else if (action.equals(SHOW_REPORT_TO_AGENT))
            {
                returnPage = showReportToAgent(appReqBlock);
            }
            else if (action.equals(SAVE_AGENT_SELECTION))
            {
                returnPage = saveAgentSelection(appReqBlock);
            }
            else if (action.equals(CLOSE_AGENT_SELECTION_DIALOG))
            {
                returnPage = closeAgentSelectionDialog(appReqBlock);
            }
            else if (action.equals(CLEAR_CONTRACT_AGENT_FORM))
            {
                returnPage = clearContractAgentForm(appReqBlock);
            }
            else if (action.equals(CLEAR_ALLOCATION_FORM))
            {
                returnPage = clearAllocationForm(appReqBlock);
            }
            else if (action.equals(SAVE_AGENT_TO_SUMMARY))
            {
                returnPage = saveAllocationToSummary(appReqBlock);
            }
            else if (action.equals(SAVE_ALLOCATION_CHANGES))
            {
                returnPage = saveAllocationChanges(appReqBlock);
            }
            else if (action.equals(CANCEL_ALLOCATION_CHANGES))
            {
                returnPage = cancelAllocationChanges(appReqBlock);
            }
            else if (action.equals(DELETE_SELECTED_AGENT))
            {
                returnPage = deleteSelectedAllocation(appReqBlock);
            }
            else if (action.equals(SHOW_AGENT_DETAIL_SUMMARY))
            {
                returnPage = showAgentDetailSummary(appReqBlock);
            }
            else if (action.equals(SHOW_AGENT_HIERARCHY_DIALOG))
            {
                returnPage = showAgentHierarchyDialog(appReqBlock);
            }
            else if (action.equals(SHOW_SELECTED_HIERARCHY_ROW))
            {
                returnPage = showSelectedHierarchyRow(appReqBlock);
            }
            else if (action.equals(SELECT_COMM_PROFILE_FOR_AGENT))
            {
                returnPage = selectCommProfileForAgent(appReqBlock);
            }
            else if (action.equals(SAVE_AGENT_HIERARCHY))
            {
                returnPage = saveAgentHierarchy(appReqBlock);
            }
            else if (action.equals(CLOSE_AGENT_HIERARCHY))
            {
                returnPage = closeAgentHierarchy(appReqBlock);
            }
            else if (action.equals(SHOW_COMMISSION_OVERRIDES))
            {
                returnPage = showCommissionOverrides(appReqBlock);
            }
            else if (action.equals(SAVE_COMMISSION_OVERRIDES))
            {
                returnPage = saveCommissionOverrides(appReqBlock);
            }
            else if (action.equals(DELETE_COMMISSION_OVERRIDES))
            {
                returnPage = deleteCommissionOverrides(appReqBlock);
            }
            else if (action.equals(CANCEL_COMMISSION_OVERRIDES))
            {
                returnPage = cancelCommissionOverrides(appReqBlock);
            }
            else if (action.equals(SHOW_CONTRACT_HISTORY))
            {
                returnPage = showContractHistory(appReqBlock);
            }
            else if (action.equals(UPDATE_CLIENT_INFO))
            {
                returnPage = updateClientInfo(appReqBlock);
            }
            else if (action.equals(SAVE_RELATIONSHIP_COVERAGE))
            {
                returnPage = saveRelationshipCoverage(appReqBlock);
            }
            else if (action.equals(DELETE_CONTRACT))
            {
                returnPage = deleteContract(appReqBlock);
            }
            else if (action.equals(CANCEL_CONTRACT))
            {
                returnPage = cancelContract(appReqBlock);
            }
            else if (action.equals(SHOW_CONTRACT_CLIENT_ADD_DIALOG))
            {
                returnPage = showContractClientAddDialog(appReqBlock);
            }
            else if (action.equals(SHOW_FINANCIAL_VALUES))
            {
                returnPage = showFinancialValues(appReqBlock);
            }
            else if (action.equals(SHOW_DATE_VALUES))
            {
                returnPage = showDateValues(appReqBlock);
            }
            else if (action.equals(SHOW_CLIENT_DETAIL_SUMMARY))
            {
                returnPage = showClientDetailSummary(appReqBlock);
            }
            else if (action.equals(SHOW_HISTORY_DETAIL_SUMMARY))
            {
                returnPage = showHistoryDetailSummary(appReqBlock);
            }
            else if (action.equals(SHOW_TRANSACTION_DETAIL_SUMMARY))
            {
                returnPage = showTransactionDetailSummary(appReqBlock);
            }
            else if (action.equals(SHOW_TRANSACTION_DEFAULT))
            {
                returnPage = showTransactionDefault(appReqBlock);
            }
            else if (action.equals(SHOW_PROCESS_OVERRIDE_DIALOG))
            {
                returnPage = showProcessOverrideDialog(appReqBlock);
            }
            else if (action.equals(UPDATE_PROCESS_OVERRIDE))
            {
                returnPage = updateProcessOverride(appReqBlock);
            }
            else if (action.equals(SHOW_EMPLOYER_EMPLOYEE_OVERRIDE_DIALOG))
            {
                returnPage = showEmployerEmployeeOverrideDialog(appReqBlock);
            }
            else if (action.equals(UPDATE_EMPLOYER_EMPLOYEE_OVERRIDE))
            {
                returnPage = updateEmployerEmployeeOverride(appReqBlock);
            }
            else if (action.equals(SHOW_BILL_AMT_EDIT_OVERRIDE_DIALOG))
            {
                returnPage = showBillAmtEditOverrideDialog(appReqBlock);
            }
            else if (action.equals(UPDATE_BILL_AMT_EDIT_OVERRIDE))
            {
                returnPage = updateBillAmtEditOverride(appReqBlock);
            }
            else if (action.equals(SHOW_SUSPENSE))
            {
                returnPage = showSuspense(appReqBlock);
            }
            else if (action.equals(SHOW_INFORCE_QUOTE_DIALOG))
            {
                returnPage = showInforceQuoteDialog(appReqBlock);
            }
            else if (action.equals(CLOSE_INFORCE_QUOTE_DIALOG))
            {
                returnPage = closeInforceQuoteDialog(appReqBlock);
            }
            else if (action.equals(CLOSE_TRAN_DIALOG))
            {
                returnPage = closeTranDialog(appReqBlock);
            }
            else if (action.equals(PERFORM_INFORCE_QUOTE))
            {
                returnPage = performInforceQuote(appReqBlock);
            }
            else if (action.equals(SHOW_SELECTED_INF_QUOTE_FUND))
            {
                returnPage = showSelectedInfQuoteFund(appReqBlock);
            }
            else if (action.equals(CLEAR_INFORCE_QUOTE_DIALOG))
            {
                returnPage = clearInforceQuoteDialog(appReqBlock);
            }
            else if (action.equals(SHOW_LOAN_PAYOFF_QUOTE_DIALOG))
            {
                returnPage = showLoanPayoffQuoteDialog(appReqBlock);
            }
            else if (action.equals(CLOSE_LOAN_PAYOFF_QUOTE_DIALOG))
            {
                returnPage = closeLoanPayoffQuoteDialog(appReqBlock);
            }
            else if (action.equals(PERFORM_LOAN_PAYOFF_QUOTE))
            {
                returnPage = performLoanPayoffQuote(appReqBlock);
            }
            else if (action.equals(CLEAR_LOAN_PAYOFF_QUOTE_DIALOG))
            {
                returnPage = clearLoanPayoffQuoteDialog(appReqBlock);
            }
            else if (action.equals(SAVE_SUSPENSE_ENTRY))
            {
                returnPage = saveSuspenseEntry(appReqBlock);
            }
            else if (action.equals(SHOW_SUSPENSE_DETAIL))
            {
                returnPage = showSuspenseDetail(appReqBlock);
            }
            else if (action.equals(SHOW_ORIGINAL_SUSPENSE_INFO))
            {
                returnPage = showOriginalSuspenseInfo(appReqBlock);
            }
            else if (action.equals(SHOW_SUSPENSE_CLIENT_INFO))
            {
                returnPage = showSuspenseClientInfo(appReqBlock);
            }
//            else if (action.equals(SAVE_SUSPENSE_CLIENT_INFO))
//            {
//                returnPage = saveSuspenseClientInfo(appReqBlock);
//            }
//            else if (action.equals(CANCEL_SUSPENSE_CLIENT_INFO))
//            {
//                returnPage = cancelSuspenseClientInfo(appReqBlock);
//            }
            else if (action.equals(SHOW_SUSPENSE_TRANSACTION_INFO))
            {
                returnPage = showSuspenseTransactionInfo(appReqBlock);
            }
            else if (action.equals(CLOSE_SUSPENSE_TRANSACTION_INFO))
            {
                returnPage = closeSuspenseTransactionInfo(appReqBlock);
            }
            else if (action.equals(ADD_OR_CANCEL_SUSPENSE_ENTRY))
            {
                returnPage = addOrCancelSuspenseEntry(appReqBlock);
            }
            else if (action.equals(VOID_SUSPENSE_ENTRY))
            {
                returnPage = voidSuspenseEntry(appReqBlock);
            }
            else if (action.equals(SHOW_REFUND_SUSPENSE_DIALOG))
            {
                returnPage = showRefundSuspenseDialog(appReqBlock);
            }
            else if (action.equals(REFUND_SUSPENSE))
            {
                returnPage = refundSuspense(appReqBlock);
            }
            else if (action.equals(FIND_CLIENTS_BY_NAME_FOR_REFUND))
            {
                returnPage = findClientsByNameForRefund(appReqBlock);
            }
            else if (action.equals(FIND_CLIENT_BY_TAX_ID_FOR_REFUND))
            {
                returnPage = findClientByTaxIdForRefund(appReqBlock);
            }
            else if (action.equals(SELECT_CLIENT_DETAIL_FOR_REFUND))
            {
                returnPage = selectClientDetailForRefund(appReqBlock);
            }
            else if (action.equals(CANCEL_REFUND))
            {
                returnPage = cancelRefund(appReqBlock);
            }
            else if (action.equals(SELECT_AVAILABLE_INV_OVERRIDE))
            {
                returnPage = selectAvailableInvestmentOverride(appReqBlock);
            }
            else if (action.equals(SELECT_AVAILABLE_ITEMS))
            {
                returnPage = selectAvailableItems(appReqBlock);
            }
            else if (action.equals(REMOVE_SELECTED_ITEMS))
            {
                returnPage = removeSelectedItems(appReqBlock);
            }
            else if (action.equals(DELETE_SELECTED_CLIENT))
            {
                returnPage = deleteSelectedClient(appReqBlock);
            }
            else if (action.equals(DELETE_SELECTED_FUND))
            {
                returnPage = deleteSelectedFund(appReqBlock);
            }
            else if (action.equals(DELETE_SELECTED_RIDER))
            {
                returnPage = deleteSelectedRider(appReqBlock);
            }
            else if (action.equals(CANCEL_TRANSACTION))
            {
                returnPage = cancelTransaction(appReqBlock);
            }
            else if (action.equals(DELETE_TRANSACTION))
            {
                returnPage = deleteTransaction(appReqBlock);
            }
            else if (action.equals(DELETE_CONTRACT_CLIENT))
            {
                returnPage = deleteContractClient(appReqBlock);
            }
            else if (action.equals(CANCEL_CONTRACT_NON_PAYEE_OR_PAYEE))
            {
                returnPage = cancelContractNonPayeeOrPayee(appReqBlock);
            }
            else if (action.equals(SAVE_FUND_TO_SUMMARY))
            {
                returnPage = saveFundToSummary(appReqBlock);
            }
            else if (action.equals(SHOW_TRANSFER_FUND_DETAIL))
            {
                returnPage = showTransferFundDetail(appReqBlock);
            }
            else if (action.equals(SHOW_FUND_DETAIL_SUMMARY))
            {
                returnPage = showFundDetailSummary(appReqBlock);
            }
            else if (action.equals(SHOW_DEPOSIT_BUCKETS))
            {
                returnPage = showDepositBucketsDialog(appReqBlock);
            }
            else if (action.equals(SHOW_DEPOSIT_BUCKETS_DETAIL_SUMMARY))
            {
                returnPage = showDepositBucketsDetailSummary(appReqBlock);
            }
            else if (action.equals(SCROLL_DEPOSIT_BUCKETS))
            {
                returnPage = scrollDepositBuckets(appReqBlock);
            }
            else if (action.equals(SAVE_BASE_RIDER))
            {
                returnPage = saveBaseRider(appReqBlock);
            }
            else if (action.equals(SHOW_RIDER_DETAIL_SUMMARY))
            {
                returnPage = showRiderDetailSummary(appReqBlock);
            }
            else if (action.equals(INITIALIZE_CONTRACT_STATE))
            {
                returnPage = initializeContractState(appReqBlock);
            }
            else if (action.equals(AUTO_GENERATE_CONTRACT_NUMBER))
            {
                returnPage = autoGenerateContractNumber(appReqBlock);
            }
            else if (action.equals(SAVE_CONTRACT_DETAIL))
            {
                returnPage = saveContractDetail(appReqBlock);
            }
            else if (action.equals(SAVE_CONTRACT))
            {
                returnPage = saveContract(appReqBlock);
            }
            else if (action.equals(LOAD_CONTRACT))
            {
                returnPage = loadContract(appReqBlock);
            }
            else if (action.equals(LOAD_TRANSACTION_PROCESS))
            {
                returnPage = loadTransactionProcess(appReqBlock);
            }
            else if (action.equals(SHOW_EVENT_DIALOG))
            {
                returnPage = showEventDialog(appReqBlock);
            }
            else if (action.equals(UPDATE_CHARGE_OVERRIDE))
            {
                returnPage = updateChargeOverride(appReqBlock);
            }
            else if (action.equals(DELETE_CHARGE_OVERRIDE))
            {
                returnPage = deleteChargeOverride(appReqBlock);
            }
            else if (action.equals(SHOW_INVESTMENT_DIALOG))
            {
                returnPage = showInvestmentDialog(appReqBlock);
            }
            else if (action.equals(SHOW_CONTRACT_LOAN))
            {
                returnPage = showContractLoan(appReqBlock);
            }
            else if (action.equals(SHOW_INVESTMENT_DETAIL_SUMMARY))
            {
                returnPage = showInvestmentDetailSummary(appReqBlock);
            }
            else if (action.equals(SHOW_PAYEE_DIALOG))
            {
                returnPage = showPayeeDialog(appReqBlock);
            }
            else if (action.equals(SHOW_PAYEE_DETAIL_SUMMARY))
            {
                returnPage = showPayeeDetailSummary(appReqBlock);
            }
            else if (action.equals(SHOW_CHARGE_DETAIL_SUMMARY))
            {
                returnPage = showChargeDetailSummary(appReqBlock);
            }
            else if (action.equals(UPDATE_INVESTMENT_OVERRIDE))
            {
                returnPage = updateInvestmentOverride(appReqBlock);
            }
            else if (action.equals(CANCEL_INVESTMENT_OVERRIDE))
            {
                returnPage = cancelInvestmentOverride(appReqBlock);
            }
            else if (action.equals(DELETE_INVESTMENT_OVERRIDE))
            {
                returnPage = deleteInvestmentOverride(appReqBlock);
            }
            else if (action.equals(SHOW_FILTER_CRITERIA_DIALOG))
            {
                returnPage = showFilterCriteriaDialog(appReqBlock);
            }
            else if (action.equals(RESTORE_CONTRACT_FROM_BACKUP))
            {
                returnPage = restoreContractFromBackup(appReqBlock);
            }
            else if (action.equals(ADD_FUND))
            {
                returnPage = addTransferFund(appReqBlock);
            }
            else if (action.equals(SAVE_FUND))
            {
                returnPage = saveTransferFund(appReqBlock);
            }
            else if (action.equals(CANCEL_FUND))
            {
                returnPage = cancelTransferFund(appReqBlock);
            }
            else if (action.equals(DELETE_FUND))
            {
                returnPage = deleteTransferFund(appReqBlock);
            }
            else if (action.equals(SHOW_ACCUMULATION_DIALOG))
            {
                returnPage = showAccumulationDialog(appReqBlock);
            }
            else if (action.equals(SHOW_EDITING_EXCEPTION_DIALOG))
            {
                returnPage = showEditingExceptionDialog(appReqBlock);
            }
            else if (action.equals(SHOW_LOCKED_VALUES_DIALOG))
            {
                returnPage = showLockedValuesDialog(appReqBlock);
            }
            else if (action.equals(SHOW_INVALID_INVESTMENTS_DIALOG))
            {
                returnPage = showInvalidInvestmentsDialog(appReqBlock);
            }
            else if (action.equals(LOAD_CONTRACT_AFTER_SEARCH))
            {
                returnPage = loadContractAfterSearch(appReqBlock);
            }
            else if (action.equals(LOCK_CONTRACT))
            {
                returnPage = lockContract(appReqBlock);
            }
            else if (action.equals(SHOW_DELETE_CONTRACT_CONFIRMATION_DIALOG))
            {
                returnPage = showDeleteContractConfirmationDialog(appReqBlock);
            }
            else if (action.equals(ADD_NEW_CONTRACT))
            {
                returnPage = addNewContract(appReqBlock);
            }
            else if (action.equals(SHOW_CANCEL_CONTRACT_CONFIRMATION_DIALOG))
            {
                returnPage = showCancelContractConfirmationDialog(appReqBlock);
            }
            else if (action.equals(SHOW_JUMP_TO_DIALOG))
            {
                returnPage = showJumpToDialog(appReqBlock);
            }
            else if (action.equals(SHOW_NOTES_DIALOG))
            {
                returnPage = showNotesDialog(appReqBlock);
            }
            else if (action.equals(SHOW_TAXES_DIALOG))
            {
                returnPage = showTaxesDialog(appReqBlock);
            }
            else if (action.equals(SHOW_NOTES_DETAIL_SUMMARY))
            {
                returnPage = showNotesDetailSummary(appReqBlock);
            }
            else if (action.equals(CANCEL_NOTES))
            {
                returnPage = cancelNotes(appReqBlock);
            }
            else if (action.equals(SAVE_NOTE_TO_SUMMARY))
            {
                returnPage = saveNoteToSummary(appReqBlock);
            }
            else if (action.equals(SAVE_NOTES))
            {
                returnPage = saveNotes(appReqBlock);
            }
            else if (action.equals(SAVE_TAXES))
            {
                returnPage = saveTaxes(appReqBlock);
            }
            else if (action.equals(SAVE_SCHEDULED_PREMIUM))
            {
                returnPage = saveScheduledPremium(appReqBlock);
            }
            else if (action.equals(SAVE_UNITS))
            {
                returnPage = saveScheduledPremium(appReqBlock);
            }
            else if (action.equals(SHOW_FILTER_ALLOCATION_DIALOG))
            {
                returnPage = showFilterAllocationDialog(appReqBlock);
            }
            else if (action.equals(SHOW_FILTER_ALLOCATION_DETAIL))
            {
                returnPage = showFilterAllocationDetail(appReqBlock);
            }
            else if (action.equals(SAVE_FILTER_ALLOC_TO_SUMMARY))
            {
                returnPage = saveFilterAllocToSummary(appReqBlock);
            }
            else if (action.equals(SHOW_TRX_SUSPENSE_DIALOG))
            {
                returnPage = showTrxSuspenseDialog(appReqBlock);
            }
            else if (action.equals(SHOW_TRX_DEPOSIT_DETAIL_SUMMARY))
            {
                returnPage = showTrxDepositDetailSummary(appReqBlock);
            }
            else if (action.equals(SHOW_SELECTED_TRX_SUSPENSE))
            {
                returnPage = showSelectedTrxSuspense(appReqBlock);
            }
            else if (action.equals(SAVE_TRX_SUSPENSE_SELECTION_TO_SUMMARY))
            {
                returnPage = saveTrxSuspenseSelectionToSummary(appReqBlock);
            }
            else if (action.equals(CLOSE_TRX_SUSPENSE_DIALOG))
            {
                returnPage = closeTrxSuspenseDialog(appReqBlock);
            }
            else if (action.equals(DELETE_SELECTED_DEPOSIT))
            {
                returnPage = deleteSelectedDeposit(appReqBlock);
            }
            else if (action.equals(CLEAR_TRX_SUSPENSE_FORM_ON_CANCEL))
            {
                returnPage = clearTrxSuspenseFormOnCancel(appReqBlock);
            }
            else if (action.equals(SHOW_CHARGES_DIALOG))
            {
                returnPage = showChargesDialog(appReqBlock);
            }
            else if (action.equals(CLOSE_FILTER_ALLOC_DIALOG))
            {
                returnPage = closeFilterAllocDialog(appReqBlock);
            }
            else if (action.equals(CLOSE_AND_SAVE_INV_ALLOC))
            {
                returnPage = closeAndSaveInvestmentAllocations(appReqBlock);
            }
            else if (action.equals(SHOW_PAYEE_OVERRIDE_DETAIL_SUMMARY))
            {
                returnPage = showPayeeOverrideDetailSummary(appReqBlock);
            }
            else if (action.equals(UPDATE_CONTRACT_CLIENT))
            {
                returnPage = updateContractClient(appReqBlock);
            }
            else if (action.equals(ADD_CONTRACT_CLIENT))
            {
                returnPage = addContractClient(appReqBlock);
            }
            else if (action.equals(CANCEL_CONTRACT_CLIENT))
            {
                returnPage = cancelContractClient(appReqBlock);
            }
            else if (action.equals(CREATE_NEW_CONTRACT_CLIENT_OVERRIDES))
            {
                returnPage = createNewContractClientOverrides(appReqBlock);
            }
            else if (action.equals(ANALYZE_TRANSACTION))
            {
                returnPage = analyzeTransaction(appReqBlock);
            }
            else if (action.equals(SHOW_ANALYZER))
            {
                returnPage = showAnalyzer(appReqBlock);
            }
            else if (action.equals(SAVE_TRANSACTION_TO_SUMMARY))
            {
                returnPage = saveTransactionToSummary(appReqBlock);
            }
            else if (action.equals(RUN_REVERSAL))
            {
                returnPage = runReversal(appReqBlock);
            }
            else if (action.equals(REVERSE_SELECTED_TRX))
            {
                returnPage = reverseSelectedTrx(appReqBlock);
            }
            else if (action.equals(REVERSE_TO_SUBMITTED))
            {
                returnPage = reverseToSubmitted(appReqBlock);
            }
            else if (action.equals(REVERSE_TO_SUBMITPEND))
            {
                returnPage = reverseToSubmitPend(appReqBlock);
            }
            else if (action.equals(REVERSE_THROUGH_DATE))
            {
                returnPage = reverseThroughDate(appReqBlock);
            }
            else if (action.equals(RUN_BATCH_REVERSALS))
            {
                returnPage = runBatchReversals(appReqBlock);
            }
            else if (action.equals(SHOW_BATCH_REVERSAL_DIALOG))
            {
                returnPage = showBatchReversalDialog(appReqBlock);
            }
            else if (action.equals(SAVE_RIDER))
            {
                returnPage = saveRider(appReqBlock);
            }
            else if (action.equals(DELETE_CURRENT_NOTE))
            {
                returnPage = deleteCurrentNote(appReqBlock);
            }
            else if (action.equals(SHOW_DEPOSIT_DIALOG))
            {
                returnPage = showDepositDialog(appReqBlock);
            }
            else if (action.equals(SHOW_DEPOSIT_DETAIL_SUMMARY))
            {
                returnPage = showDepositDetailSummary(appReqBlock);
            }
            else if (action.equals(FIND_CLIENTS_BY_NAME_DOB))
            {
                returnPage = findClientsByNameDOB(appReqBlock);
            }
            else if (action.equals(FIND_CLIENTS))
            {
                returnPage = findClients(appReqBlock);
            }

//            else if (action.equals(FIND_CLIENTS_BY_NAME_FOR_SUSPENSE))
//            {
//                returnPage = findClientsByNameForSuspense(appReqBlock);
//            }
//            else if (action.equals(FIND_CLIENT_BY_TAX_ID_FOR_SUSPENSE))
//            {
//                returnPage = findClientByTaxIdForSuspense(appReqBlock);
//            }
//            else if (action.equals(SELECT_CLIENT_DETAIL_FOR_SUSPENSE))
//            {
//                returnPage = selectClientDetailForSuspense(appReqBlock);
//            }
            else if (action.equals(SHOW_TAX_ADJUSTMENT_DIALOG))
            {
                returnPage = showTaxAdjustmentDialog(appReqBlock);
            }
            else if (action.equals(SAVE_TAX_ADJUSTMENT))
            {
                returnPage = saveTaxAdjustment(appReqBlock);
            }
            else if (action.equals(SHOW_DISBURSE_TAX_ADJUST_DIALOG))
            {
                returnPage = showDisburseTaxAdjustDialog(appReqBlock);
            }
            else if (action.equals(SAVE_DISBURSE_TAX_ADJUSTMENT))
            {
                returnPage = saveDisburseTaxAdjustment(appReqBlock);
            }
            else if (action.equals(BUILD_ROLES_AND_CONTRACT_CLIENTS))
            {
                returnPage = buildRolesAndContractClients(appReqBlock);
            }
            else if (action.equals(CREATE_NEW_EDIT_TRX_CORR))
            {
                returnPage = createNewEDITTrxCorrespondence(appReqBlock);
            }
            else if (action.equals(SHOW_VO_EDIT_EXCEPTION_DIALOG))
            {
                returnPage = showVOEditExceptionDialog(appReqBlock);
            }
            else if (action.equals(SHOW_CORRESPONDENCE_DIALOG))
            {
                returnPage = showCorrespondenceDialog(appReqBlock);
            }
            else if (action.equals(SHOW_HISTORY_CORRESPONDENCE_DIALOG))
            {
                returnPage = showHistoryCorrespondenceDialog(appReqBlock);
            }
            else if (action.equals(SHOW_CONTRACT_REQUIREMENTS))
            {
                returnPage = showContractRequirements(appReqBlock);
            }
            else if (action.equals(SHOW_MANUAL_REQUIREMENT_SELECTION_DIALOG))
            {
                returnPage = showManualRequirementSelectionDialog(appReqBlock);
            }
            else if (action.equals(CANCEL_REQUIREMENT))
            {
                returnPage = cancelRequirement(appReqBlock);
            }
            else if (action.equals(SAVE_REQUIREMENT_TO_SUMMARY))
            {
                returnPage = saveRequirementToSummary(appReqBlock);
            }
            else if (action.equals(DELETE_SELECTED_REQUIREMENT))
            {
                returnPage = deleteSelectedRequirement(appReqBlock);
            }
            else if (action.equals(SHOW_REQUIREMENT_DETAIL))
            {
                returnPage = showRequirementDetail(appReqBlock);
            }
            else if (action.equals(SHOW_MANUAL_REQUIREMENT_DESCRIPTION))
            {
                returnPage = showManualRequirementDescription(appReqBlock);
            }
            else if (action.equals(SAVE_MANUAL_REQUIREMENT))
            {
                returnPage = saveManualRequirement(appReqBlock);
            }
            else if (action.equals(SHOW_BUCKET_AND_INVESTMENT_HISTORIES))
            {
                returnPage = showBucketAndInvestmentHistories(appReqBlock);
            }
            else if (action.equals(SHOW_SELECT_COVERAGE_DIALOG))
            {
                returnPage = showSelectCoverageDialog(appReqBlock);
            }
            else if (action.equals(SHOW_OVERDUE_CHARGE_REMAINING_DIALOG))
            {
                returnPage = showOverdueChargeRemainingDialog(appReqBlock);
            }
            else if (action.equals(ADD_LIFE_RIDER))
            {
                returnPage = addLifeRider(appReqBlock);
            }
            else if (action.equals(SAVE_LIFE_RIDER))
            {
                returnPage = saveLifeRider(appReqBlock);
            }
            else if (action.equals(CHECK_IF_NEW_AGENT_HIERARCHY_NEEDED))
            {
                returnPage = checkIfNewAgentHierarchyNeeded(appReqBlock);
            }
            else if (action.equals(DELETE_LIFE_RIDER))
            {
                returnPage = deleteLifeRider(appReqBlock);
            }
            else if (action.equals(SHOW_LIFE_RIDER_DETAIL_SUMMARY))
            {
                returnPage = showLifeRiderDetailSummary(appReqBlock);
            }
            else if (action.equals(SHOW_RMD_DIALOG))
            {
                returnPage = showRMDDialog(appReqBlock);
            }
            else if (action.equals(SAVE_RMD_DIALOG))
            {
                returnPage = saveRMDDialog(appReqBlock);
            }
            else if (action.equals(CLOSE_RMD_DIALOG))
            {
                returnPage = closeRMDDialog(appReqBlock);
            }
            else if (action.equals(SHOW_ORIGINATING_TRX_DIALOG))
            {
                returnPage = showOriginatingTrxInfo(appReqBlock);
            }
            else if (action.equals(SAVE_SELECTED_CLIENT_FOR_PAYEEOVRD))
            {
                returnPage = saveSelectedClientForPayeeOvrd(appReqBlock);
            }
            else if (action.equals(FIND_PAYEE_CLIENT_BY_TAXID))
            {
                returnPage = findPayeeClientByTaxId(appReqBlock);
            }
            else if (action.equals(FIND_PAYEE_CLIENTS_BY_NAME))
            {
                returnPage = findPayeeClientsByName(appReqBlock);
            }
            else if (action.equals(FIND_PAYEE_CLIENTS_BY_NAMEDOB))
            {
                returnPage = findPayeeClientsByNameDOB(appReqBlock);
            }
            else if (action.equals(SHOW_SUPPLEMENTAL_DIALOG))
            {
                returnPage = showSupplementalDialog(appReqBlock);
			}
            else if (action.equals(CANCEL_FILTER_CRITERIA_DIALOG))
            {
                returnPage = cancelFilterCriteriaDialog(appReqBlock);
            }
             else if (action.equals(SHOW_CONTRACT_HISTORY_FILTER_DIALOG))
            {
                returnPage = showContractHistoryFilterDialog(appReqBlock);
            }
            else if (action.equals(FILTER_CONTRACT_HISTORY))
            {
                returnPage = filterContractHistory(appReqBlock);
            }
            else if (action.equals(SHOW_PROPOSAL_DIALOG))
            {
                returnPage = showProposalDialog(appReqBlock);
            }
            else if (action.equals(PERFORM_PROPOSAL))
            {
                returnPage = performProposal(appReqBlock);
            }
            else if (action.equals(CLEAR_PROPOSAL_DIALOG))
            {
                returnPage = clearProposalDialog(appReqBlock);
            }
            else if (action.equals(CLOSE_PROPOSAL_DIALOG))
            {
                returnPage = closeProposalDialog(appReqBlock);
            }
            else if (action.equals(ENABLE_DEPOSIT_FOR_ADJUSTMENT))
            {
                returnPage = enableDepositForAdjustment(appReqBlock);
            }
            else if (action.equals(SAVE_DEPOSIT_ADJUSTMENT))
            {
                returnPage = saveDepositAdjustment(appReqBlock);
            }
            else if (action.equals(ANALYZE_INFORCE_QUOTE))
            {
                returnPage = analyzeInforceQuote(appReqBlock);
            }
            else if (action.equals(GET_ADDRESS_FOR_TYPE))
            {
                returnPage = getAddressForType(appReqBlock);
            }
            else if (action.equals(CANCEL_FILTER_CRITERIA_DIALOG))
            {
                returnPage = cancelFilterCriteriaDialog(appReqBlock);
            }
             else if (action.equals(SHOW_CONTRACT_HISTORY_FILTER_DIALOG))
            {
                returnPage = showContractHistoryFilterDialog(appReqBlock);
            }
            else if (action.equals(FILTER_CONTRACT_HISTORY))
            {
                returnPage = filterContractHistory(appReqBlock);
            }
            else if (action.equals(SHOW_LOAN_SETTLEMENT_DIALOG))
            {
                returnPage = showLoanSettlementInfo(appReqBlock);
            }
			else if (action.equals(SHOW_AGENT_HIERARCHY_ALLOCATION_DIALOG))
            {
                returnPage = showAgentHierarchyAllocationDialog(appReqBlock);
            }
            else if (action.equals(SHOW_AGENT_HIERARCHY_ALLOCATION_DETAIL))
            {
                returnPage = showAgentHierarchyAllocationDetail(appReqBlock);
			}
            else if (action.equals(SHOW_CONTRACT_BILLING_DIALOG))
            {
                returnPage = showContractBillingDialog(appReqBlock);
            }
            else if (action.equals(SHOW_SCHEDULED_PREMIUM_DIALOG))
            {
                returnPage = showScheduledPremiumDialog(appReqBlock);
            }
            else if (action.equals(SHOW_UNITS_DIALOG))
            {
                returnPage = showUnitsDialog(appReqBlock);
            }
            else if (action.equals(SAVE_BILLING_CHANGE))
            {
                returnPage = saveBillingChange(appReqBlock);
            }
            else if (action.equals(CHANGE_TO_INDIVIDUAL_BILL))
            {
                returnPage = changeToIndividualBill(appReqBlock);
            }
            else if (action.equals(CHANGE_TO_LIST_BILL))
            {
                returnPage = changeToListBill(appReqBlock);
            }
            else if (action.equals(SAVE_CHANGE_TO_INDIVIDUAL_BILL))
            {
                returnPage = saveChangeToIndividualBill(appReqBlock);
            }
             else if (action.equals(SAVE_CHANGE_TO_LIST_BILL))
            {
                returnPage = saveChangeToListBill(appReqBlock);
            }
            else if (action.equals(SHOW_QUESTIONNAIRE_RESPONSE_DIALOG))
            {
                returnPage = showQuestionnaireResponseDialog(appReqBlock);
            }
            else if (action.equals(SHOW_LOAN_FOR_TRAD))
            {
                returnPage = showLoanInfoForTrad(appReqBlock);
            }
            else if (action.equals(SHOW_LOAN_DETAIL_FOR_TRAD))
            {
                returnPage = showLoanDetailForTrad(appReqBlock);
            }
            else if (action.equals(FIND_DEPARTMENT_LOCATIONS))
            {
                returnPage = findDepartmentLocations(appReqBlock);
            }
            else if (action.equals(SHOW_NFO_DBO_CHANGE_DIALOG))
            {
                returnPage = showNFO_DBOChangeDialog(appReqBlock);
            }
            else if (action.equals(SAVE_NFO_DBO_CHANGE_DIALOG))
            {
                returnPage = saveNFO_DBOChangeDialog(appReqBlock);
            }
            else if (action.equals(SHOW_CLASS_GENDER_RATINGS_DIALOG))
            {
                returnPage = showClassGenderRatingsDialog(appReqBlock);
            }
            else if (action.equals(SAVE_CLASS_GENDER_RATINGS_DIALOG))
            {
                returnPage = saveClassGenderRatingsDialog(appReqBlock);
            }
            else if (action.equals(CREATE_TRANSACTION_FROM_QUOTE))
            {
                returnPage = createTransactionFromQuote(appReqBlock);
            }
            else if (action.equals(SHOW_NOT_TAKEN_OVERRIDE_DIALOG))
            {
                returnPage = showNotTakenOverrideDialog(appReqBlock);
            }
            else if (action.equals(SAVE_NOT_TAKEN_OVERRIDE_INDICATOR))
            {
                returnPage = saveNotTakenOverrideIndicator(appReqBlock);
            }
            else if (action.equals(SHOW_FILTER_SUSPENSE_DIALOG))
            {
                returnPage = showFilterSuspenseDialog(appReqBlock);
            }
            else if (action.equals(SHOW_SUSPENSE_TRANSFER_DIALOG))
            {
                returnPage = showSuspenseTransferDialog(appReqBlock);
            }
            else if (action.equals(SUSPENSE_TRANSFER))
            {
                returnPage = suspenseTransfer(appReqBlock);
            }
            else if (action.equals(SUSPENSE_TRANSFER_SAVE_TO_SUMMARY))
            {
                returnPage = suspenseTransferSaveToSummary(appReqBlock);
            }
            else if (action.equals(SUSPENSE_TRANSFER_DELETE))
            {
                returnPage = suspenseTransferDelete(appReqBlock);
            }
            else if (action.equals(SHOW_SUSPENSE_TRANSFER_DETAIL))
            {
                returnPage = showSuspenseTransferDetail(appReqBlock);
            }
            else if (action.equals(CLOSE_SUSPENSE_DIALOG))
            {
                returnPage = closeSuspenseDialog(appReqBlock);
            }
            else if (action.equals(CLOSE_SUSPENSE_TRANSFER_DIALOG))
            {
                returnPage = closeSuspenseTransferDialog(appReqBlock);
            }
            else if (action.equals(SHOW_SUSPENSE_HISTORY_DIALOG))
			{
                returnPage = showSuspenseHistoryDialog(appReqBlock);
			}
            else if (action.equals(SHOW_PREFERENCES))
            {
                returnPage = showPreferences(appReqBlock);
            }
            else if (action.equalsIgnoreCase(SHOW_SELECTED_PREFERENCE))
            {
                return showSelectedPreference(appReqBlock);
            }
            else if (action.equalsIgnoreCase(CLEAR_PREFERENCE_FOR_ADD))
            {
                return clearPreferenceForAdd(appReqBlock);
            }
            else if (action.equalsIgnoreCase(SHOW_CONTRACT_AGENT_INFO))
            {
                return showContractAgentInfo(appReqBlock);
            }
            else if (action.equalsIgnoreCase(SAVE_PREFERENCE))
            {
                return savePreference(appReqBlock);
            }
            else if (action.equalsIgnoreCase(SELECT_PREFERENCE_FOR_CLIENT))
            {
                return selectPreferenceForClient(appReqBlock);
            }
            else if (action.equals(SHOW_PREMIUM_DUE_HISTORY_DIALOG))
            {
                returnPage = showPremiumDueHistoryDialog(appReqBlock);
            }
            else if (action.equals(SHOW_FINANCIAL_HISTORY_DIALOG))
            {
                returnPage = showFinancialHistoryDialog(appReqBlock);
            }
            else if (action.equals(SHOW_ENROLLMENTLEADSERVICEAGENT_INFO))
            {
                returnPage = showEnrollmentLeadServiceAgentInfo(appReqBlock);
            }
            else if (action.equals(SHOW_BILLING_CHANGE_DIALOG))
            {
                returnPage = showBillingChangeDialog(appReqBlock);
            }
            else if (action.equals(SAVE_BILLING_CHANGE_DIALOG))
            {
                returnPage = saveBillingChangeDialog(appReqBlock);
            }
            else if (action.equals(SHOW_CONTRACT_BILLS_HISTORY_DIALOG))
            {
                returnPage = showContractBillHistoryDialog(appReqBlock);
            }
            else if (action.equals(SHOW_PUA_DIALOG))
            {
                returnPage = showPUADialog(appReqBlock);
            }
            else if (action.equals(SHOW_VALUE_AT_ISSUE_DIALOG))
            {
                returnPage = showValueAtIssueDialog(appReqBlock);
            }
            else if (action.equals(SHOW_RIDER_COVERAGE_SELECTION_DIALOG))
            {
                returnPage = showRiderCoverageSelectionDialog(appReqBlock);
            }
            else if (action.equals(SAVE_RIDER_COVERAGE))
            {
                returnPage = saveRiderCoverageSelection(appReqBlock);
            }
            else if (action.equals(SHOW_COMMISSION_PHASE_HISTORY))
            {
                returnPage = showCommissionPhaseHistoryDialog(appReqBlock);
            }
            else if (action.equals(SHOW_QUICK_PAY_DIALOG))
            {
                returnPage = showQuickPayDialog(appReqBlock);
            }
            else
            {
                throw new Exception("ContractDetailTran: Invalid action " + action);
            }

            SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");

            String previousPage = stateBean.getValue("currentPage");

            stateBean.putValue("previousPage", previousPage);
            stateBean.putValue("currentPage", returnPage);
        }
        catch (Exception e)
        {
            System.out.println(e);

            e.printStackTrace();

            throw e;
        }

        postProcessRequest(appReqBlock);

        return returnPage;
    }


    private String checkIfNewAgentHierarchyNeeded(AppReqBlock appReqBlock) {
		return CONTRACT_CHECK_IF_NEW_AGENT_HIERARCHY_NEEDED_DIALOG;
	}

	/**
     * Shows the EnrollmentLeadServiceAgent info for the specified Segment via
     * EnrollmentLeadServiceAgent.Enrollment.BatchContractSetup.Segment.
     */    
    private String showEnrollmentLeadServiceAgentInfo(AppReqBlock appReqBlock) 
    {
//        EnrollmentLeadServiceAgentTableModel enrollmentLeadServiceAgentTableModel = new EnrollmentLeadServiceAgentTableModel(appReqBlock);
        
        new EnrollmentLeadServiceAgentTableModel(appReqBlock);

        appReqBlock.putInRequestScope("main", ENROLLMENT_LEAD_SERVICE_AGENT_DIALOG);

        appReqBlock.putInRequestScope("pageTitle", "Lead/Servicing Agent Info");

        return TEMPLATE_DIALOG;                                  
    }

    private String filterContractHistory(AppReqBlock appReqBlock)
    {
        new ContractHistorySummaryTableModel(appReqBlock);

        return CONTRACT_HISTORY;
    }

    private String showContractHistoryFilterDialog(AppReqBlock appReqBlock)
    {
        return CONTRACT_HISTORY_FILTER_DIALOG;
    }

    protected String showCorrespondenceDialog(AppReqBlock appReqBlock) throws Exception
    {
        saveTrxMainValues(appReqBlock);

        String editTrxPK = Util.initString(appReqBlock.getReqParm("editTrxPK"), null);

        EDITTrxCorrespondenceVO[] editTrxCorrespondenceVOs = null;

        if (editTrxPK != null)
        {
            Event event = new EventComponent();

            List voInclusionList = new ArrayList();
            voInclusionList.add(TransactionCorrespondenceVO.class);

            editTrxCorrespondenceVOs = event.composeEDITTrxCorrespondenceVOByEDITTrxPK(Long.parseLong(editTrxPK), voInclusionList);

            appReqBlock.getHttpServletRequest().setAttribute("editTrxCorrespondenceVOs", editTrxCorrespondenceVOs);
        }

        return CORRESPONDENCE_DIALOG;
    }

    protected String showHistoryCorrespondenceDialog(AppReqBlock appReqBlock) throws Exception
    {
        String editTrxPK = Util.initString(appReqBlock.getReqParm("editTrxPK"), null);

        EDITTrxCorrespondenceVO[] editTrxCorrespondenceVOs = null;

        if (editTrxPK != null)
        {
            Event event = new EventComponent();

            List voInclusionList = new ArrayList();
            voInclusionList.add(TransactionCorrespondenceVO.class);

            editTrxCorrespondenceVOs = event.composeEDITTrxCorrespondenceVOByEDITTrxPK(Long.parseLong(editTrxPK), voInclusionList);

            appReqBlock.getHttpServletRequest().setAttribute("editTrxCorrespondenceVOs", editTrxCorrespondenceVOs);
            appReqBlock.getHttpServletRequest().setAttribute("editTrxPK", editTrxPK);
        }

        return HISTORY_CORRESPONDENCE_DIALOG;
    }

    protected String createNewEDITTrxCorrespondence(AppReqBlock appReqBlock) throws Exception
    {
        String editTrxPK = appReqBlock.getReqParm("editTrxPK");
        String trxCorrFK = appReqBlock.getReqParm("corrType");

        if (!editTrxPK.equals(""))
        {
            EDITTrxCorrespondenceVO editTrxCorrespondenceVO = new EDITTrxCorrespondenceVO();
            editTrxCorrespondenceVO.setEDITTrxCorrespondencePK(0);
            editTrxCorrespondenceVO.setEDITTrxFK(Long.parseLong(editTrxPK));
            editTrxCorrespondenceVO.setTransactionCorrespondenceFK(Long.parseLong(trxCorrFK));
            editTrxCorrespondenceVO.setStatus("P");
            editTrxCorrespondenceVO.setCorrespondenceDate(new EDITDate().getFormattedDate());

//            TransactionCorrespondence transactionCorrespondence = TransactionCorrespondence.findBy_PK(new Long(trxCorrFK));

            Event event = new EventComponent();

            event.createOrUpdateVO(editTrxCorrespondenceVO, false);

            List voInclusionList = new ArrayList();
            voInclusionList.add(TransactionCorrespondenceVO.class);

            EDITTrxCorrespondenceVO[] editTrxCorrespondenceVOs = event.composeEDITTrxCorrespondenceVOByEDITTrxPK(Long.parseLong(editTrxPK), voInclusionList);

            appReqBlock.getHttpServletRequest().setAttribute("editTrxCorrespondenceVOs", editTrxCorrespondenceVOs);
            appReqBlock.getHttpServletRequest().setAttribute("editTrxPK", editTrxPK);
        }

        return HISTORY_CORRESPONDENCE_DIALOG;
    }

    private String showContractRequirements(AppReqBlock appReqBlock) throws Exception
    {
        //Check for authorization
        new InforceUseCaseComponent().accessRequirements();

        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

        // clear top part of page
        appReqBlock.getHttpSession().removeAttribute("selectedContractRequirementVO");

        ContractRequirementVO[] contractRequirementVO = getRequirements(appReqBlock);

        if (contractRequirementVO != null)
        {
            appReqBlock.getHttpSession().setAttribute("contractRequirementVO", contractRequirementVO);
        }

        return CONTRACT_REQUIREMENTS;
    }

    private String showRequirementDetail(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
//        String filteredRequirementPK = formBean.getValue("selectedFilteredRequirementPK");
        String contractRequirementPK = formBean.getValue("selectedContractRequirementPK");
        ContractRequirementVO[] contractRequirementVOs = (ContractRequirementVO[]) appReqBlock.getHttpSession().getAttribute("contractRequirementVO");
        ContractRequirementVO contractRequirementVO = null;

        for (int i = 0; i < contractRequirementVOs.length; i++)
        {
            if (contractRequirementPK.equals(contractRequirementVOs[i].getContractRequirementPK() + ""))
            {
                contractRequirementVO = contractRequirementVOs[i];
            }
        }

        appReqBlock.getHttpSession().setAttribute("selectedContractRequirementVO", contractRequirementVO);

        return CONTRACT_REQUIREMENTS;
    }

    private String saveRequirementToSummary(AppReqBlock appReqBlock) throws Exception
    {
        //Check for authorization
        new InforceUseCaseComponent().updateRequirements();

        PageBean formBean = appReqBlock.getFormBean();
//        String filteredRequirementPK = appReqBlock.getReqParm("selectedFilteredRequirementPK");
        ContractRequirementVO singleContractRequirementVO = (ContractRequirementVO)appReqBlock.getHttpSession().getAttribute("selectedContractRequirementVO");

        ContractRequirementVO[] contractRequirementVO = (ContractRequirementVO[]) appReqBlock.getHttpSession().getAttribute("contractRequirementVO");

        String effectiveDate = Util.initString(formBean.getValue("effectiveDate"), null);
        String status = formBean.getValue("status");
        CodeTableVO codeTableVO = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(status));

        String receivedDate = Util.initString(formBean.getValue("receivedDate"), null);
        String executedDate = Util.initString(formBean.getValue("executedDate"), null);
        String requirementInformation = Util.initString(formBean.getValue("requirementInfo"), null);

        singleContractRequirementVO.setEffectiveDate(effectiveDate);
        singleContractRequirementVO.setRequirementStatusCT(codeTableVO.getCode());
        singleContractRequirementVO.setReceivedDate(receivedDate);
        singleContractRequirementVO.setExecutedDate(executedDate);
        singleContractRequirementVO.setRequirementInformation(requirementInformation);

        for (int i = 0; i < contractRequirementVO.length; i++)
        {
            if (singleContractRequirementVO.getContractRequirementPK() == contractRequirementVO[i].getContractRequirementPK())
            {
                contractRequirementVO[i] = singleContractRequirementVO;
                break;
            }
        }

        appReqBlock.getHttpSession().setAttribute("contractRequirementVO", contractRequirementVO);

        return CONTRACT_REQUIREMENTS;
    }

    protected String cancelRequirement(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("selectedContractRequirementVO");

        return CONTRACT_REQUIREMENTS;
    }

    private String deleteSelectedRequirement(AppReqBlock appReqBlock) throws Exception
    {
        new InforceUseCaseComponent().deleteRequirements();

        PageBean formBean = appReqBlock.getFormBean();
//        String filteredRequirementPK = formBean.getValue("selectedFilteredRequirementPK");
        String contractRequirementPK = formBean.getValue("selectedContractRequirementPK");
        ContractRequirementVO[] contractRequirementVOs = (ContractRequirementVO[]) appReqBlock.getHttpSession().getAttribute("contractRequirementVO");

        for (int i = 0; i < contractRequirementVOs.length; i++)
        {
            if (contractRequirementPK.equals(contractRequirementVOs[i].getContractRequirementPK() + ""))
            {
                contractRequirementVOs[i].setRequirementStatusCT("Deleted");
                break;
            }
        }

        appReqBlock.getHttpSession().removeAttribute("selectedContractRequirementVO");
        appReqBlock.getHttpSession().setAttribute("contractRequirementVO", contractRequirementVOs);
        return CONTRACT_REQUIREMENTS;
    }

    private String showManualRequirementSelectionDialog(AppReqBlock appReqBlock) throws Exception
    {
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();
        String productStructurePK = appReqBlock.getSessionBean("contractMainSessionBean").getValue("companyStructureId");

        RequirementVO[] requirementVOs = contractLookup.findRequirementByProductStructurePKAndManualInd(Long.parseLong(productStructurePK), "Y", false, null);

        if (requirementVOs != null)
        {
            appReqBlock.getHttpSession().setAttribute("manualRequirementVOs", requirementVOs);
        }

        return MANUAL_REQUIREMENT_SELECTION_DIALOG;
    }

    private String showManualRequirementDescription(AppReqBlock appReqBlock) throws Exception
    {
        String selectedRequirementPK = appReqBlock.getFormBean().getValue("requirementPK");
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();
        RequirementVO requirementVO = contractLookup.composeRequirementVOByPK(Long.parseLong(selectedRequirementPK), new ArrayList());

        if (requirementVO != null)
        {
            if (!requirementVO.getAllowableStatusCT().equalsIgnoreCase("PostActive"))
            {
                appReqBlock.getHttpServletRequest().setAttribute("requirementMessage", "Only Post Active Requirements Can Be Added");
            }
            else
            {
                appReqBlock.getHttpServletRequest().setAttribute("selectedRequirementPK", selectedRequirementPK);
            }
        }

        return MANUAL_REQUIREMENT_SELECTION_DIALOG;
    }

    private String saveManualRequirement(AppReqBlock appReqBlock) throws Exception
    {
        String selectedRequirementPK = appReqBlock.getFormBean().getValue("selectedRequirementPK");
        String description = appReqBlock.getFormBean().getValue("description");
        String requirementInfo = appReqBlock.getFormBean().getValue("requirementInfo");
        String productStructurePK = appReqBlock.getSessionBean("contractMainSessionBean").getValue("companyStructureId");

        contract.business.Lookup contractLookup = new contract.component.LookupComponent();
        RequirementVO[] requirementVOs = (RequirementVO[]) appReqBlock.getHttpSession().getAttribute("manualRequirementVOs");

        ContractRequirementVO[] contractRequirementVOs =
                (ContractRequirementVO[]) appReqBlock.getHttpSession().getAttribute("contractRequirementVO");

        int followupDays = 0;
        String requirementId = null;

        contract.business.Contract contractComponent = new contract.component.ContractComponent();

        for (int r = 0; r < requirementVOs.length; r++)
        {
            if ((requirementVOs[r].getRequirementPK() + "").equals(selectedRequirementPK))
            {
                followupDays = requirementVOs[r].getFollowupDays();
                requirementId = requirementVOs[r].getRequirementId();

                break;
            }
        }

        FilteredRequirementVO[] filteredRequirementVO = contractLookup.findFilteredRequirementByProductStructureAndRequirement(Long.parseLong(productStructurePK), Long.parseLong(selectedRequirementPK), false, null);

        ContractRequirementVO contractRequirementVO = new ContractRequirementVO();
        contractRequirementVO.setContractRequirementPK(0);
        contractRequirementVO.setFilteredRequirementFK(filteredRequirementVO[0].getFilteredRequirementPK());
        contractRequirementVO.setContractRequirementPK(contractComponent.getNextAvailableKey() * -1);
        contractRequirementVO.setRequirementInformation(Util.initString(requirementInfo, null));

        if ((contractRequirementVOs != null) && (contractRequirementVOs.length > 0))
        {
            contractRequirementVO.setSegmentFK(contractRequirementVOs[0].getSegmentFK());
        }
        else
        {
            String segmentPK = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("segmentPK");
            contractRequirementVO.setSegmentFK(Long.parseLong(segmentPK));
        }

        contractRequirementVO.setRequirementStatusCT("Outstanding");

        EDITDate effectiveDate = new EDITDate();
        contractRequirementVO.setEffectiveDate(effectiveDate.getFormattedDate());

        EDITDate followupDate = effectiveDate.addDays(followupDays);
        contractRequirementVO.setFollowupDate(followupDate.getFormattedDate());

        //  If the requirementId of the selected Requirement is Requirement.REQUIREMENT_ID_TEXT, the user was allowed
        //  to set it on the page.  It gets stored in the FreeFormDescription of the ContractRequirement
        if (requirementId != null)
        {
            if (requirementId.equals(Requirement.REQUIREMENT_ID_TEXT))
            {
                contractRequirementVO.setFreeFormDescription(description);
            }
        }

        List voInclusionList = new ArrayList();

        voInclusionList.add(FilteredRequirementVO.class);
        voInclusionList.add(RequirementVO.class);

        contractRequirementVO = contractLookup.composeContractRequirementVO(contractRequirementVO, voInclusionList);

        List contractRequirements = new ArrayList();

        if (contractRequirementVOs != null)
        {
            for (int c = 0; c < contractRequirementVOs.length; c++)
            {
                contractRequirements.add(contractRequirementVOs[c]);
            }
        }

        contractRequirements.add(contractRequirementVO);

        ContractRequirementVO[] updatedContractRequirementVOs = (ContractRequirementVO[]) contractRequirements.toArray(new ContractRequirementVO[contractRequirements.size()]);
        appReqBlock.getHttpSession().setAttribute("contractRequirementVO", updatedContractRequirementVOs);

        return CONTRACT_REQUIREMENTS;
    }

    private ContractRequirementVO[] getRequirements(AppReqBlock appReqBlock) throws Exception
    {
        PageBean contractMainFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        PageBean formBean = appReqBlock.getFormBean();

        String segmentPK = contractMainFormBean.getValue("segmentPK");

        if (segmentPK.equals(""))
        {
            segmentPK = formBean.getValue("segmentPK");
        }

        String productStructurePK = contractMainFormBean.getValue("companyStructureId");

        if (productStructurePK.equals(""))
        {
            productStructurePK = formBean.getValue("companyStructureId");
        }

        ContractRequirementVO[] contractRequirementVO = null;

        if (!productStructurePK.equals("") && (!productStructurePK.equalsIgnoreCase("Please Select")))
        {
            contract.business.Lookup contractLookup = new contract.component.LookupComponent();

            contractRequirementVO = (ContractRequirementVO[]) appReqBlock.getHttpSession().getAttribute("contractRequirementVO");

            if (contractRequirementVO == null)
            {
                if (segmentPK.equals(""))
                {
                    contractRequirementVO = contractLookup.buildContractRequirements(Long.parseLong(productStructurePK));
                }
            }
            else
            {
                List voInclusionList = new ArrayList();

                voInclusionList.add(FilteredRequirementVO.class);
                voInclusionList.add(RequirementVO.class);

                for (int i = 0; i < contractRequirementVO.length; i++)
                {
                    contractRequirementVO[i] = contractLookup.composeContractRequirementVO(contractRequirementVO[i], voInclusionList);
                }
            }
        }

        return contractRequirementVO;
    }

    protected String showJumpToDialog(AppReqBlock appReqBlock) throws Exception
    {
        String jumpToTarget = appReqBlock.getReqParm("jumpToTarget");
        appReqBlock.getHttpServletRequest().setAttribute("jumpToTarget", jumpToTarget);

        return JUMP_TO_DIALOG;
    }

    protected void preProcessRequest(AppReqBlock appReqBlock) throws Exception
    {
    }

    protected void postProcessRequest(AppReqBlock appReqBlock) throws Exception
    {
    }

    protected String showCancelContractConfirmationDialog(AppReqBlock appReqBlock) throws Exception
    {
        return CANCEL_CONTRACT_CONFIRMATION_DIALOG;
    }

    protected String addNewContract(AppReqBlock appReqBlock) throws Exception
    {
        clearAllContractSessions(appReqBlock);

        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");

        stateBean.putValue("prevPage", CONTRACT_MAIN);
        stateBean.putValue("currPage", CONTRACT_MAIN);

//        String operator = appReqBlock.getUserSession().getUsername();

        PageBean baseRiderBean = appReqBlock.getSessionBean("contractBase").getPageBean("contractBase");
        String segmentPKAsStr = baseRiderBean.getValue("segmentPK");

        long segmentPK = (Util.isANumber(segmentPKAsStr)) ? Long.parseLong(segmentPKAsStr) : 0;

        UserSession userSession = appReqBlock.getUserSession();

        userSession.lockSegment(segmentPK);

        return CONTRACT_MAIN;
    }


    /**
     * Adds a new life rider to the contract (Add button on contractLifeMain or contractTradMain)
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String addLifeRider(AppReqBlock appReqBlock) throws Exception
    {
        PageBean baseFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        String insuredRelationToEmp = Util.initString(appReqBlock.getSessionBean("contractMainSessionBean").getValue("insuredRelationToEmp"), null);

        String riderCoveragePK = Util.initString(appReqBlock.getReqParm("selectedCoverage"), "");
        CodeTableVO codeTableVO = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(riderCoveragePK));
        String optionCodeDesc   = codeTableVO.getCodeDesc();
        String optionCode       = codeTableVO.getCode();

        //Check the option code for display of increaseOption
        String batchContractSetupFK = Util.initString(baseFormBean.getValue("batchContractSetupFK"), "0");
        String increaseOptionStatus = getCaseProductUnderwriting(appReqBlock, batchContractSetupFK, optionCode, insuredRelationToEmp);

        baseFormBean.putValue("increaseOptionStatus", increaseOptionStatus);
        baseFormBean.putValue("selectedCoveragePK", riderCoveragePK);
        baseFormBean.putValue("riderOption", optionCodeDesc);
        baseFormBean.putValue("pageMode", "detail");

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("riderFormBean", new PageBean());

        FormBean formBean = appReqBlock.getFormBean();

        // If we are adding a new rider, then there isn't a key yet.
        appReqBlock.putInRequestScope("riderBeanKey", "");

        String sequenceNumber = formBean.getValue("riderNumber");

        SessionBean contractRiders = appReqBlock.getSessionBean("contractRiders");

        int totalPageBeans = contractRiders.getPageBeans().size();

        int sequenceNumberAsInt = 0;

        if (Util.isANumber(sequenceNumber))
        {
            sequenceNumberAsInt = Integer.parseInt(sequenceNumber);
        }

        if (totalPageBeans > sequenceNumberAsInt)
        {
            sequenceNumberAsInt = totalPageBeans;
        }

        sequenceNumberAsInt += 1;

        appReqBlock.getHttpServletRequest().setAttribute("riderNumber", sequenceNumberAsInt + "");
        appReqBlock.getHttpServletRequest().setAttribute("pageFunction", "add");

        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        PageBean contractFormBean = contractMainSessionBean.getPageBean("formBean");
        String optionId = contractFormBean.getValue("optionId");

        String productType = checkProductType(optionId);
        String riderReturnPage = getLifeRiderReturnPage(productType);

        return riderReturnPage;
    }

    /**
     * Saves a rider from the life main rider page to the contractRiders bean (gets called when user hits "Save" on
     * page
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String saveLifeRider(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        PageBean formBean = appReqBlock.getFormBean();

        String operator = appReqBlock.getUserSession().getUsername();

        String effectiveDate = formBean.getValue("effectiveDate");
        String issueDate = formBean.getValue("issueDate");
        String claimStopDate = formBean.getValue("claimStopDate");
        String faceAmount = formBean.getValue("faceAmount");
        String segmentAmount = formBean.getValue("segmentAmount");
        String optionCodePK = formBean.getValue("optionCodePK");
        String riderSegmentPK = formBean.getValue("riderSegmentPK");
        String riderLifePK = formBean.getValue("riderLifePK");
        String units = formBean.getValue("units");
        String unitsChangeEffectiveDate = Util.initString(formBean.getValue("unitsChangeEffectiveDate"), DateTimeUtil.formatEDITDateAsMMDDYYYY(new EDITDate()));
        String commissionPhaseID = formBean.getValue("commissionPhaseID");
        String commissionPhaseOverride = formBean.getValue("commissionPhaseOverride");
        String authorizedSignatureCT = formBean.getValue("authorizedSignatureCT");
        String creationOperator = Util.initString(formBean.getValue("creationOperator"), operator);
        String creationDate = Util.initString(formBean.getValue("creationDate"), DateTimeUtil.formatEDITDateAsMMDDYYYY(new EDITDate()));
        if (Util.isANumber(authorizedSignatureCT))
        {
            authorizedSignatureCT = codeTableWrapper.getCodeTableEntry(Long.parseLong(authorizedSignatureCT)).getCode();
        }
        else
        {
            authorizedSignatureCT = "";
        }

        String terminationDate = Util.initString(formBean.getValue("terminateDate"), null);
        if (terminationDate == null)
        {
            terminationDate = EDITDate.DEFAULT_MAX_DATE;
            terminationDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(terminationDate);
        }

        String coverage = null;

        if (Util.isANumber(optionCodePK))
        {
            coverage = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionCodePK)).getCode();
        }

        String startNew7PayIndicatorStatus = formBean.getValue("startNew7PayIndicatorStatus");

        PageBean baseRiderBean = appReqBlock.getSessionBean("contractBase").getPageBean("contractBase");
        String segmentPKAsStr = baseRiderBean.getValue("segmentPK");

        Segment segment = Segment.findByPK(new Long(segmentPKAsStr));
        String segmentNamePK = CodeTableWrapper.getSingleton().getCodeTablePKByCodeTableNameAndCode("SEGMENTNAME", segment.getSegmentNameCT()) + "";

        String sequenceNumber = Util.initString(formBean.getValue("riderNumber"), "0");
        String riderBeanKey = sequenceNumber + "_" + coverage;

        SessionBean contractRiders = appReqBlock.getSessionBean("contractRiders");
        Map existingRider = null;

        boolean riderFound = false;
        PageBean riderFormBean = null;

        if (contractRiders.hasPageBeans())
        {
            existingRider = contractRiders.getPageBeans();

            Set keyValues = existingRider.keySet();
            Iterator it = keyValues.iterator();

            while (it.hasNext())
            {
                if (riderBeanKey.equals(it.next()))
                {
                    riderFormBean = contractRiders.getPageBean(riderBeanKey);
                    riderFound = true;

                    break;
                }
            }
        }

        if (!riderFound)
        {
            riderFormBean = new PageBean();
        }

        riderFormBean.putValue("riderBeanKey", riderBeanKey);
        riderFormBean.putValue("segmentNamePK", segmentNamePK);
        riderFormBean.putValue("effectiveDate", effectiveDate);
        riderFormBean.putValue("issueDate", issueDate);
        riderFormBean.putValue("faceAmount", faceAmount);
        riderFormBean.putValue("segmentAmount", segmentAmount);
        riderFormBean.putValue("optionCodePK", optionCodePK);
        riderFormBean.putValue("coverage", coverage);
        riderFormBean.putValue("startNew7PayIndicatorStatus", startNew7PayIndicatorStatus);
        riderFormBean.putValue("riderNumber", sequenceNumber);
        riderFormBean.putValue("terminateDate", terminationDate);
        riderFormBean.putValue("riderStatus", Util.initString(formBean.getValue("riderStatus"), "Pending"));
        riderFormBean.putValue("riderSegmentPK", riderSegmentPK);
        riderFormBean.putValue("lifePK", riderLifePK);
        riderFormBean.putValue("units", units);
        riderFormBean.putValue("unitsChangeEffectiveDate", unitsChangeEffectiveDate);
        riderFormBean.putValue("commissionPhaseID", commissionPhaseID);
        riderFormBean.putValue("commissionPhaseOverride", commissionPhaseOverride);
        riderFormBean.putValue("authorizedSignatureCT", authorizedSignatureCT);
        riderFormBean.putValue("creationOperator", creationOperator);
        riderFormBean.putValue("creationDate", creationDate);
        riderFormBean.putValue("annualPremium", formBean.getValue("annualPremium"));
        riderFormBean.putValue("exchangeInd", formBean.getValue("exchangeInd"));
        riderFormBean.putValue("quoteDate", formBean.getValue("quoteDate"));
        riderFormBean.putValue("ageAtIssue", formBean.getValue("ageAtIssue"));
        riderFormBean.putValue("originalStateCT", formBean.getValue("originalStateCT"));
        riderFormBean.putValue("ratedGenderCT", Util.initString(formBean.getValue("ratedGenderCT"), null));
        riderFormBean.putValue("underwritingClass", Util.initString(formBean.getValue("underwritingClass"), null));
        riderFormBean.putValue("groupPlan", Util.initString(formBean.getValue("groupPlan"), null));
        riderFormBean.putValue("postIssueStatus", formBean.getValue("postIssueStatus"));
        riderFormBean.putValue("issueStateORInd", formBean.getValue("issueStateORInd"));
        riderFormBean.putValue("dateInEffectDate", formBean.getValue("dateInEffectDate"));
        riderFormBean.putValue("appSignedDate", formBean.getValue("appSignedDate"));
        riderFormBean.putValue("appReceivedDate", formBean.getValue("appReceivedDate"));
        riderFormBean.putValue("multiple", formBean.getValue("multiple"));
        riderFormBean.putValue("gioOption", Util.initString(formBean.getValue("gioOption"), ""));
        riderFormBean.putValue("insuredName", formBean.getValue("insuredName"));
        riderFormBean.putValue("waiveFreeLookInd", "N");

        String currentClaimStopDate = Util.initString(riderFormBean.getValue("claimStopDate"), "");
        if (!currentClaimStopDate.equalsIgnoreCase(Util.initString(claimStopDate, ""))) {
        	appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").putValue("isClaimStopTrx", "true");
        }
        
        riderFormBean.putValue("claimStopDate", claimStopDate);

        contractRiders.putPageBean(riderBeanKey, riderFormBean);

        appReqBlock.getHttpServletRequest().setAttribute("sequenceNumber", sequenceNumber);
        appReqBlock.getHttpServletRequest().setAttribute("riderBeanKey", riderBeanKey);
        appReqBlock.getHttpServletRequest().setAttribute("unitsChangeEffectiveDate", unitsChangeEffectiveDate);
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");

        PageBean contractFormBean = contractMainSessionBean.getPageBean("formBean");
        contractMainSessionBean.putValue("newRiderBeanKey", riderBeanKey);
        contractMainSessionBean.putValue("newRiderSequenceNumber", sequenceNumber);
        contractMainSessionBean.putValue("newRiderCoverage", coverage);
        contractMainSessionBean.putValue("newRiderEffectiveDate", effectiveDate);
        contractMainSessionBean.putValue("unitsChangeEffectiveDate", unitsChangeEffectiveDate);

        String optionId = contractFormBean.getValue("optionId");
        
        String companyStructureId = contractMainSessionBean.getValue("companyStructureId");

        CodeTableVO[] codeTableVOs = codeTableWrapper.getCodeTableEntries("HIERARCHYOPTION", Long.parseLong(companyStructureId));

        if (codeTableVOs != null && codeTableVOs.length > 0) {
	        for (CodeTableVO codeTableVO : codeTableVOs) {
	        	String code = codeTableVO.getCode();
	        	if (optionId.equalsIgnoreCase(code)) {
	        		return CONTRACT_CHECK_IF_NEW_AGENT_HIERARCHY_NEEDED_DIALOG;
	        	} 
	        }
        }
        
        return CONTRACT_NUMBER_DIALOG;
    }

    protected String deleteLifeRider(AppReqBlock appReqBlock)
    {
//        String optionCodePK = appReqBlock.getFormBean().getValue("optionCodePK");

//        String optionCode = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(optionCodePK)).getCode();
    
        FormBean formBean = appReqBlock.getFormBean();

        String selectedRiderBeanKey = formBean.getValue("riderBeanKey");

        SessionBean contractRiders = appReqBlock.getSessionBean("contractRiders");

        SessionBean deletedRiders = appReqBlock.getSessionBean("contractDeletedRiders");

        if (deletedRiders == null)
        {
            deletedRiders = new SessionBean();
            appReqBlock.addSessionBean("contractDeletedRiders", deletedRiders);
        }
        
        PageBean riderPageBean = contractRiders.getPageBean(selectedRiderBeanKey);

        contractRiders.removePageBean(selectedRiderBeanKey);
        deletedRiders.putPageBean(selectedRiderBeanKey, riderPageBean);

        String sequenceNumber = formBean.getValue("riderNumber");

        appReqBlock.getHttpServletRequest().setAttribute("riderNumber", sequenceNumber);

        String returnPage = null;
        if (formBean.getValue("optionId").equals(TRADITIONAL))
        {
            returnPage = CONTRACT_TRAD_MAIN;
        }
        else if (formBean.getValue("optionId").equals(UNIVERSAL_LIFE))
        {
        	returnPage = CONTRACT_UNIVERSAL_LIFE_MAIN;
        }
        else if (Segment.OPTIONCODES_AH.contains(formBean.getValue("optionId").toUpperCase())) 
        {
        	returnPage = CONTRACT_AH_MAIN;
        }
        else
        {
            returnPage = CONTRACT_LIFE_MAIN;
        }

        return returnPage;
    }

    protected String showLifeRiderDetailSummary(AppReqBlock appReqBlock)
    {
        // identify whether selected rider is base or not
        // if selected rider is base show contractLifeMain.jsp
        // else show contractLifeMainrider.jsp

        FormBean formBean = appReqBlock.getFormBean();
        SessionBean riders = appReqBlock.getSessionBean("contractRiders");
        String riderBeanKey = formBean.getValue("riderBeanKey");
        String sequenceNumber = formBean.getValue("riderNumber");

        String riderSegmentPK = formBean.getValue("riderSegmentPK");


        String returnPage = null;

        if (riderBeanKey.equalsIgnoreCase("base"))
        {
            if (formBean.getValue("optionId").equals("Traditional"))
            {
                returnPage = CONTRACT_TRAD_MAIN;
            }
            else if (formBean.getValue("optionId").equals("UL"))
            {
            	returnPage = CONTRACT_UNIVERSAL_LIFE_MAIN;
            }
            else if (Segment.OPTIONCODES_AH.contains(formBean.getValue("optionId").toUpperCase())) 
            {
            	returnPage = CONTRACT_AH_MAIN;
            }
            else
            {
            	returnPage = CONTRACT_LIFE_MAIN;
            }
        }
        else
        {
            SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
            PageBean contractFormBean = contractMainSessionBean.getPageBean("formBean");

            PageBean riderBean = riders.getPageBean(riderBeanKey);
            String optionCodePK =  riderBean.getValue("optionCodePK");
            String optionDesc = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(optionCodePK)).getCodeDesc();
            String codeValue = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(optionCodePK)).getCode();
            
            contractFormBean.putValue("riderOption", optionDesc);
            contractFormBean.putValue("selectedCoveragePK", optionCodePK);
            String optionId = contractFormBean.getValue("optionId");

            String batchContractSetupFK = Util.initString(contractFormBean.getValue("batchContractSetupFK"), "0");
            String insuredRelationToEmp = Util.initString(appReqBlock.getSessionBean("contractMainSessionBean").getValue("insuredRelationToEmp"), null);
            String increaseOptionStatus = getCaseProductUnderwriting(appReqBlock, batchContractSetupFK, codeValue, insuredRelationToEmp);

            contractFormBean.putValue("increaseOptionStatus", increaseOptionStatus);

            String productType = checkProductType(optionId);
            String riderReturnPage = getLifeRiderReturnPage(productType);

            returnPage = riderReturnPage;
        }

        appReqBlock.getHttpServletRequest().setAttribute("riderBeanKey", riderBeanKey);

        appReqBlock.getHttpServletRequest().setAttribute("riderNumber", sequenceNumber);
        appReqBlock.getHttpServletRequest().setAttribute("riderSegmentPK", riderSegmentPK);

        return returnPage;
    }

    private String getLifeRiderReturnPage(String productType)
    {
        String riderReturnPage = null;
    
        if (productType.equalsIgnoreCase(TRADITIONAL) || productType.equalsIgnoreCase(AH))
        {
            riderReturnPage = CONTRACT_TRAD_LIFE_RIDER;
        }
        else if (productType.equalsIgnoreCase(UNIVERSAL_LIFE))
        {
            riderReturnPage = CONTRACT_UNIVERSAL_LIFE_RIDER;
        }
        else if (productType.equalsIgnoreCase(NON_TRAD_LIFE))
        {
            riderReturnPage = CONTRACT_NON_TRAD_LIFE_RIDER;
        }
        
        return riderReturnPage;
    }

    private String showValueAtIssueDialog(AppReqBlock appReqBlock)
    {
        FormBean formBean = appReqBlock.getFormBean();

        String riderSegmentPK = Util.initString(formBean.getValue("riderSegmentPK"), "0");

        ValueAtIssue[] valueAtIssues = null;
        if (!riderSegmentPK.equals("0"))
        {
            valueAtIssues = ValueAtIssue.findBySegmentFK(new Long(riderSegmentPK));
        }

        appReqBlock.getHttpServletRequest().setAttribute("valueAtIssues", valueAtIssues);

        return VALUE_AT_ISSUE_DIALOG;
    }



    /**
     * Returns the RMD Dialog page for display
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    protected String showRMDDialog(AppReqBlock appReqBlock) throws Exception
    {
        return RMD_DIALOG;
    }

    /**
     * Saves any RMD Dialog changes to the RMD VO and returns the proper main page
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    protected String saveRMDDialog(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

//        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
//        PageBean formBean = contractMainSessionBean.getPageBean("formBean");
//        String optionId = formBean.getValue("optionId");

        RequiredMinDistributionVO rmdVO = (RequiredMinDistributionVO) appReqBlock.getHttpSession().getAttribute("rmdVO");

        if (rmdVO == null)
        {
            rmdVO = new RequiredMinDistributionVO();
        }

        String rmdElection = appReqBlock.getReqParm("rmdElection");

        if (Util.isANumber(rmdElection))
        {
            rmdVO.setElectionCT(codeTableWrapper.getCodeTableEntry(Long.parseLong(rmdElection)).getCode());
        }

        String lifeExpectancyMultiple = appReqBlock.getReqParm("lifeExpectancyMultiple");

        if (Util.isANumber(lifeExpectancyMultiple))
        {
            rmdVO.setLifeExpectancyMultipleCT(codeTableWrapper.getCodeTableEntry(Long.parseLong(lifeExpectancyMultiple)).getCode());
        }

        String rmdFrequency = appReqBlock.getReqParm("rmdFrequency");

        if (Util.isANumber(rmdFrequency))
        {
            rmdVO.setFrequencyCT(codeTableWrapper.getCodeTableEntry(Long.parseLong(rmdFrequency)).getCode());
        }

        String modalOverrideAmount = appReqBlock.getReqParm("modalOverrideAmount");
        String initialCYAccumValue = appReqBlock.getReqParm("initialCYAccumValue");

        String nextPaymentDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(appReqBlock.getReqParm("nextPaymentDate"));
        rmdVO.setNextPaymentDate(nextPaymentDate);

        String rmdStartDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(appReqBlock.getReqParm("rmdStartDate"));

        if (rmdVO.getElectionCT().equalsIgnoreCase("Opt3"))
        {
                rmdVO.setRMDStartDate(rmdStartDate);
            }

        if (Util.isANumber(modalOverrideAmount))
        {
            rmdVO.setModalOverrideAmount(new EDITBigDecimal(modalOverrideAmount).getBigDecimal());
        }

        if (Util.isANumber(initialCYAccumValue))
        {
            rmdVO.setInitialCYAccumValue(new EDITBigDecimal(initialCYAccumValue).getBigDecimal());
        }

        appReqBlock.getHttpSession().setAttribute("rmdVO", rmdVO);

        if (rmdVO.getElectionCT().equalsIgnoreCase("Opt4") && rmdVO.getFrequencyCT().equalsIgnoreCase("OneTime"))
        {
            appReqBlock.getHttpServletRequest().setAttribute("rmdMessage", "Frequency of One-Time Not Allowed With Option 4");
        }
        else if (!rmdVO.getElectionCT().equalsIgnoreCase("Opt3") && rmdStartDate != null)
        {
            appReqBlock.getHttpServletRequest().setAttribute("rmdMessage", "RMD Start Date Not Allowed With Selected RMD Election");
        }
        else
        {
            appReqBlock.getHttpServletRequest().setAttribute("closeDialog", "YES");
            // update this session attribut when user saves from RMD dialog.
            appReqBlock.getHttpSession().setAttribute("contract.saveRMDModifications", "true");
        }

        return RMD_DIALOG;
    }

    protected String closeRMDDialog(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        PageBean formBean = contractMainSessionBean.getPageBean("formBean");
        String optionId = formBean.getValue("optionId");

        String productType = checkProductType(optionId);
        String mainReturnPage = getMainReturnPage(productType);

        return mainReturnPage;
    }

    protected String showDeleteContractConfirmationDialog(AppReqBlock appReqBlock) throws Exception
    {
        new InforceUseCaseComponent().deleteInforceContract();

        SessionBean base = appReqBlock.getSessionBean("contractBase");
        PageBean baseRiderBean = base.getPageBean("contractBase");

        String segmentPK = baseRiderBean.getValue("segmentPK");
        String contractId = baseRiderBean.getValue("contractId");

        appReqBlock.getHttpServletRequest().setAttribute("segmentPK", segmentPK);
        appReqBlock.getHttpServletRequest().setAttribute("contractId", contractId);

        return DELETE_CONTRACT_CONFIRMATION_DIALOG;
    }

    private String lockContract(AppReqBlock appReqBlock) throws Exception
    {
        new InforceUseCaseComponent().updateInforceContract();

        PageBean baseRiderBean = appReqBlock.getSessionBean("contractBase").getPageBean("contractBase");
        String segmentPKAsStr = baseRiderBean.getValue("segmentPK");

        long segmentPK = (Util.isANumber(segmentPKAsStr)) ? Long.parseLong(segmentPKAsStr) : 0;

        appReqBlock.getFormBean().putValue("segmentPK", segmentPKAsStr);

        appReqBlock.getHttpServletRequest().setAttribute("editEffectiveDate", "true");
        appReqBlock.getFormBean().putValue("editEffectiveDate", "true");

        String returnPage = loadContract(appReqBlock);

        UserSession userSession = appReqBlock.getUserSession();

        try
        {
            userSession.lockSegment(segmentPK);
        }
        catch (EDITLockException e)
        {
            appReqBlock.getHttpServletRequest().setAttribute("errorMessage", e.getMessage());
        }

        return returnPage;
    }

    protected String loadContractAfterSearch(AppReqBlock appReqBlock) throws Exception
    {
        new InforceUseCaseComponent().accessInforceContract();

        clearAllContractSessions(appReqBlock);

        appReqBlock.getHttpSession().setAttribute("searchValue", appReqBlock.getReqParm("searchValue"));

        contract.business.Lookup lookup =  new contract.component.LookupComponent();

        SegmentVO baseSegmentVO = lookup.composeSegmentVO(Long.parseLong(appReqBlock.getReqParm("searchValue")), new ArrayList());

        String optionCode = baseSegmentVO.getOptionCodeCT();

        appReqBlock.getHttpSession().setAttribute("optionCode", optionCode);

        UserSession userSession = appReqBlock.getUserSession();
        userSession.setSegmentPK(Long.parseLong(appReqBlock.getReqParm("searchValue")));
        userSession.addSearchHistory(baseSegmentVO.getContractNumber());
        
        appReqBlock.getHttpSession().setAttribute("reloadHeader", "true");

        return MAIN_FRAMESET;
    }

    protected String saveContract(AppReqBlock appReqBlock) throws Exception
    {
        EDITDateTime processingDatetime = new EDITDateTime();
        
    	String operator = appReqBlock.getUserSession().getUsername();

        String processErrorMessage = "";
        PageBean pageBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        if (pageBean.getValue("statusChange").equalsIgnoreCase(Segment.SEGMENTSTATUSCT_FROZEN))
        {
        	processErrorMessage = "Cannot update contract to Frozen via this method!";
        }
       // ECK 
        String riderNumber = (String) Util.initString(appReqBlock.getSessionBean("contractMainSessionBean").getValue("newRiderSequenceNumber"), "-1");
        String unitsChangeEffectiveDate = (String) Util.initString(appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("unitsChangeEffectiveDate"), 
        		(String) Util.initString(appReqBlock.getSessionBean("contractMainSessionBean").getValue("unitsChangeEffectiveDate"), ""));
        String changeEffectiveDate = (String) Util.initString(appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("changeEffectiveDate"), "");
        if ((changeEffectiveDate == null) || changeEffectiveDate.trim().isEmpty()) {
        	changeEffectiveDate = unitsChangeEffectiveDate;
        }
        if ((changeEffectiveDate != null) && !changeEffectiveDate.trim().isEmpty()) {
        	EDITDate changeEffectiveEDITDate = new EDITDate(changeEffectiveDate);
            SessionHelper.putInThreadLocal(HibernateEntityDifference.CHANGE_EFFECTIVE_DATE, changeEffectiveEDITDate);
            SessionHelper.putInThreadLocal("useChangeEffectiveDate", true);
        }
        
        String conversionValue = (String) Util.initString(appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("conversionValue"), "");
        
        String isBillingChangeTrx = (String) Util.initString(appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("isBillingChangeTrx"), "");
        appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").putValue("isBillingChangeTrx", "");
        
        String isClaimStopTrx = (String) Util.initString(appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("isClaimStopTrx"), "");
        appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").putValue("isClaimStopTrx", "");
        
        String recordPRASEEvents = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("recordPRASEEvents");
        UtilitiesForTran.setupRecordPRASEEvents(appReqBlock, recordPRASEEvents);

        String returnPage = performPageEditing(appReqBlock);

        if (!returnPage.equals(""))
        {
            return returnPage;
        }
        else
        { contract.business.Lookup contractLookup = new contract.component.LookupComponent(); String ignoreEditWarnings = appReqBlock.getReqParm("ignoreEditWarnings"); ignoreEditWarnings = (ignoreEditWarnings == null) ? "" : ignoreEditWarnings;

            ContractVO contractVO = buildContractVO(appReqBlock); // first time getting segment from database
            SegmentVO segmentVO = contractVO.getSegmentVO();
            String contractNumber = segmentVO.getContractNumber();

            // add selectedRiderSegmentPK to the ContractVO for scripts
            if (!unitsChangeEffectiveDate.isEmpty()) {
            	contractVO.setRiderChangeEffectiveDate(new EDITDate(unitsChangeEffectiveDate));
            	contractVO.getSegmentVO().setSegmentChangeEffectiveDate(unitsChangeEffectiveDate);
            
            }
            Segment riderSegment = Segment.findBy_ContractNumberAndRiderNumber(contractNumber, Integer.parseInt(riderNumber));
            if (riderSegment != null) {
                contractVO.setSelectedRiderPK(riderSegment.getSegmentPK());
            }
            
            Long originalBillScheduleFK = Segment.findByPK(segmentVO.getSegmentPK()).getBillScheduleFK();
            
            ContractRequirementVO[] contractRequirementVOs = segmentVO.getContractRequirementVO();

            if (contractRequirementVOs != null)
            {
                boolean outstandingIssuedPendingReqFound = false;
                List voInclusionList = new ArrayList();
                voInclusionList.add(RequirementVO.class);

                for (int i = 0; i < contractRequirementVOs.length; i++)
                {
                    if (contractRequirementVOs[i].getRequirementStatusCT().equalsIgnoreCase("Outstanding"))
                    {
                        long filteredRequirementFK = contractRequirementVOs[i].getFilteredRequirementFK();
                        FilteredRequirementVO filteredRequirementVO = contractLookup.composeFilteredRequirementVOByPK(filteredRequirementFK, voInclusionList);
                        RequirementVO requirementVO = (RequirementVO) filteredRequirementVO.getParentVO(RequirementVO.class);

                        if (requirementVO.getAllowableStatusCT().equalsIgnoreCase("IssuedPendingReq"))
                        {
                            outstandingIssuedPendingReqFound = true;

                            break;
                        }
                    }
                }

                if (!outstandingIssuedPendingReqFound)
                {
                    if (segmentVO.getSegmentStatusCT().equalsIgnoreCase("ActivePendingComm"))
                    {
                        segmentVO.setSegmentStatusCT("Active");
                    }
                    else if (segmentVO.getSegmentStatusCT().equalsIgnoreCase("IssuedPendingReq"))
                    {
                        segmentVO.setSegmentStatusCT("IssuePendingPremium");
                    }
                }
            }
            
            String agentMessage = "";
            
            ContractClientVO[] contractClientVOs = segmentVO.getContractClientVO();
            
            AgentHierarchyVO[] agentHierarchyVOs = segmentVO.getAgentHierarchyVO();
            EDITDate currentDate = new EDITDate();

            if ((agentHierarchyVOs != null) && (agentHierarchyVOs.length > 0))
            {
            	// Get user-provided effective date of new contractClient being added to contract (PK=0)                
                EDITDate effectiveDate = new EDITDate(segmentVO.getEffectiveDate());
                
                for(ContractClientVO contractClientVO : contractClientVOs){
                       
                       if (contractClientVO.getContractClientPK() == 0)
                       {
                             // ContractClientVO.effectiveDate defaults to Segment.effectiveDate 
                              // if user leaves this field blank in the UI
                             effectiveDate = new EDITDate(contractClientVO.getEffectiveDate());
                       }
                }
                
                // Use currentDate if effectiveDate is in the past to ensure we are looking at current agent splits
                if (effectiveDate.before(currentDate)) {
                      effectiveDate = currentDate;
                }         	            		          	
                
                String action = appReqBlock.getReqParm("action");
                if (action.equals(SHOW_CONTRACT_AGENTS)) {
                    agentMessage = verifyAgentHierarchyAllocation(agentHierarchyVOs, effectiveDate);
                
                    if (agentMessage == null || agentMessage.equals("")) {
                	    for (SegmentVO riderVO : segmentVO.getSegmentVO()) {
                		    agentHierarchyVOs = riderVO.getAgentHierarchyVO();
                            if (agentHierarchyVOs != null && agentHierarchyVOs.length > 0) {
                        	    agentMessage = verifyAgentHierarchyAllocation(agentHierarchyVOs, effectiveDate);
                        	    if (agentMessage != null && (!agentMessage.equals(""))) {
                        		    break;
                        	    }
                            }
                	    }
                     }
                }
            }
            
            // Set contractClient.overrideStatus to 'D' for any terminated clients
            // **Note: This allows a terminated client to be shown in UI tables for informational purposes, but will not appear on PRDs, etc
            // ** Deleted clients still have a future termination date and will not appear in either place
            if (contractClientVOs != null && contractClientVOs.length>0){
            	
            	for(int c = 0; c < contractClientVOs.length; c++)
            	{
            		EDITDate terminationDate = new EDITDate(contractClientVOs[c].getTerminationDate());
            		String overrideStatus = contractClientVOs[c].getOverrideStatus();
            		
            		if (terminationDate != null && terminationDate.beforeOREqual(currentDate) && !overrideStatus.equalsIgnoreCase("D"))
            		{
            			contractClientVOs[c].setOverrideStatus("D");
            		}
            	}
            }
            
            // Check for pre-existing pending billing changes to prevent a new trx before the old one has been run or deleted
            Segment segment = (Segment) SessionHelper.map(segmentVO, SessionHelper.EDITSOLUTIONS);
            
            String billScheduleChangeType = (String) appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("billScheduleChangeType");
            
            if (billScheduleChangeType == null || billScheduleChangeType.equals(""))
            {
            	billScheduleChangeType = segment.getBillScheduleChangedType();
            }
            
            if (billScheduleChangeType.equalsIgnoreCase("CONT") || 
            	billScheduleChangeType.equalsIgnoreCase("BOTH") || 
            	billScheduleChangeType.equalsIgnoreCase("List") ||
            	billScheduleChangeType.equalsIgnoreCase(Segment.BILLSCHEDULE_CHANGED_LIST_TO_LIST) || 
            	billScheduleChangeType.equalsIgnoreCase(Segment.BILLSCHEDULE_CHANGED_INDIVIDUAL_TO_LIST) || 
            	billScheduleChangeType.equalsIgnoreCase(Segment.BILLSCHEDULE_CHANGED_LIST_TO_INDIVIDUAL)) 
            {            	
	            long segmentPK = segmentVO.getSegmentPK();
	            String[] transactionType = {EDITTrx.TRANSACTIONTYPECT_BILLING_CHANGE};
	            EDITTrxVO[] pendingBCTrx = event.dm.dao.DAOFactory.getEDITTrxDAO().findAllPendingBySegmentPKAndTrxType(segmentPK, transactionType);
	            
	            if (pendingBCTrx != null && pendingBCTrx.length > 0)
	            {
	            	for (EDITTrxVO editTrxVO : pendingBCTrx)
	            	{
	            		ContractSetupVO[] contractSetupVO = event.dm.dao.DAOFactory.getContractSetupDAO().findByEDITTrxPK(editTrxVO.getEDITTrxPK());
	            		String complexChangeType = contractSetupVO[0].getComplexChangeTypeCT();
	            		
	            		if (complexChangeType.equalsIgnoreCase("CONT") || complexChangeType.equalsIgnoreCase("BOTH") || complexChangeType.equalsIgnoreCase("List"))
	            		{
	            			processErrorMessage = "This contract has a pending billing change that has not processed.  Please address the existing billing change before creating a new one.";
	            			break;
	            		}
	            	}
	            }
            }
            
            String optionId = contractVO.getSegmentVO().getOptionCodeCT();        	
            if (optionId.equalsIgnoreCase(UNIVERSAL_LIFE))
            {
            	returnPage = CONTRACT_UNIVERSAL_LIFE_MAIN;
            }
            else if (optionId.equalsIgnoreCase(TRADITIONAL))
            {
                returnPage = CONTRACT_TRAD_MAIN;
            }
            else if (Segment.OPTIONCODES_AH.contains(optionId.toUpperCase())) 
            {
            	returnPage = CONTRACT_AH_MAIN;
            }
            else if (optionId.equalsIgnoreCase("DFA"))
            {
                returnPage = CONTRACT_DEFERRED_ANNUITY_MAIN;
            }
            else if (optionId.equalsIgnoreCase("VL") || optionId.equalsIgnoreCase("TL"))
            {
                returnPage = CONTRACT_LIFE_MAIN;
            }
            else
            {
                returnPage = CONTRACT_MAIN;
            }
            
            String errorMessage = validateDeductionAmountFields(contractVO);

            if (processErrorMessage != null && !processErrorMessage.equals(""))
            {
            	appReqBlock.getHttpServletRequest().setAttribute("errorMessage", processErrorMessage);
            	
            	return returnPage;
            }
            else if (agentMessage != null && !agentMessage.equals(""))
            {
                appReqBlock.getHttpServletRequest().setAttribute("agentMessage", agentMessage);

                return CONTRACT_AGENT;
            }
            else if (errorMessage != null)
            {
                appReqBlock.getHttpServletRequest().setAttribute("errorMessage", errorMessage);
            	
            	return returnPage;
            }
            else
            {
                SegmentVO[] riders = segmentVO.getSegmentVO();

                if (riders != null)
                {
                    for (int r = 0; r < riders.length; r++)
                    {
                        AgentHierarchyVO[] riderAgentHierarchyVOs = riders[r].getAgentHierarchyVO();
                        new UtilitiesForTran().resetNegativeKeysToZero(riderAgentHierarchyVOs);
                    }
                }

                if (!ignoreEditWarnings.equalsIgnoreCase("true"))
                {
                    try
                    {
                        validateContract(contractVO, appReqBlock);
                    }
                    catch (PortalEditingException e)
                    {
                        e.setReturnPage(returnPage); //To change body of catch statement use File | Settings | File Templates.

                        throw e;
                    }
                }
                
                // after scripts are run and before additional changes to segment, refresh.
//                contractVO.setSegmentVO((SegmentVO)(Segment.findByPK(contractVO.getSegmentVO().getSegmentPK()).getVO()));
                 

                // The segment is saving/updating RMD entries every time the segment is saved and the part of segment save
                // process is to verify if certain field (election and frequency) values and generates/updates RMD values.
                // This process should not happen every time the segment is saved and should only happen when the user goes into
                // RMD dialog and either adds or updates the RMD values. The following session attribute is set to 'true' only
                // when the user successfully saves the values for RMD entry. (RMD = RequiredMinDistribution)
                String saveRMDModifications = (String) appReqBlock.getHttpSession().getAttribute("contract.saveRMDModifications");

                if (saveRMDModifications != null && saveRMDModifications.equals("false"))
                {
                    // If the user does not go to RMD dialog, delete RMDVO from segment
                    // There should be only one RMD entry for a contract.
                    if (contractVO.getSegmentVO().getRequiredMinDistributionVOCount() > 0)
                    {
                        contractVO.getSegmentVO().removeRequiredMinDistributionVO(0);
                    }
                }
                

                new UtilitiesForTran().resetNegativeKeysToZero(agentHierarchyVOs);
                
                // Capture BillSchedule (currently stored in database)
                BillSchedule formerBillSchedule = BillSchedule.findBy_BillSchedulePK(originalBillScheduleFK);
                BillScheduleVO formerBillScheduleVO = (BillScheduleVO) SessionHelper.map(formerBillSchedule, SessionHelper.EDITSOLUTIONS);

                // Capture BillSchedule from UI (currently in use in this transaction)
                BillScheduleVO billScheduleVO = contractVO.getBillScheduleVO();
                
                boolean newBillScheduleCreated = false;
                
                // Create a new bill schedule record if necessary
                if (isBillingChangeTrx.equalsIgnoreCase("true")) 
                {
	                if (billScheduleVO.getBillSchedulePK() != 0 && billScheduleVO.requiresNewBillScheduleRecord(formerBillScheduleVO, contractNumber))
	                {
	                	billScheduleVO.setBillSchedulePK(0);
	                	
	                	billScheduleVO.setTerminationDate(EDITDate.DEFAULT_MAX_DATE);
	                	
	                	String billScheduleEffectiveDate = billScheduleVO.getBillChangeStartDate();
	                	if(billScheduleEffectiveDate == null || billScheduleEffectiveDate.equals(""))
	                	{
	                		billScheduleEffectiveDate = new EDITDate().getFormattedDate();
	                	}
	                	
	                	billScheduleVO.setEffectiveDate(billScheduleEffectiveDate);
	                	
	                	newBillScheduleCreated = true;
	                }
	                else if (billScheduleVO.getBillSchedulePK() == 0)
	                {
	                	String billScheduleEffectiveDate = billScheduleVO.getBillChangeStartDate();
	                	if(billScheduleEffectiveDate == null || billScheduleEffectiveDate.equals(""))
	                	{
	                		billScheduleEffectiveDate = new EDITDate().getFormattedDate();
	                	}
	                	
	                	billScheduleVO.setEffectiveDate(billScheduleEffectiveDate);
	                }
                }
                
                contract.business.Contract contract = new contract.component.ContractComponent();
                
                Long billSchedulePK = null;

                // save billScheduleVO if not a group BS or if it's new)
                if (billScheduleVO != null && (billScheduleVO.getBillSchedulePK() == 0 || 
                		(billScheduleVO.getBillTypeCT().equalsIgnoreCase("INDIV")) &&
                		 (isBillingChangeTrx.equalsIgnoreCase("true")) )) {
                    billSchedulePK = contract.saveBillSchedule(billScheduleVO);  // save before the segment so pk will exist
             //   	billSchedulePK = billScheduleVO.getBillSchedulePK(); ### what the hell is this doing here!
                } else {
                	// group BS cannot be changed via contract screen so no need to save it here.. just grab the PK
                	billSchedulePK = billScheduleVO.getBillSchedulePK();
                }

                // update segment to correct billSchedulePK
                contractVO.getSegmentVO().setBillScheduleFK(billSchedulePK);
                segmentVO = contractVO.getSegmentVO(); 

                // run HibernateEntityDifferenceIntercepter and other scripts
                long segmentPK = contract.saveSegment(contractVO.getSegmentVO(), conversionValue, true, operator);
                
                try {

                	if (isBillingChangeTrx.equalsIgnoreCase("true")) 
                	{
                		if (newBillScheduleCreated)
                		{
                			//Set riders to new BillSchedulePK
                			if (billSchedulePK != null)
                			{	
                				Segment[] riderSegments = Segment.findBy_SegmentFK(segmentVO.getSegmentPK());

                				BillSchedule newBillSchedule = BillSchedule.findBy_BillSchedulePK(billSchedulePK);

                				if (riderSegments != null)
                				{
                					for (int r = 0; r < riderSegments.length; r++)
                					{
                						riderSegments[r].setBillScheduleFK(billSchedulePK);
                						riderSegments[r].setBillSchedule(newBillSchedule);
                						SessionHelper.saveOrUpdate(riderSegments[r], SessionHelper.EDITSOLUTIONS);
                					}
                				}
                			}
                		}

                		// Terminate the old BillSchedule if there are no segments attached
                		Segment[] segments = Segment.findBy_BillScheduleFK(originalBillScheduleFK);

                		if (segments == null || segments.length == 0)
                		{
                			SessionHelper.beginTransaction(SessionHelper.EDITSOLUTIONS);

                			formerBillSchedule = BillSchedule.findBy_BillSchedulePK(originalBillScheduleFK);
                			
                			if (billScheduleVO.getBillTypeCT().equalsIgnoreCase("GRP"))
                			{
                				formerBillSchedule.setTerminationDate(new EDITDate());
                			} 
                			else if (billScheduleVO.getBillTypeCT().equalsIgnoreCase("INDIV"))
                			{
                				formerBillSchedule.setTerminationDate(new EDITDate(billScheduleVO.getEffectiveDate()));
                			}
                			
                			SessionHelper.saveOrUpdate(formerBillSchedule, SessionHelper.EDITSOLUTIONS);
                		}

                		SessionHelper.commitTransaction(SessionHelper.EDITSOLUTIONS);
                	}

                } catch (Exception e) {
                	System.out.println(e);

                	e.printStackTrace();

                	SessionHelper.rollbackTransaction(SessionHelper.EDITSOLUTIONS);

                	throw e;
                }
                
                EDITTrxVO[] editTrxVOs = (EDITTrxVO[]) appReqBlock.getHttpSession().getAttribute("changedEditTrxVOs");

                if (editTrxVOs != null)
                {
                    event.business.Event eventComponent = new event.component.EventComponent();
                    eventComponent.saveEditTrxChanges(editTrxVOs, operator, segmentPK);
                }
                
                // Check for logged exceptions that may have been created during script processing to alert user
                logging.LogEntry[] logEntries = logging.LogEntry.findBy_LogNameContractNumberDateTime(Log.EXECUTE_TRANSACTION, contractNumber, processingDatetime);
                
                if (logEntries != null && logEntries.length > 0)
                {
                	errorMessage = "The following error(s) have been logged in the EXECUTE.TRANSACTION Log ... Please address: \\n";
                	
                	for (logging.LogEntry logEntry : logEntries)
                	{
                		errorMessage += "\\n " + logEntry.getLogMessage();
                	}
                	
                	appReqBlock.getHttpServletRequest().setAttribute("errorMessage", errorMessage);
                }
                else
                {
                	errorMessage = "Transaction Saved Successfully";
                	appReqBlock.getHttpServletRequest().setAttribute("errorMessage", errorMessage);
                }

                appReqBlock.getSessionBean("contractStateBean").putValue("contractNumber", segmentVO.getContractNumber());
                appReqBlock.getFormBean().putValue("segmentPK", segmentPK + "");
                
                //set for list to direct change
                appReqBlock.getHttpSession().removeAttribute("changedBilling");

                UserSession userSession = appReqBlock.getUserSession();

                userSession.unlockSegment();

                return loadContract(appReqBlock);
            }
        }
    }

    private String verifyAgentHierarchyAllocation(AgentHierarchyVO[] agentHierarchyVOs, EDITDate effectiveDate) {

		String agentMessage = null;

        if (agentHierarchyVOs != null && agentHierarchyVOs.length > 0) {
            
        	
        	EDITBigDecimal sum = new EDITBigDecimal(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR);
        	
        	for (AgentHierarchyVO agentHierarchyVO : agentHierarchyVOs) {
	
        		 AgentHierarchyAllocationVO[] agentHierarchyAllocationVOs = agentHierarchyVO.getAgentHierarchyAllocationVO();

                 if (agentHierarchyAllocationVOs != null && agentHierarchyAllocationVOs.length > 0) {
                     
                	for (AgentHierarchyAllocationVO agentHierarchyAllocationVO : agentHierarchyAllocationVOs) {
	
			        	EDITBigDecimal allocationPercent = new EDITBigDecimal(agentHierarchyAllocationVO.getAllocationPercent());
			            EDITDate startDate = new EDITDate(agentHierarchyAllocationVO.getStartDate());
			            EDITDate stopDate = new EDITDate(agentHierarchyAllocationVO.getStopDate());
			
			            if ((effectiveDate.equals(startDate) || effectiveDate.after(startDate)) &&
			                    (effectiveDate.equals(stopDate)  || effectiveDate.before(stopDate))) {
					            
			            	sum = sum.addEditBigDecimal(allocationPercent);		        	
			            }
	                 }
                 }
	        }
        
	        if (!Util.roundAllocation(sum).isEQ(new EDITBigDecimal("1"))) {
                agentMessage = "Agent Split Percent Must Equal 100%(1.0) For Each Coverage";
                
	        } else {
	        	for (AgentHierarchyVO agentHierarchyVO : agentHierarchyVOs) {
	        		
                    if (agentHierarchyVO.getAgentSnapshotVOCount() > 0) {

                        AgentSnapshotVO[] agentSnapshotVOs = agentHierarchyVO.getAgentSnapshotVO();
                        for (AgentSnapshotVO agentSnapshotVO : agentSnapshotVOs)
                        {
                            EDITBigDecimal advancePercent = new EDITBigDecimal(agentSnapshotVO.getAdvancePercent());
                            EDITBigDecimal recoveryPercent = new EDITBigDecimal(agentSnapshotVO.getRecoveryPercent());
                            agentMessage = new UtilitiesForTran().editCommissionProfile(new Long(agentSnapshotVO.getCommissionProfileFK()), advancePercent, 
                            		recoveryPercent, agentSnapshotVO.getPlacedAgentFK());
                        }
                    }
                }
	        }
        }
        
        return agentMessage;
    }

    private String validateDeductionAmountFields(ContractVO contractVO)
    {
        String errorMessage = null;

        SegmentVO segmentVO = contractVO.getSegmentVO();

        String optionId = contractVO.getSegmentVO().getOptionCodeCT();

        if (optionId.equals(TRADITIONAL) || optionId.equals(UNIVERSAL_LIFE))
        {
            EDITBigDecimal deductionAmountOverride = new EDITBigDecimal(segmentVO.getDeductionAmountOverride());

            if (!deductionAmountOverride.isEQ(new EDITBigDecimal("0")))
            {
                if (segmentVO.getDeductionAmountEffectiveDate() == null)
                {
                    errorMessage = "Deduction Amount Effective Date is required if Deduction Amount is Entered";
                }
                else
                {
                    EDITDate contractEffectiveDate = new EDITDate(segmentVO.getEffectiveDate());

                    int contractEffectiveDateDay = contractEffectiveDate.getDay();

                    EDITDate deductionAmountEffectiveDate = new EDITDate(segmentVO.getDeductionAmountEffectiveDate());
                    int deductionAmountEffectiveDateDay = deductionAmountEffectiveDate.getDay();

                    if (contractEffectiveDateDay != deductionAmountEffectiveDateDay)
                    {
                        errorMessage = "Deduction Amount Effective Date must be a Monthiversary Date";
                    }

                    BillScheduleVO billScheduleVO = contractVO.getBillScheduleVO();
                    EDITDate nextBillDueDate = new EDITDate(billScheduleVO.getNextBillDueDate());

                    String nextBillDueDateYearMonth = nextBillDueDate.getFormattedYearAndMonth();

                    String deductionAmountEffectiveDateYearMonth = deductionAmountEffectiveDate.getFormattedYearAndMonth();

                    if (new EDITDate(deductionAmountEffectiveDateYearMonth+"/01").before(new EDITDate(nextBillDueDateYearMonth+"/01")))
                    {
                        errorMessage = "Deduction Amount Effective Date Must be >= Next Bill Due Date";
                    }
                }
            }
        }

        return errorMessage;
    }

    protected String updateInvestmentOverride(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String fundId = formBean.getValue("fundId");
        String segmentFK = formBean.getValue("segmentFK");
        String invAllocOvrdPK = formBean.getValue("investmentAllocationOverridePK");
        String investmentFK = formBean.getValue("investmentFK");
        String invAllocFK = formBean.getValue("investmentAllocationFK");
        String productStructureId = formBean.getValue("companyStructureId");
        String fromToIndicator = formBean.getValue("fromToIndicator");
        String bucketFK = formBean.getValue("bucketFK");
        String hfInvestmentFK = formBean.getValue("hfInvestmentFK");

        PageBean trxFormBean = appReqBlock.getSessionBean("contractTransactionSessionBean").getPageBean("formBean");
        String transactionType = trxFormBean.getValue("transactionType");

        if (fromToIndicator.equals(""))
        {
            if (transactionType.equalsIgnoreCase("PY") ||
                transactionType.equalsIgnoreCase("PI") ||
                transactionType.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_PREMIUM_LOAN))
            {
                fromToIndicator = "T";
            }
            else
            {
                fromToIndicator = "F";
            }
        }

        String hfStatus = formBean.getValue("hfStatus");
        String hfiaIndicator = formBean.getValue("hfiaIndicator");
        String holdingAccountIndicator = formBean.getValue("holdingAccountIndicator");

        if (!fundId.equalsIgnoreCase("Please Select"))
        {
            String allocationPercent = formBean.getValue("allocationPercent");
            String allocationDollars = formBean.getValue("allocationDollars");
            String allocationUnits = formBean.getValue("allocationUnits");

            PageBean investmentBean = new PageBean();

            investmentBean.putValue("fundId", fundId);
            investmentBean.putValue("segmentFK", segmentFK);
            investmentBean.putValue("investmentAllocationOverridePK", invAllocOvrdPK);
            investmentBean.putValue("investmentFK", investmentFK);
            investmentBean.putValue("investmentAllocationFK", invAllocFK);
            investmentBean.putValue("allocationPercent", allocationPercent);
            investmentBean.putValue("allocationDollars", allocationDollars);
            investmentBean.putValue("allocationUnits", allocationUnits);
            investmentBean.putValue("fromToIndicator", fromToIndicator);
            investmentBean.putValue("hfStatus", hfStatus);
            investmentBean.putValue("hfiaIndicator", hfiaIndicator);
            investmentBean.putValue("holdingAccountIndicator", holdingAccountIndicator);
            investmentBean.putValue("bucketFK", bucketFK);
            investmentBean.putValue("hfInvestmentFK", hfInvestmentFK);

            String fundKey = invAllocOvrdPK + "_" + fundId;

            appReqBlock.getSessionBean("contractInvestmentOverrides").putPageBean(fundKey, investmentBean);
            appReqBlock.getHttpServletRequest().setAttribute("companyStructureId", productStructureId);
        }

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return CONTRACT_TRANS_INVESTMENT_DIALOG;
    }

    protected String cancelInvestmentOverride(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
        String fundId = formBean.getValue("fundId");
        String invAllocOvrdPK = formBean.getValue("investmentAllocationOverridePK");

        String fundKey = invAllocOvrdPK + "_" + fundId;

        PageBean investmentBean = appReqBlock.getSessionBean("contractInvestmentOverrides").getPageBean(fundKey);

        appReqBlock.getHttpServletRequest().setAttribute("formBean", investmentBean);

        return CONTRACT_TRANS_INVESTMENT_DIALOG;
    }

    protected String deleteInvestmentOverride(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
        String key = formBean.getValue("investmentAllocationOverridePK") + "_" + formBean.getValue("fundId");
        String transactionId = formBean.getValue("transactionId");

        SessionBean investmentOverrides = appReqBlock.getSessionBean("contractInvestmentOverrides");

        PageBean investmentBean = investmentOverrides.getPageBean(key);

        investmentBean.putValue("status", "deleted");

        Map investmentBeans = investmentOverrides.getPageBeans();

        Iterator it = investmentBeans.values().iterator();
        boolean investmentOverrideExists = false;

        while (it.hasNext())
        {
            PageBean iBean = (PageBean) it.next();

            if (!iBean.getValue("status").equals("deleted"))
            {
                investmentOverrideExists = true;

                break;
            }
        }

        if (investmentOverrideExists)
        {
            appReqBlock.getSessionBean("contractTransactions").getPageBean(transactionId).putValue("investmentIndStatus", "checked");
        }
        else
        {
            appReqBlock.getSessionBean("contractTransactions").getPageBean(transactionId).putValue("investmentIndStatus", "");
        }

        appReqBlock.getHttpServletRequest().setAttribute("transactionId", transactionId);

        formBean.removeValue("fundId");
        formBean.removeValue("investmentAllocationOverridePK");
        formBean.removeValue("allocationPercent");
        formBean.removeValue("allocationDollars");
        formBean.removeValue("allocationUnits");
        formBean.removeValue("hfStatus");
        formBean.removeValue("hfiaIndicator");
        formBean.removeValue("holdingAccountIndicator");
        formBean.removeValue("bucketFK");
        formBean.removeValue("investmentFK");
        formBean.removeValue("investmentAllocationFK");
        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return CONTRACT_TRANS_INVESTMENT_DIALOG;
    }

    protected String showFilterCriteriaDialog(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getSessionBean("contractTransactionSessionBean").clearState();
        appReqBlock.getSessionBean("contractPayeeOverrides").clearState();
        appReqBlock.getSessionBean("contractInvestmentOverrides").clearState();
        appReqBlock.getSessionBean("contractChargeOverrides").clearState();

        return FILTER_CRITERIA_DIALOG;
    }

    protected String cancelFilterCriteriaDialog(AppReqBlock appReqBlock) throws Exception
    {
        return loadTransactionProcess(appReqBlock);
    }

    protected String showEventDialog(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", formBean);

        String transactionId = appReqBlock.getFormBean().getValue("transactionId");
        String transactionType = appReqBlock.getFormBean().getValue("transactionType");

        appReqBlock.getHttpServletRequest().setAttribute("transactionId", transactionId);
        appReqBlock.getHttpServletRequest().setAttribute("transactionType", transactionType);

        return CONTRACT_TRANS_CHARGE_DIALOG;
    }

    protected String updateChargeOverride(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        PageBean formBean = appReqBlock.getFormBean();
        String chargeType = formBean.getValue("chargeType");
        String chargeAmount = formBean.getValue("chargeAmount");
        String chargePK = formBean.getValue("chargePK");
        String oneTimeOnlyInd = formBean.getValue("oneTimeOnlyInd");
        String oneTimeOnlyDate = formBean.getValue("oneTimeOnlyDate");
        String trxEffDate = formBean.getValue("trxEffDate");

        if (oneTimeOnlyInd.equalsIgnoreCase("on"))
        {
            oneTimeOnlyInd = "Y";
        }
        else
        {
            oneTimeOnlyInd = "N";
        }

        if (Util.isANumber(chargeType))
        {
            chargeType = codeTableWrapper.getCodeTableEntry(Long.parseLong(chargeType)).getCode();
        }

        if (!Util.isANumber(chargePK))
        {
            chargePK = "0";
        }

        PageBean chargeOverride = null;
        SessionBean contractChargeOverrides = appReqBlock.getSessionBean("contractChargeOverrides");

        if (contractChargeOverrides.pageBeanExists(chargeType + chargePK))
        {
            chargeOverride = contractChargeOverrides.getPageBean(chargeType + chargePK);
        }
        else
        {
            chargeOverride = new PageBean();
        }

        chargeOverride.putValue("chargeType", chargeType);
        chargeOverride.putValue("chargeAmount", chargeAmount);
        chargeOverride.putValue("chargePK", chargePK);
        chargeOverride.putValue("key", chargeType + chargePK);
        chargeOverride.putValue("oneTimeOnlyInd", oneTimeOnlyInd);
        if (oneTimeOnlyDate.equals(""))
        {
            chargeOverride.putValue("oneTimeOnlyDate", trxEffDate);
        }
        else
        {
            chargeOverride.putValue("oneTimeOnlyDate", oneTimeOnlyDate);
        }
        chargeOverride.putValue("trxEffDate", trxEffDate);

        contractChargeOverrides.putPageBean(chargeType + chargePK, chargeOverride);

        return CONTRACT_TRANS_CHARGE_DIALOG;
    }

    protected String deleteChargeOverride(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractChargeOverrides = appReqBlock.getSessionBean("contractChargeOverrides");
        PageBean formBean = appReqBlock.getFormBean();
        String key = formBean.getValue("key");

        formBean.putValue("deleteInd", "Y");
        contractChargeOverrides.putPageBean(key, formBean);

        return CONTRACT_TRANS_CHARGE_DIALOG;
    }

    protected String showInvestmentDialog(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String productStructureId = formBean.getValue("companyStructureId");
        String contractNumber = formBean.getValue("filter");

        UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
        appReqBlock.getHttpSession().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);

        UIInvestmentOverrideVO[] uiInvestmentOverrideVOs = buildUIInvestmentOverrideVO(contractNumber);

        if (uiInvestmentOverrideVOs != null)
        {
            appReqBlock.getHttpSession().setAttribute("uiInvestmentOverrideVOs", uiInvestmentOverrideVOs);
        }
        else
        {
            appReqBlock.getHttpSession().setAttribute("uiInvestmentOverrideVOs", new UIInvestmentOverrideVO[0]);
        }

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        //
        //        appReqBlock.getHttpServletRequest().setAttribute("companyStructureId", companyStructureId);
        return CONTRACT_TRANS_INVESTMENT_DIALOG;
    }

    protected String showContractMainDefault(AppReqBlock appReqBlock) throws Exception
    {
        return CONTRACT_MAIN;
    }

    protected String analyzeTransaction(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        contract.business.Lookup contractLookup = new contract.component.LookupComponent();
        String returnPage = "";

        List voExclusionList = new ArrayList();

        voExclusionList.add(ClientRoleVO.class);
        voExclusionList.add(ContractClientAllocationOvrdVO.class);
        voExclusionList.add(NoteReminderVO.class);
        voExclusionList.add(ContractSetupVO.class);
        voExclusionList.add(SegmentBackupVO.class);
        voExclusionList.add(RealTimeActivityVO.class);
        voExclusionList.add(PlacedAgentVO.class);
        voExclusionList.add(CommissionProfileVO.class);
        voExclusionList.add(InvestmentAllocationOverrideVO.class);
        voExclusionList.add(BucketHistoryVO.class);

        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        PageBean selectedContracts = contractTransactionSessionBean.getPageBean("selectedContracts");
        String[] contracts = selectedContracts.getValues("contracts");

        if ((contracts != null) && (contracts.length > 0))
        {
            for (int c = 0; c < contracts.length; c++)
            {
                String[] tokenizedContract = Util.fastTokenizer(contracts[c], ",");
                String segmentFK = tokenizedContract[1];

                SegmentVO[] segmentVO = contractLookup.getSegmentBySegmentPK(Long.parseLong(segmentFK), true, voExclusionList);

                formBean.putValue("contractId", segmentVO[0].getContractNumber());

                // Do not try to save the transaction for rider segments. At this point of time we save all transactions aginst base segment only. 
                // In a specific scenario where a withdrawal transaction is created with InvestmentAllocationOverrides,
                // it is going through loop of contracts that are stored in the cloudland and trying to save transaction and build the document 
                // for each contract that includes rider segments also. restrict saving transaction for rider segments.
                // Rider segments are always populated with SegmentFK
//                if (segmentVO[0].getSegmentFK() == 0L)
//                {
                returnPage = completeTransactionSave(appReqBlock, true, formBean, segmentVO[0], tokenizedContract);
//                }

        }
        }
        else
        {
            String segmentFK = formBean.getValue("segmentFK");
            String contractId = formBean.getValue("contractId");

            SegmentVO[] segmentVO = null;

            if (segmentFK.equals(""))
            {
                segmentVO = contractLookup.getSegmentByContractNumber(contractId, true, voExclusionList);

                segmentFK = segmentVO[0].getSegmentPK() + "";
            }

            else
            {
                segmentVO = contractLookup.getSegmentBySegmentPK(Long.parseLong(segmentFK), true, voExclusionList);
            }

            returnPage = completeTransactionSave(appReqBlock, true, formBean, segmentVO[0], null);
        }

        return returnPage;
    }

    protected String showAnalyzer(AppReqBlock appReqBlock) throws Exception
    {
        return ANALYZER_DIALOG;
    }

    protected String showChargesDialog(AppReqBlock appReqBlock) throws Exception
    {
        String historyKey = appReqBlock.getFormBean().getValue("editTrxHistoryPK");

        appReqBlock.getHttpServletRequest().setAttribute("editTrxHistoryPK", historyKey);

        return CHARGES_DIALOG;
    }

    protected String showFilterAllocationDialog(AppReqBlock appReqBlock) throws Exception
    {
        String editTrxPK = appReqBlock.getFormBean().getValue("editTrxPK");
        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String previousPage = stateBean.getValue("currentPage");

        PageBean tranPageBeans = contractTransactionSessionBean.getPageBean("formBean");
        String complexChangeType = tranPageBeans.getValue("complexChangeType");

        if (!previousPage.equalsIgnoreCase(TRX_SUSPENSE_DIALOG))
        {
            contractTransactionSessionBean.putPageBean("formBean", appReqBlock.getFormBean());
        }

        PageBean formBean = appReqBlock.getFormBean();
        formBean.putValue("filterMessage", "Keep Page");

        String filterType = formBean.getValue("filterType");
        PageBean selectedContracts = contractTransactionSessionBean.getPageBean("selectedContracts");

        if (filterType.equalsIgnoreCase("Contract Number"))
        {
            contract.business.Lookup contractLookup = new contract.component.LookupComponent();
            String filter = formBean.getValue("filter");
            String productStructureFK = formBean.getValue("companyStructureId");

            SegmentVO[] segmentVOs = contractLookup.findSegmentByProductStructureContractNumber(Long.parseLong(productStructureFK), filter, false, null);

            DepositsVO[] trxDepositsVOs = contractLookup.composeDepositsBySegmentPKAndEDITTrxPK(segmentVOs[0].getSegmentPK(), editTrxPK);

            //            long totalDeposits = 0;
            EDITBigDecimal totalDeposits = new EDITBigDecimal();

            if (trxDepositsVOs != null)
            {
                appReqBlock.getHttpSession().setAttribute("trxDepositsVOs", trxDepositsVOs);

                for (int i = 0; i < trxDepositsVOs.length; i++)
                {
                    totalDeposits = totalDeposits.addEditBigDecimal(Util.roundToNearestCent(new EDITBigDecimal(trxDepositsVOs[i].getAmountReceived())));
                }
            }
            else
            {
                trxDepositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("trxDepositsVOs");

                if (trxDepositsVOs != null)
                {
                    for (int i = 0; i < trxDepositsVOs.length; i++)
                    {
                        //totalDeposits += Util.roundToNearestCent(trxDepositsVOs[i].getAmountReceived());
                        totalDeposits = totalDeposits.addEditBigDecimal(Util.roundToNearestCent(new EDITBigDecimal(trxDepositsVOs[i].getAmountReceived())));
                    }
                }
            }

            String[] contracts = selectedContracts.getValues("contracts");

            if ((contracts == null) || (contracts.length == 0))
            {
                if ((segmentVOs != null) && (segmentVOs.length > 0))
                {
                    selectedContracts = new PageBean();

                    selectedContracts.putValues("contracts", segmentVOs, new String[]
                        {
                            "getContractNumber", "getSegmentPK",
                            "getProductStructureFK", "getSegmentNameCT",
                            "getSegmentFK", "getOptionCodeCT"
                        }, ",");
                    contracts = selectedContracts.getValues("contracts");

                    for (int s = 0; s < contracts.length; s++)
                    {
                        contracts[s] = contracts[s] + "," + 0 + "," + 0 + "," + 0 + "," + 0 + "," + 0 + "," + "" + "," + "unchecked" + "," + "unchecked" + "," + "";
                    }

                    contractTransactionSessionBean.putPageBean("selectedContracts", selectedContracts);
                    formBean.putValue("segmentFK", segmentVOs[0].getSegmentPK() + "");
                    formBean.putValue("editTrxPK", editTrxPK);
                    formBean.putValue("segmentName", "");
                    formBean.putValue("filterAllocPct", "0");
                    formBean.putValue("filterAllocDollars", "0");
                    formBean.putValue("amountReceived", "0");
                    formBean.putValue("amountUsed", totalDeposits + "");
                    formBean.putValue("costBasis", "0");
                    formBean.putValue("deathStatus", "");
                    formBean.putValue("payeeIndStatus", "unchecked");
                    formBean.putValue("investmentIndStatus", "unchecked");
                    formBean.putValue("claimStatus", "");
                    formBean.putValue("rowId", "0");
                    formBean.putValue("complexChangeType", complexChangeType);
                }
            }
            else
            {
                for (int s = 0; s < contracts.length; s++)
                {
                    String[] tokenizedContract = Util.fastTokenizer(contracts[s], ",");

                    if (tokenizedContract[4].equals("0"))
                    {
                        tokenizedContract[9] = totalDeposits + "";
                    }

                    if (s == 0)
                    {
                        formBean.putValue("segmentFK", tokenizedContract[1]);
                        formBean.putValue("editTrxPK", editTrxPK);
                        formBean.putValue("segmentName", "");
                        formBean.putValue("filterAllocPct", tokenizedContract[6]);
                        formBean.putValue("filterAllocDollars", tokenizedContract[7]);
                        formBean.putValue("amountReceived", tokenizedContract[8]);
                        formBean.putValue("amountUsed", tokenizedContract[9]);
                        formBean.putValue("costBasis", tokenizedContract[10]);
                        formBean.putValue("deathStatus", tokenizedContract[11]);
                        formBean.putValue("payeeIndStatus", tokenizedContract[12]);
                        formBean.putValue("investmentIndStatus", tokenizedContract[13]);
                        formBean.putValue("claimStatus", tokenizedContract[14]);
                        formBean.putValue("rowId", "0");
                        formBean.putValue("complexChangeType", complexChangeType);
                    }
                }
            }
        }

        String[] selectedValues = selectedContracts.getValues("contracts");

        if (selectedValues.length > 1)
        {
            TreeMap sortedValues = sortValues(selectedValues);
            String[] sortedContracts = new String[sortedValues.size()];
            Iterator it = sortedValues.values().iterator();
            int i = 0;

            while (it.hasNext())
            {
                String valuesString = (String) it.next();
                sortedContracts[i] = valuesString;
                i += 1;
            }

            selectedContracts.clearState();
            selectedContracts.putValues("contracts", sortedContracts);
        }

        String transactionType = appReqBlock.getReqParm("transactionType");
        formBean.putValue("transactionType", transactionType);

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return FILTER_ALLOCATIONS_DIALOG;
    }

    protected String showFilterAllocationDetail(AppReqBlock appReqBlock) throws Exception
    {
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();

        PageBean formBean = appReqBlock.getFormBean();

        String rowId = formBean.getValue("rowId");

        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        PageBean selectedContracts = contractTransactionSessionBean.getPageBean("selectedContracts");

        String[] contracts = selectedContracts.getValues("contracts");

        String[] tokenizedContract = Util.fastTokenizer(contracts[Integer.parseInt(rowId)], ",");
        formBean.putValue("segmentFK", tokenizedContract[1]);
        formBean.putValue("selectedSegmentPK", tokenizedContract[1]);

        //long totalDepositsForContract = 0;
        EDITBigDecimal totalDepositsForContract = new EDITBigDecimal();
        DepositsVO[] trxDepositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("trxDepositsVOs");

        if (trxDepositsVOs != null)
        {
            for (int i = 0; i < trxDepositsVOs.length; i++)
            {
                if ((trxDepositsVOs[i].getSegmentFK() + "").equals(tokenizedContract[1]))
                {
                    //totalDepositsForContract += Util.roundToNearestCent(trxDepositsVOs[i].getAmountReceived());
                    //totalDepositsForContract += Util.roundToNearestCent(trxDepositsVOs[i].getAmountReceived());
                    totalDepositsForContract = totalDepositsForContract.addEditBigDecimal(Util.roundToNearestCent(trxDepositsVOs[i].getAmountReceived()));
                }
            }
        }
        else
        {
            trxDepositsVOs = contractLookup.composeDepositsBySegmentPKAndEDITTrxPK(Long.parseLong(tokenizedContract[1]), formBean.getValue("editTrxPK"));

            if (trxDepositsVOs != null)
            {
                appReqBlock.getHttpSession().setAttribute("trxDepositsVOs", trxDepositsVOs);

                for (int i = 0; i < trxDepositsVOs.length; i++)
                {
                    if ((trxDepositsVOs[i].getSegmentFK() + "").equals(tokenizedContract[1]))
                    {
                        //SRAMAM 09/2004 DOUBLE2DECIMAL
                        //totalDepositsForContract += Util.roundToNearestCent( new EDITBigDecimal(trxDepositsVOs[i].getAmountReceived()));
                        totalDepositsForContract = totalDepositsForContract.addEditBigDecimal(Util.roundToNearestCent(new EDITBigDecimal(trxDepositsVOs[i].getAmountReceived())));
                    }
                }
            }
        }

        formBean.putValue("filterAllocPct", tokenizedContract[6]);
        formBean.putValue("filterAllocDollars", tokenizedContract[7]);
        formBean.putValue("amountReceived", tokenizedContract[8]);
        formBean.putValue("amountUsed", totalDepositsForContract + "");
        formBean.putValue("costBasis", tokenizedContract[10]);
        formBean.putValue("deathStatus", tokenizedContract[11]);
        formBean.putValue("payeeIndStatus", tokenizedContract[12]);
        formBean.putValue("investmentIndStatus", tokenizedContract[13]);
        formBean.putValue("claimStatus", tokenizedContract[14]);

        String transactionType = appReqBlock.getReqParm("transactionType");
        formBean.putValue("transactionType", transactionType);

        formBean.putValue("filterMessage", "Keep Page");
        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return FILTER_ALLOCATIONS_DIALOG;
    }

    protected String saveFilterAllocToSummary(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        PageBean formBean = appReqBlock.getFormBean();

        String rowId = formBean.getValue("rowId");
        String filterAllocPct = formBean.getValue("filterAllocPct");

        if (!Util.isANumber(filterAllocPct))
        {
            filterAllocPct = "0";
        }

        String filterAllocDollars = formBean.getValue("filterAllocDollars");

        if (!Util.isANumber(filterAllocDollars))
        {
            filterAllocDollars = "0";
        }

        String filterDeathStatus = formBean.getValue("deathStatus");
        String filterClaimStatus = formBean.getValue("claimStatus");
        String filterPayeeIndStatus = formBean.getValue("payeeInd");
        String filterInvestmentIndStatus = formBean.getValue("investmentInd");
        String filterAmountReceived = formBean.getValue("amountReceived");
//        String filterOptionCode = formBean.getValue("optionCode");

        if (!Util.isANumber(filterAmountReceived))
        {
            filterAmountReceived = "0";
        }

        String filterSuspenseAmt = formBean.getValue("amountUsed");

        if (!Util.isANumber(filterSuspenseAmt))
        {
            filterSuspenseAmt = "0";
        }

        String filterCostBasis = formBean.getValue("costBasis");

        if (!Util.isANumber(filterCostBasis))
        {
            filterCostBasis = "0";
        }

        if (Util.isANumber(filterDeathStatus))
        {
            filterDeathStatus = codeTableWrapper.getCodeTableEntry(Long.parseLong(filterDeathStatus)).getCode();
        }
        else
        {
            filterDeathStatus = "";
        }

        if (Util.isANumber(filterClaimStatus))
        {
            filterClaimStatus = codeTableWrapper.getCodeTableEntry(Long.parseLong(filterClaimStatus)).getCode();
        }
        else
        {
            filterClaimStatus = "";
        }

        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        PageBean selectedContracts = contractTransactionSessionBean.getPageBean("selectedContracts");

        String[] contracts = selectedContracts.getValues("contracts");
        String[] tokenizedContract = Util.fastTokenizer(contracts[Integer.parseInt(rowId)], ",");
        String contractNumber = tokenizedContract[0];
        String segmentPK = tokenizedContract[1];
        String coStructurePK = tokenizedContract[2];
        String segmentName = tokenizedContract[3];
        String segmentFK = tokenizedContract[4];
        String optionCode = tokenizedContract[5];
        String allocationPct = tokenizedContract[6];
        String allocationDollars = tokenizedContract[7];
        String amountReceived = tokenizedContract[8];
        String suspenseAmt = tokenizedContract[9];
        String costBasis = tokenizedContract[10];
        String deathStatus = tokenizedContract[11];
        String payeeIndStatus = tokenizedContract[12];
        String investmentIndStatus = tokenizedContract[13];
        String claimStatus = tokenizedContract[14];
        selectedContracts.clearState();
        allocationPct = filterAllocPct;
        allocationDollars = filterAllocDollars;
        amountReceived = filterAmountReceived;
        suspenseAmt = filterSuspenseAmt;
        costBasis = filterCostBasis;
        deathStatus = filterDeathStatus;
        payeeIndStatus = filterPayeeIndStatus;
        investmentIndStatus = filterInvestmentIndStatus;
        claimStatus = filterClaimStatus;
        contracts[Integer.parseInt(rowId)] = contractNumber + "," + segmentPK + "," + coStructurePK + "," + segmentName + "," + segmentFK + "," + optionCode + "," + allocationPct + "," + allocationDollars + "," + amountReceived + "," + suspenseAmt + "," + costBasis + "," + deathStatus + "," + payeeIndStatus + "," + investmentIndStatus + "," + claimStatus;
        selectedContracts.putValues("contracts", contracts);
        formBean.putValue("filterMessage", "Keep Page");
        formBean.putValue("filterAllocPct", filterAllocPct);
        formBean.putValue("deathStatus", filterDeathStatus);
        formBean.putValue("claimStatus", filterClaimStatus);

        String transactionType = appReqBlock.getReqParm("transactionType");
        formBean.putValue("transactionType", transactionType);

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return FILTER_ALLOCATIONS_DIALOG;
    }

    protected String showTrxSuspenseDialog(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");

        String currentPage = stateBean.getValue("currentPage");
        stateBean.putValue("previousPage", currentPage);
        stateBean.putValue("currentPage", TRX_SUSPENSE_DIALOG);

        PageBean appFormBean = appReqBlock.getFormBean();

        SessionBean transactions = appReqBlock.getSessionBean("contractTransactions");

        SessionBean transactionsClone = (SessionBean) Util.deepClone(transactions);

        String beginScrollingTrxPK = (String) appReqBlock.getFormBean().getValue("beginScrollingTrxPK");

        if ((beginScrollingTrxPK == null) || beginScrollingTrxPK.equals(""))
        {
            beginScrollingTrxPK = "0";
        }

        String endScrollingTrxPK = (String) appReqBlock.getFormBean().getValue("endScrollingTrxPK");

        if ((endScrollingTrxPK == null) || endScrollingTrxPK.equals(""))
        {
            endScrollingTrxPK = "0";
        }

        String scrollingTrxPageSize = (String) appReqBlock.getFormBean().getValue("scrollingTrxPageSize");

        if ((scrollingTrxPageSize == null) || scrollingTrxPageSize.equals(""))
        {
            scrollingTrxPageSize = "0";
        }

        SessionBean contractTransSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        PageBean selectedTrx = contractTransSessionBean.getPageBean("formBean");

        appReqBlock.addSessionBean("contractTransactionsClone", transactionsClone);

        String trxAmount = selectedTrx.getValue("amount");

        String amtRecvd = "0.00";
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();
        long segmentPK = Long.parseLong(appFormBean.getValue("selectedSegmentPK"));
        String editTrxPK = appFormBean.getValue("editTrxPK");

        EDITBigDecimal totalDepositsForContract = new EDITBigDecimal();
        DepositsVO[] trxDepositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("trxDepositsVOs");

        if (trxDepositsVOs != null)
        {
            for (int i = 0; i < trxDepositsVOs.length; i++)
            {
                if (trxDepositsVOs[i].getSegmentFK() == segmentPK)
                {
                    totalDepositsForContract = totalDepositsForContract.addEditBigDecimal(Util.roundToNearestCent(trxDepositsVOs[i].getAmountReceived()));
                }
            }
        }
        else
        {
            trxDepositsVOs = contractLookup.composeDepositsBySegmentPKAndEDITTrxPK(segmentPK, editTrxPK);

            if (trxDepositsVOs != null)
            {
                appReqBlock.getHttpSession().setAttribute("trxDepositsVOs", trxDepositsVOs);

                for (int i = 0; i < trxDepositsVOs.length; i++)
                {
                    if (trxDepositsVOs[i].getSegmentFK() == segmentPK)
                    {
                        totalDepositsForContract = totalDepositsForContract.addEditBigDecimal(Util.roundToNearestCent(trxDepositsVOs[i].getAmountReceived()));
                    }
                }
            }
            else
            {
                appReqBlock.getHttpSession().removeAttribute("trxDepositsVOs");
                appReqBlock.getHttpSession().removeAttribute("currentTrxDepositVO");
            }
        }

        String amtUsed = appFormBean.getValue("amountUsed");

        if (amtUsed.equals(""))
        {
            amtUsed = totalDepositsForContract.toString();
        }

        String amtNeeded = (new EDITBigDecimal(trxAmount).subtractEditBigDecimal(new EDITBigDecimal(amtRecvd)).subtractEditBigDecimal(amtUsed)).toString();

        appReqBlock.getHttpServletRequest().setAttribute("scrollingTrxPageSize", scrollingTrxPageSize);
        appReqBlock.getHttpServletRequest().setAttribute("beginScrollingTrxPK", beginScrollingTrxPK);
        appReqBlock.getHttpServletRequest().setAttribute("endScrollingTrxPK", endScrollingTrxPK);

        appFormBean.putValue("amountNeeded", amtNeeded);
        appFormBean.putValue("amountUsed", amtUsed);

        appReqBlock.getHttpServletRequest().setAttribute("formBean", appFormBean);

        SessionBean contractTransSessionClone = (SessionBean) Util.deepClone(contractTransSessionBean);

        appReqBlock.addSessionBean("contractTransSessionClone", contractTransSessionClone);

        Segment segment = Segment.findByPK(new Long(segmentPK));

        new TransactionSuspenseTableModel(segment.getContractNumber(), appReqBlock);

        return TRX_SUSPENSE_DIALOG;
    }

    private String showTrxDepositDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        PageBean appFormBean = appReqBlock.getFormBean();

        String selectedDepositsPK = appFormBean.getValue("selectedDepositsPK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedDepositsPK", selectedDepositsPK);

        String suspenseFK = appFormBean.getValue("suspenseFK");
        if (Util.isANumber(suspenseFK))
        {
            Suspense activeSuspense = Suspense.findByPK(new Long(suspenseFK));

            appReqBlock.getHttpServletRequest().setAttribute("activeSuspense", activeSuspense);
        }

        appReqBlock.getHttpServletRequest().setAttribute("formBean", appFormBean);

        Segment segment = Segment.findByPK(new Long( Long.parseLong(appFormBean.getValue("selectedSegmentPK"))));

        new TransactionSuspenseTableModel(segment.getContractNumber(), appReqBlock);

        return TRX_SUSPENSE_DIALOG;
    }

    protected String showSelectedTrxSuspense(AppReqBlock appReqBlock) throws Exception
    {
        String filter = appReqBlock.getReqParm("filter");
        String filterMessage = appReqBlock.getReqParm("filterMessage");
        String segmentFK = appReqBlock.getReqParm("segmentFK");
        String selectedSegmentPK = appReqBlock.getReqParm("selectedSegmentPK");
        String editTrxPK = appReqBlock.getReqParm("editTrxPK");
        String segmentName = appReqBlock.getReqParm("segmentName");
        String filterAllocPct = appReqBlock.getReqParm("filterAllocPct");
        String filterAllocDollars = appReqBlock.getReqParm("filterAllocDollars");
        String costBasis = appReqBlock.getReqParm("costBasis");
        String amountReceived = appReqBlock.getReqParm("amountReceived");
        String payeeIndStatus = appReqBlock.getReqParm("payeeIndStatus");
        String investmentIndStatus = appReqBlock.getReqParm("investmentIndStatus");
        String deathStatusEnabled = appReqBlock.getReqParm("deathStatusEnabled");
        String deathStatus = appReqBlock.getReqParm("deathStatus");
        String transactionType = appReqBlock.getReqParm("transactionType");
        String rowId = appReqBlock.getReqParm("rowId");
        String productStructureId = appReqBlock.getReqParm("companyStructureId");
        String amountNeeded = appReqBlock.getReqParm("amountNeeded");
        String amountUsed = appReqBlock.getReqParm("amountUsed");
        String taxYear = appReqBlock.getReqParm("taxYear");
        String depositType = appReqBlock.getReqParm("depositType");

        Segment segment = Segment.findByPK(new Long(Long.parseLong(appReqBlock.getReqParm("selectedSegmentPK"))));

        String selectedSuspensePK = new TransactionSuspenseTableModel(segment.getContractNumber(), appReqBlock).getSelectedRowId();

        Suspense activeSuspense = Suspense.findByPK(new Long(selectedSuspensePK));

        appReqBlock.getHttpServletRequest().setAttribute("activeSuspense", activeSuspense);

        String selectedDepositsPK = appReqBlock.getReqParm("selectedDepositsPK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedDepositsPK", selectedDepositsPK);

        PageBean formBean = new PageBean();
        formBean.putValue("filter", filter);
        formBean.putValue("filterMessage", filterMessage);
        formBean.putValue("segmentFK", segmentFK);
        formBean.putValue("selectedSegmentPK", selectedSegmentPK);
        formBean.putValue("editTrxPK", editTrxPK);
        formBean.putValue("segmentName", segmentName);
        formBean.putValue("filterAllocPct", filterAllocPct);
        formBean.putValue("filterAllocDollars", filterAllocDollars);
        formBean.putValue("costBasis", costBasis);
        formBean.putValue("amountReceived", amountReceived);
        formBean.putValue("payeeIndStatus", payeeIndStatus);
        formBean.putValue("investmentIndStatus", investmentIndStatus);
        formBean.putValue("deathStatusEnabled", deathStatusEnabled);
        formBean.putValue("deathStatus", deathStatus);
        formBean.putValue("transactionType", transactionType);
        formBean.putValue("rowId", rowId);
        formBean.putValue("companyStructureId", productStructureId);
        formBean.putValue("amountNeeded", amountNeeded);
        formBean.putValue("amountUsed", amountUsed);
        formBean.putValue("taxYear", taxYear);
        if (Util.isANumber(depositType))
        {
            depositType = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(depositType)).getCode();
            formBean.putValue("depositType", depositType);
        }

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return TRX_SUSPENSE_DIALOG;
    }

    private String saveTrxSuspenseSelectionToSummary(AppReqBlock appReqBlock) throws Exception
    {
        PageBean appFormBean = appReqBlock.getFormBean();

        String segmentPK = appFormBean.getValue("selectedSegmentPK");

        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        String selectedDepositsPK = appFormBean.getValue("selectedDepositsPK");
        String suspenseFK = appFormBean.getValue("suspenseFK");
        String taxYear = appFormBean.getValue("taxYear");

        Suspense suspense = Suspense.findByPK(new Long(suspenseFK));
        suspense.setPendingSuspenseAmount(suspense.getSuspenseAmount());

        DepositsVO[] depositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("trxDepositsVOs");
        DepositsVO depositsVO = null;
        boolean depositExisted = false;
        boolean suspenseAlreadySelected = false;

        if (depositsVOs != null)
        {
            for (int e = 0; e < depositsVOs.length; e++)
            {
                if ((depositsVOs[e].getDepositsPK() + "").equals(selectedDepositsPK))
                {
                    depositsVO = depositsVOs[e];
                    depositExisted = true;
                }

                if ((depositsVOs[e].getSuspenseFK() + "").equals(suspenseFK))
                {
                    suspenseAlreadySelected = true;
                }
            }
        }

        if (suspenseAlreadySelected)
        {
            appReqBlock.getHttpServletRequest().setAttribute("trxSuspenseMessage", "The Selected Suspense Has Already Been Added To This Transaction");
        }
        else
        {
            if (!depositExisted)
            {
                depositsVO = new DepositsVO();

                contract.business.Contract contractComponent = new contract.component.ContractComponent();
                depositsVO.setDepositsPK(contractComponent.getNextAvailableKey() * -1);
                depositsVO.setSegmentFK(Long.parseLong(segmentPK));
            }

            String depositType = appFormBean.getValue("depositType");

            if (Util.isANumber(depositType))
            {
                depositType = codeTableWrapper.getCodeTableEntry(Long.parseLong(depositType)).getCode();
            }
            else
            {
                depositType = "";
            }

            depositsVO.setDepositTypeCT(Util.initString(depositType, null));
            depositsVO.setOldCompany(Util.initString(appFormBean.getValue("oldCompany"), null));
            depositsVO.setOldPolicyNumber(Util.initString(appFormBean.getValue("oldPolicyNumber"), null));

            String exchangeDuration = Util.initString(appFormBean.getValue("exchangeDuration"), "0");
            depositsVO.setExchangeDuration(Integer.parseInt(exchangeDuration));

            String exchangeIssueAge = Util.initString(appFormBean.getValue("exchangeIssueAge"), "0");
            depositsVO.setExchangeIssueAge(Integer.parseInt(exchangeIssueAge));

            String exchangePolicyEffDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(appFormBean.getValue("exchangePolicyEffectiveDate"));

                depositsVO.setExchangePolicyEffectiveDate(exchangePolicyEffDate);

            String anticipatedAmount = appFormBean.getValue("anticipatedAmount");

            if (Util.isANumber(anticipatedAmount))
            {
                depositsVO.setAnticipatedAmount(new EDITBigDecimal(anticipatedAmount).getBigDecimal());
            }
            else
            {
                depositsVO.setAnticipatedAmount(new EDITBigDecimal().getBigDecimal());
            }

            depositsVO.setAmountReceived(suspense.getSuspenseAmount().getBigDecimal());

//            String costBasis = appFormBean.getValue("costBasis");

            String dateReceivedDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(appFormBean.getValue("dateReceivedDate"));

            depositsVO.setDateReceived(dateReceivedDate);

            if (Util.isANumber(suspenseFK))
            {
                depositsVO.setSuspenseFK(Long.parseLong(suspenseFK));
            }
            else
            {
                depositsVO.setSuspenseFK(0);
            }

            if (taxYear.equals("") && dateReceivedDate != null)
            {
                taxYear = new EDITDate(dateReceivedDate).getFormattedYear();
            }
//            else if (taxYear.equals("") && dateReceivedYear.equals(""))
//            {
//                taxYear = EDITDate.DEFAULT_ZERO_YEAR;
//            }

            depositsVO.setTaxYear(Integer.parseInt(taxYear));

            String preTEFRAGain = Util.initString(appFormBean.getValue("preTEFRAGain"), "0");
            String preTEFRAAmount = Util.initString(appFormBean.getValue("preTEFRAAmount"), "0");
            String postTEFRAGain = Util.initString(appFormBean.getValue("postTEFRAGain"), "0");
            String postTEFRAAmount = Util.initString(appFormBean.getValue("postTEFRAAmount"), "0");

            depositsVO.setPreTEFRAGain(new EDITBigDecimal(preTEFRAGain).getBigDecimal());
            depositsVO.setPreTEFRAAmount(new EDITBigDecimal(preTEFRAAmount).getBigDecimal());
            depositsVO.setPostTEFRAGain(new EDITBigDecimal(postTEFRAGain).getBigDecimal());
            depositsVO.setPostTEFRAAmount(new EDITBigDecimal(postTEFRAAmount).getBigDecimal());
            depositsVO.setExchangeLoanAmount(new EDITBigDecimal(Util.initString(appFormBean.getValue("exchangeLoanAmount"), "0")).getBigDecimal());


            if (!depositExisted)
            {
                List depositVector = new ArrayList();

                if (depositsVOs != null)
                {
                    for (int j = 0; j < depositsVOs.length; j++)
                    {
                        depositVector.add(depositsVOs[j]);
                    }
                }

                depositVector.add(depositsVO);

                depositsVOs = (DepositsVO[]) depositVector.toArray(new DepositsVO[depositVector.size()]);

                appReqBlock.getHttpSession().setAttribute("trxDepositsVOs", depositsVOs);
            }

            UserSession userSession = appReqBlock.getUserSession();

            userSession.setDepositsVO(depositsVOs);

            appReqBlock.getHttpSession().removeAttribute("currentTrxDepositVO");

            if (!depositExisted)
            {
                String amountUsed = appFormBean.getValue("amountUsed");
                String amountNeeded = appFormBean.getValue("amountNeeded");
                amountUsed = (new EDITBigDecimal(amountUsed).addEditBigDecimal(new EDITBigDecimal(depositsVO.getAmountReceived()))).toString();
                amountNeeded = (new EDITBigDecimal(amountNeeded).subtractEditBigDecimal(new EDITBigDecimal(depositsVO.getAmountReceived()))).toString();
                appFormBean.putValue("amountUsed", amountUsed);
                appFormBean.putValue("amountNeeded", amountNeeded);
            }
        }

        appReqBlock.getHttpServletRequest().setAttribute("formBean", appFormBean);

        Segment segment = Segment.findByPK(new Long(segmentPK));

        new TransactionSuspenseTableModel(segment.getContractNumber(), appReqBlock);

        return TRX_SUSPENSE_DIALOG;
    }

    private String closeTrxSuspenseDialog(AppReqBlock appReqBlock)
    {
        PageBean formBean = appReqBlock.getFormBean();
        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return FILTER_ALLOCATIONS_DIALOG;
    }

    private String deleteSelectedDeposit(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String selectedDepositsPK = formBean.getValue("selectedDepositsPK");
        String amountUsed = formBean.getValue("amountUsed");
        String amountNeeded = formBean.getValue("amountNeeded");

        DepositsVO[] depositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("trxDepositsVOs");
        List updatedDeposits = new ArrayList();

        for (int i = 0; i < depositsVOs.length; i++)
        {
            if (!(depositsVOs[i].getDepositsPK() + "").equals(selectedDepositsPK))
            {
                updatedDeposits.add(depositsVOs[i]);
            }
            else
            {
                Suspense suspense = Suspense.findByPK(new Long(depositsVOs[i].getSuspenseFK()));

                if (suspense != null)
                {
                    suspense.setPendingSuspenseAmount(new EDITBigDecimal());
                    Set outSuspense = suspense.getOutSuspenses();

                    Event eventComponent = new EventComponent();
                    if (outSuspense != null)
                    {
                        eventComponent.deleteOutSuspense(outSuspense);
                    }

                    eventComponent.saveSuspenseForPendingAmount(suspense);

                    EDITBigDecimal amountUsedBD = new EDITBigDecimal(amountUsed).subtractEditBigDecimal(depositsVOs[i].getAmountReceived());

                    EDITBigDecimal amountNeededBD = new EDITBigDecimal(amountNeeded).addEditBigDecimal(depositsVOs[i].getAmountReceived());

                    formBean.putValue("amountUsed", amountUsedBD.toString());

                    formBean.putValue("amountNeeded", amountNeededBD.toString());
                }

                new ContractComponent().deleteVO(DepositsVO.class, depositsVOs[i].getDepositsPK(), false);
            }
        }

        if (updatedDeposits.size() > 0)
        {
            appReqBlock.getHttpSession().setAttribute("trxDepositsVOs", (DepositsVO[]) updatedDeposits.toArray(new DepositsVO[updatedDeposits.size()]));
        }
        else
        {
            appReqBlock.getHttpSession().removeAttribute("trxDepositsVOs");
            appReqBlock.getHttpSession().removeAttribute("currentTrxDepositVO");
        }

        appReqBlock.getHttpSession().setAttribute("selectedDepositsPK", "");
        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        Segment segment = Segment.findByPK(new Long( Long.parseLong(formBean.getValue("selectedSegmentPK"))));

        new TransactionSuspenseTableModel(segment.getContractNumber(), appReqBlock);

        return TRX_SUSPENSE_DIALOG;
    }

    private String clearTrxSuspenseFormOnCancel(AppReqBlock appReqBlock) throws Exception
    {
        PageBean appFormBean = appReqBlock.getFormBean();
        appReqBlock.getHttpServletRequest().setAttribute("formBean", appFormBean);

        appReqBlock.getHttpSession().removeAttribute("currentTrxDepositVO");

        Segment segment = Segment.findByPK(new Long( Long.parseLong(appFormBean.getValue("selectedSegmentPK"))));

        new TransactionSuspenseTableModel(segment.getContractNumber(), appReqBlock);

        return TRX_SUSPENSE_DIALOG;
    }

    protected String closeFilterAllocDialog(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        PageBean selectedContracts = contractTransactionSessionBean.getPageBean("selectedContracts");
        PageBean trxFormBean = contractTransactionSessionBean.getPageBean("formBean");
        String trxAmount = trxFormBean.getValue("amount");
        String transactionType = trxFormBean.getValue("transactionType");

        EDITBigDecimal transactionAmount = new EDITBigDecimal();
        if (Util.isANumber(trxAmount))
        {
            transactionAmount = new EDITBigDecimal(trxAmount);
        }

        EDITBigDecimal totalCashReceived = new EDITBigDecimal();

        //        double totalDepositsReceived = 0;
        EDITBigDecimal totalDepositsReceived = new EDITBigDecimal();
        String[] contracts = selectedContracts.getValues("contracts");
        DepositsVO[] trxDepositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("trxDepositsVOs");

        for (int i = 0; i < contracts.length; i++)
        {
            String[] tokenizedContract = Util.fastTokenizer(contracts[i], ",");
            EDITBigDecimal amountReceived = new EDITBigDecimal(tokenizedContract[8]);

            //   totalCashReceived += Util.roundDollars(amountReceived);
            totalCashReceived = totalCashReceived.addEditBigDecimal(Util.roundDollars(amountReceived));

            //            totalAllocPct += Double.parseDouble(tokenizedContract[5]);
            //            totalAllocDollars += Double.parseDouble(tokenizedContract[6]);
        }

        if (trxDepositsVOs != null)
        {
            for (int i = 0; i < trxDepositsVOs.length; i++)
            {
                //totalDepositsReceived += Util.roundDollars(trxDepositsVOs[i].getAmountReceived());
                totalDepositsReceived = totalDepositsReceived.addEditBigDecimal(Util.roundDollars(trxDepositsVOs[i].getAmountReceived()));
            }
        }

        //double totalFilterAllocAmt = Util.roundDollars(totalCashReceived + totalDepositsReceived);
        EDITBigDecimal totalFilterAllocAmt = Util.roundDollars(totalCashReceived.addEditBigDecimal(totalDepositsReceived));

        if (totalFilterAllocAmt.isGT("0") && !totalFilterAllocAmt.isEQ(transactionAmount))
        {
            formBean.putValue("filterMessage", "Cash + Deposits Not Equal to Transaction Amount");
        }
        else
        {
            formBean.putValue("filterMessage", "");
        }

        //        if (totalAllocPct > 0 &&
        //            totalAllocDollars > 0)
        //        {
        //            formBean.putValue("filterMessage", "Cannot Allocate Using Both Dollars and Percent.  Please Re-enter.");
        //        }
        //        else if (totalAllocPct > 0 &&
        //                 totalAllocPct != 1.0)
        //        {
        //            formBean.putValue("filterMessage", "Allocation Percent Must Equal 1.0");
        //        }
        //        else
        //        {
        //            formBean.putValue("filterMessage", "");
        //        }

        formBean.putValue("transactionType", transactionType);
        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return FILTER_ALLOCATIONS_DIALOG;
    }

    protected String closeAndSaveInvestmentAllocations(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        SessionBean contractInvestmentOverrides = appReqBlock.getSessionBean("contractInvestmentOverrides");

        if (contractInvestmentOverrides.hasPageBeans())
        {
            formBean.putValue("investmentIndStatus", "checked");

            Map invAllocHT = contractInvestmentOverrides.getPageBeans();
            Iterator invAllocEnum = invAllocHT.values().iterator();

            contract.business.Contract contractComponent = new contract.component.ContractComponent();

            contract.business.Lookup contractLookup = new contract.component.LookupComponent();

            while (invAllocEnum.hasNext())
            {
                PageBean investmentPageBean = (PageBean) invAllocEnum.next();

                String investmentFK = investmentPageBean.getValue("investmentFK");
                String invAllocFK = investmentPageBean.getValue("investmentAllocationFK");
                String segmentFK = investmentPageBean.getValue("segmentFK");
                String allocationPct = investmentPageBean.getValue("allocationPercent");
                String allocationDollars = investmentPageBean.getValue("allocationDollars");
                String allocationUnits = investmentPageBean.getValue("allocationUnits");

                long investmentPK = 0;

                if (!Util.isANumber(investmentFK) || investmentFK.equals("0"))
                {
                    String filteredFundFK = investmentPageBean.getValue("fundId");

                    InvestmentVO[] investmentVOs = contractLookup.getInvestmentByFilteredFundFKAndSegmentFK(Long.parseLong(filteredFundFK), Long.parseLong(segmentFK));

                    if ((investmentVOs == null) || (investmentVOs.length == 0))
                    {
                        InvestmentVO investmentVO = new InvestmentVO();
                        investmentVO.setInvestmentPK(0);
                        investmentVO.setSegmentFK(Long.parseLong(segmentFK));
                        investmentVO.setFilteredFundFK(Long.parseLong(filteredFundFK));

                        investmentPK = contractComponent.saveInvestmentVO(investmentVO);
                    }
                    else
                    {
                        investmentPK = investmentVOs[0].getInvestmentPK();
                    }

                    investmentPageBean.putValue("investmentFK", investmentPK + "");
                }
                else
                {
                    investmentPK = Long.parseLong(investmentFK);
                }

                InvestmentAllocationVO investmentAllocationVO = new InvestmentAllocationVO();

                if (Util.isANumber(invAllocFK))
                {
                    InvestmentAllocationVO[] invAllocVOs = contractLookup.findInvestmentAllocationByInvestmentAllocationPK(Long.parseLong(invAllocFK), true, new ArrayList());
                    investmentAllocationVO = invAllocVOs[0];
                }
                else
                {
                    investmentAllocationVO.setInvestmentAllocationPK(0);
                    investmentAllocationVO.setInvestmentFK(investmentPK);
                    investmentAllocationVO.setOverrideStatus("O");
                }

                if (Util.isANumber(allocationPct))
                {
                    investmentAllocationVO.setAllocationPercent(new EDITBigDecimal(allocationPct).getBigDecimal());
                }
                else
                {
                    investmentAllocationVO.setAllocationPercent(new EDITBigDecimal().getBigDecimal());
                }

                if (Util.isANumber(allocationDollars))
                {
                    investmentAllocationVO.setDollars(new EDITBigDecimal(allocationDollars).getBigDecimal());
                }
                else
                {
                    investmentAllocationVO.setDollars(new EDITBigDecimal().getBigDecimal());
                }

                if (Util.isANumber(allocationUnits))
                {
                    investmentAllocationVO.setUnits(new EDITBigDecimal(allocationUnits).getBigDecimal());
                }
                else
                {
                    investmentAllocationVO.setUnits(new EDITBigDecimal().getBigDecimal());
                }

                long investmentAllocationPK = contractComponent.saveInvestmentAllocationVO(investmentAllocationVO);
                investmentPageBean.putValue("investmentAllocationFK", investmentAllocationPK + "");
            }
        }

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return FILTER_ALLOCATIONS_DIALOG;
    }

    protected String showPayeeOverrideDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        client.business.Lookup clientLookup = new client.component.LookupComponent();

        PageBean formBean = appReqBlock.getFormBean();

//        String contractClientFK = formBean.getValue("contractClientFK");
        String segmentFK = formBean.getValue("segmentFK");
        String clientDetailPK = formBean.getValue("clientDetailPK");
        String filterMessage = formBean.getValue("filterMessage");
        String rowId = formBean.getValue("rowId");
        String selectedSegmentPK = formBean.getValue("selectedSegmentPK");

        SessionBean contractPayeeOverrides = appReqBlock.getSessionBean("contractPayeeOverrides");

        String key = segmentFK + clientDetailPK;

        PageBean payeeOverrideBean = contractPayeeOverrides.getPageBean(key);
//        String clientDetailPK = payeeOverrideBean.getValue("clientDetailPK");
        String taxId = payeeOverrideBean.getValue("taxId");
        String allocationPercent = Util.initString(payeeOverrideBean.getValue("allocationPct"), "");
        if (allocationPercent. equals(""))
        {
            allocationPercent = Util.initString(payeeOverrideBean.getValue("allocationPercent"), "");
        }

        List voExclusionVector = new ArrayList();
        voExclusionVector.add(ClientAddressVO.class);
        voExclusionVector.add(TaxInformationVO.class);
        voExclusionVector.add(ClientRoleVO.class);

        ClientDetailVO[] clientDetailVOs = clientLookup.findClientDetailByClientPK(Long.parseLong(clientDetailPK), true, voExclusionVector);

        formBean.addToValues(payeeOverrideBean);

        String transactionType = appReqBlock.getReqParm("transactionType");
        formBean.putValue("transactionType", transactionType);
        formBean.putValue("filterMessage", filterMessage);
        formBean.putValue("rowId", rowId);
        formBean.putValue("selectedSegmentPK", selectedSegmentPK);

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);
        appReqBlock.getHttpSession().setAttribute(taxId, clientDetailVOs);
        appReqBlock.getHttpSession().setAttribute("selectedClientDetailVO", clientDetailVOs[0]);
        appReqBlock.getHttpSession().setAttribute("selectedAllocationPercent", allocationPercent);

        return CONTRACT_TRANS_PAYEE_DIALOG;
    }

    protected String updateContractClient(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String segmentFK = formBean.getValue("segmentFK");
        String contractClientFK = formBean.getValue("contractClientFK");
        String clientDetailPK = formBean.getValue("clientDetailPK");

        ClientDetailVO clientDetailVO = (ClientDetailVO)appReqBlock.getHttpSession().getAttribute("selectedClientDetailVO");
        if (clientDetailPK.equals(""))
        {
            clientDetailPK = clientDetailVO.getClientDetailPK() + "";

        }

        String effectiveDate = (String)appReqBlock.getHttpSession().getAttribute("selectedEffectiveDate");
        String allocationPercent = formBean.getValue("allocationPercent");

        SessionBean contractPayeeOverrides = appReqBlock.getSessionBean("contractPayeeOverrides");

        if (contractClientFK.equals(""))
        {
            contract.business.Contract contractComponent = new contract.component.ContractComponent();
            ContractClient contractClient = ContractClient.findBy_SegmentPK_ClientDetailPK_MaxTerminationDate(new Long(segmentFK), new Long(clientDetailPK));
            Long contractClientKey = null;

            if (contractClient == null)
            {
                contractClientKey = new Long(contractComponent.getNextAvailableKey() * -1);
            }
            else
            {
                contractClientKey = contractClient.getContractClientPK();
        }

            String roleType = null;
            Long clientRolePK = new Long(0);

            if (contractClientKey.longValue() > 0)
            {
                roleType = contractClient.getClientRole().getRoleTypeCT();
                clientRolePK = contractClient.getClientRole().getClientRolePK();
            }
            else
        {
                roleType = ClientRole.ROLETYPECT_PAYEE;
            }


            formBean.putValue("contractClientFK", contractClientKey + "");
            formBean.putValue("clientRolePK", clientRolePK + "");
            formBean.putValue("roleType", roleType);
            formBean.putValue("editTrxPK", "0");
        }

        String key = segmentFK + clientDetailPK;

        formBean.putValue("lastName", formBean.getValue("lastName"));
        formBean.putValue("firstName", formBean.getValue("firstName"));
        formBean.putValue("middleName", formBean.getValue("middleName"));
        formBean.putValue("corporateName", formBean.getValue("corporateName"));
        formBean.putValue("taxId", formBean.getValue("taxId"));
        formBean.putValue("clientDetailPK", clientDetailVO.getClientDetailPK() + "");
        formBean.putValue("allocationPercent", allocationPercent);
        formBean.putValue("splitEqualInd", Util.initString(formBean.getValue("splitEqualInd"), "N"));
        formBean.putValue("ccEffectiveDate", effectiveDate);
        formBean.putValue("clientDetailPK", clientDetailPK);
        formBean.putValue("filterMessage", formBean.getValue("filterMessage"));
        formBean.putValue("rowId", formBean.getValue("rowId"));
        formBean.putValue("selectedSegmentPK", formBean.getValue("selectedSegmentPK"));


        if (contractPayeeOverrides.hasPageBeans())
        {
            formBean.putValue("payeeIndStatus", "checked");
        }

        String transactionType = appReqBlock.getReqParm("transactionType");
        formBean.putValue("transactionType", transactionType);

        contractPayeeOverrides.putPageBean(key, formBean);
        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);
        appReqBlock.getHttpSession().setAttribute("selectedAllocationPercent", allocationPercent);

        updateWithholdingOverride(appReqBlock);

        appReqBlock.getHttpSession().setAttribute("clientDetailVOs", null);

        return CONTRACT_TRANS_PAYEE_DIALOG;
    }


    protected String addContractClient(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
        String taxId = formBean.getValue("taxId");
        String filterMessage = formBean.getValue("filterMessage");
        String selectedSegmentPK = formBean.getValue("selectedSegmentPK");
        String rowId = formBean.getValue("rowId");
        appReqBlock.getHttpSession().removeAttribute(taxId);
        formBean.putValue("taxId", "");
        formBean.putValue("allocationPercent", "");
        formBean.putValue("splitEqualInd", "N");
        formBean.putValue("filterMessage", filterMessage);
        formBean.putValue("rowId", rowId);
        formBean.putValue("selectedSegmentPK", selectedSegmentPK);

        appReqBlock.getHttpSession().setAttribute("clientDetailVOs", null);
        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return ADD_PAYEE_OVERRIDE_DIALOG;
    }

    protected String cancelContractClient(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String segmentFK = formBean.getValue("segmentFK");
        String contractClientFK = formBean.getValue("contractClientFK");
        String filterMessage = formBean.getValue("filterMessage");
        String rowId = formBean.getValue("rowId");
        String selectedSegmentPK = formBean.getValue("selectedSegmentPK");

        appReqBlock.getHttpSession().removeAttribute("selectedClientDetailVO");
        appReqBlock.getHttpSession().removeAttribute("selectedAllocationPercent");
        appReqBlock.getHttpSession().removeAttribute("selectedEffectiveDate");

        SessionBean contractPayeeOverrides = appReqBlock.getSessionBean("contractPayeeOverrides");

        String key = segmentFK + contractClientFK;

        if (contractPayeeOverrides.hasPageBeans())
        {
            formBean.putValue("payeeIndStatus", "unchecked");
        }

        String transactionType = appReqBlock.getReqParm("transactionType");
        formBean.putValue("transactionType", transactionType);
        formBean.putValue("filterMessage", filterMessage);
        formBean.putValue("rowId", rowId);
        formBean.putValue("selectedSegmentPK", selectedSegmentPK);

        contractPayeeOverrides.removePageBean(key);
//        if (!contractPayeeOverrides.hasDisplayValues())
//        {
//            appReqBlock.getHttpSession().removeAttribute("formBean");
//        }

        return CONTRACT_TRANS_PAYEE_DIALOG;
    }
    /**
     * Create the payee override/contractClientAllocationOverride
     * @param appReqBlock
     * @return
     */
    private String saveSelectedClientForPayeeOvrd(AppReqBlock appReqBlock)
    {
        PageBean formBean = appReqBlock.getFormBean();
        long selectedClientDetailPK = Long.parseLong(formBean.getValue("selectedClientDetailPK"));
        ClientDetailVO[] clientDetailVOs = (ClientDetailVO[])appReqBlock.getHttpSession().getAttribute("clientDetailVOs");

        String allocationPercent = formBean.getValue("allocationPercent");
        String effectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("effectiveDate"));

        if (effectiveDate == null)
        {
            effectiveDate = new EDITDate().getFormattedDate();
        }

        for (int i = 0; i < clientDetailVOs.length; i++)
        {
            if (selectedClientDetailPK == clientDetailVOs[i].getClientDetailPK())
            {
                ClientDetailVO clientDetailVO = clientDetailVOs[i];
                appReqBlock.getHttpSession().setAttribute("selectedClientDetailVO", clientDetailVO);
                appReqBlock.getHttpSession().setAttribute("selectedAllocationPercent", allocationPercent);
                appReqBlock.getHttpSession().setAttribute("selectedEffectiveDate", effectiveDate);
                break;
            }
        }

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return CONTRACT_TRANS_PAYEE_DIALOG;
    }

    protected String deleteContractClient(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
        String segmentFK = formBean.getValue("segmentFK");
        String contractClientFK = formBean.getValue("contractClientFK");
        String filterMessage = formBean.getValue("filterMessage");
        String rowId = formBean.getValue("rowId");
        String selectedSegmentPK = formBean.getValue("selectedSegmentPK");

        String key = segmentFK + contractClientFK;

        SessionBean contractPayeeOverrides = appReqBlock.getSessionBean("contractPayeeOverrides");

        PageBean payeeOverrideBean = contractPayeeOverrides.getPageBean(key);

        payeeOverrideBean.putValue("status", "deleted");

        formBean.putValue("contractClientFK", "");
        formBean.putValue("allocationPercent", "");
        formBean.putValue("splitEqual", "N");
        formBean.putValue("taxId", "");
        formBean.putValue("lastName", "");
        formBean.putValue("firstName", "");
        formBean.putValue("middleName", "");
        formBean.putValue("corporateName", "");
        formBean.putValue("clientDetailPK", "");
        formBean.putValue("contractClientAllocationOverridePK", "");
        formBean.putValue("withholdingOverridePK", "");
        formBean.putValue("contractClientAllocationFK", "");
        formBean.putValue("withholdingFK", "");
        formBean.putValue("ccEffectiveDate", "");

        String transactionType = appReqBlock.getReqParm("transactionType");
        formBean.putValue("transactionType", transactionType);
        formBean.putValue("filterMessage", filterMessage);
        formBean.putValue("rowId", rowId);
        formBean.putValue("selectedSegmentPK", selectedSegmentPK);

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return CONTRACT_TRANS_PAYEE_DIALOG;
    }

    protected String createNewContractClientOverrides(AppReqBlock appReqBlock) throws Exception
    {

        PageBean formBean = appReqBlock.getFormBean();

//        role.business.Lookup roleLookup = new role.component.LookupComponent();
        role.business.Role roleComponent = new role.component.RoleComponent();
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();
        contract.business.Contract contractComponent = new contract.component.ContractComponent();

        SessionBean contractPayeeOverrides = appReqBlock.getSessionBean("contractPayeeOverrides");
        ClientDetailVO clientDetailVO = (ClientDetailVO)appReqBlock.getHttpSession().getAttribute("selectedClientDetailVO");

        if (contractPayeeOverrides.hasPageBeans())
        {
            formBean.putValue("payeeIndStatus", "checked");

            // update pagebean stored in sessionbean also otherwise when we select the summary row on
            // filter allocation dialog we are loosing payee override status value.
            SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
            PageBean selectedContracts = contractTransactionSessionBean.getPageBean("selectedContracts");

            String[] contracts = selectedContracts.getValues("contracts");
            String rowId = formBean.getValue("rowId");

            if (Util.isANumber(rowId))
            {
                String[] tokenizedContract = Util.fastTokenizer(contracts[Integer.parseInt(rowId)], ",");
                // 11 = payeeIndStatus see method <CODE>showFilterAllocationDialog</CODE>
                // update payeeIndStatus in the session also.
                String contractNumber = tokenizedContract[0];
                String segmentPK = tokenizedContract[1];
                String coStructurePK = tokenizedContract[2];
                String segmentName = tokenizedContract[3];
                String segmentFK = tokenizedContract[4];
                String optionCode = tokenizedContract[5];
                String allocationPct = tokenizedContract[6];
                String allocationDollars = tokenizedContract[7];
                String amountReceived = tokenizedContract[8];
                String suspenseAmt = tokenizedContract[9];
                String costBasis = tokenizedContract[10];
                String deathStatus = tokenizedContract[11];
                String payeeIndStatus = "checked";
                String investmentIndStatus = tokenizedContract[13];
                String claimStatus = tokenizedContract[14];
                contracts[Integer.parseInt(rowId)] = contractNumber + "," + segmentPK + "," + coStructurePK + "," + segmentName + "," + segmentFK + "," + optionCode + "," +allocationPct + "," + allocationDollars + "," + amountReceived + "," + suspenseAmt + "," + costBasis + "," + deathStatus + "," + payeeIndStatus + "," + investmentIndStatus + "," + claimStatus;
                selectedContracts.putValues("contracts", contracts);
            }
        }

        Map payeeOverridesHT = contractPayeeOverrides.getPageBeans();
        Iterator payeeOverridesEnum = payeeOverridesHT.values().iterator();

        while (payeeOverridesEnum.hasNext())
        {
            PageBean payeeOverridePB = (PageBean) payeeOverridesEnum.next();

            String contractClientFK = Util.initString(payeeOverridePB.getValue("contractClientFK"), "0");
            String contractClientAllocationFK = payeeOverridePB.getValue("contractClientAllocationFK");
//            String contractClientAllocationOverrideFK = payeeOverridePB.getValue("contractClientAllocationOverridePK");
            String clientDetailPK = Util.initString(payeeOverridePB.getValue("clientDetailPK"), "0");
            String withholdingFK = Util.initString(payeeOverridePB.getValue("withholdingFK"), "0");
//            String clientRoleKey = Util.initString(payeeOverridePB.getValue("clientRolePK"), "0");
//            String roleType = payeeOverridePB.getValue("roleType");

//            String withholdingOverridePK = payeeOverridePB.getValue("withholdingOverridePK");
            String segmentFK = payeeOverridePB.getValue("segmentFK");
            String allocationPercent = Util.initString(payeeOverridePB.getValue("allocationPercent"), "0");
            String fedWithholdingType = Util.initString(payeeOverridePB.getValue("fedWithholdingType"), "");
            String stateWithholdingType = Util.initString(payeeOverridePB.getValue("stateWithholdingType"), "");
            String cityWithholdingType = Util.initString(payeeOverridePB.getValue("cityWithholdingType"), "");
            String countyWithholdingType = Util.initString(payeeOverridePB.getValue("countyWithholdingType"), "");
            String effectiveDate = Util.initString(payeeOverridePB.getValue("ccEffectiveDate"), null);

            if (effectiveDate == null)
            {
                effectiveDate = new EDITDate().getFormattedDate();
            }

            long clientRolePK = 0;

            if ((Long.parseLong(contractClientFK) <= 0))
            {
                long preferencePK = 0;
                if (clientDetailVO.getPreferenceVOCount() > 0)
                {
                    preferencePK = clientDetailVO.getPreferenceVO(0).getPreferencePK();
                }

                long taxProfilePK = 0;
                if (clientDetailVO.getTaxInformationVOCount() > 0 && clientDetailVO.getTaxInformationVO(0).getTaxProfileVOCount() > 0)
                {
                    taxProfilePK = clientDetailVO.getTaxInformationVO(0).getTaxProfileVO(0).getTaxProfilePK();
                }

                //create new payee role
                    ClientRoleVO clientRole = new ClientRoleVO();
                    clientRole.setClientRolePK(0);
                    clientRole.setClientDetailFK(Long.parseLong(clientDetailPK));
                    clientRole.setPreferenceFK(preferencePK);
                    clientRole.setTaxProfileFK(taxProfilePK);
                    clientRole.setRoleTypeCT("PAY");
                    clientRole.setOverrideStatus("O");

                    clientRolePK = roleComponent.saveOrUpdateClientRole(clientRole);

                //create the ContractClient override for the new payee
                ContractClientVO contractClientVO = new ContractClientVO();
                contractClientVO.setContractClientPK(0);
                contractClientVO.setSegmentFK(Long.parseLong(segmentFK));
                contractClientVO.setClientRoleFK(clientRolePK);
                contractClientVO.setIssueAge(0);
                contractClientVO.setEffectiveDate(effectiveDate);
                contractClientVO.setTerminationDate(EDITDate.DEFAULT_MAX_DATE);
                contractClientVO.setOverrideStatus("O");
                contractClientVO.setOperator(appReqBlock.getUserSession().getUsername());
                EDITDateTime maintDateTime = new EDITDateTime();
                contractClientVO.setMaintDateTime(maintDateTime.getFormattedDateTime());

                long contractClientPK = contractComponent.saveContractClientVO(contractClientVO);
                contractClientFK = contractClientPK + "";
                payeeOverridePB.putValue("contractClientFK", contractClientFK);

                //create the Allocation Override for the new Payee Contract Client
                ContractClientAllocationVO contractClientAllocationVO = new ContractClientAllocationVO();
                contractClientAllocationVO.setContractClientAllocationPK(0);
                contractClientAllocationVO.setContractClientFK(contractClientPK);
                contractClientAllocationVO.setAllocationPercent(new EDITBigDecimal(allocationPercent).getBigDecimal());
                contractClientAllocationVO.setOverrideStatus("O");

                long contractClientAllocationPK = contractComponent.saveContractClientAllocationVO(contractClientAllocationVO);
                contractClientAllocationFK = contractClientAllocationPK + "";
                payeeOverridePB.putValue("contractClientAllocationFK", contractClientAllocationFK);

            }
            else if (contractClientAllocationFK.equals("") )
            {
                ContractClientAllocationVO[] contractClientAllocationVO = contractLookup.findContractClientAllocationVOByContractClientPKAndAllocPct(Long.parseLong(contractClientFK), Double.parseDouble(allocationPercent));

                if (contractClientAllocationVO != null)
                {
                    contractClientAllocationFK = contractClientAllocationVO[0].getContractClientAllocationPK() + "";
                    payeeOverridePB.putValue("contractClientAllocationFK", contractClientAllocationFK);
                }
                else
                {
                    ContractClientAllocationVO newContractClientAllocationVO = new ContractClientAllocationVO();
                    newContractClientAllocationVO.setContractClientAllocationPK(0);
                    newContractClientAllocationVO.setContractClientFK(Long.parseLong(contractClientFK));
                    newContractClientAllocationVO.setAllocationPercent(new EDITBigDecimal(allocationPercent).getBigDecimal());
                    newContractClientAllocationVO.setOverrideStatus("O");

                    contractClientAllocationFK = contractComponent.saveContractClientAllocationVO(newContractClientAllocationVO) + "";
                    payeeOverridePB.putValue("contractClientAllocationFK", contractClientAllocationFK);
                }
            }
            else
            {
                ContractClientAllocation contractClientAllocation = ContractClientAllocation.findByPK(Long.parseLong(contractClientAllocationFK));
                EDITBigDecimal allocationPct = new EDITBigDecimal(allocationPercent);
                if (contractClientAllocation.getAllocationPercent() != allocationPct)
                {
                    contractClientAllocation.setAllocationPercent(allocationPct);
                    contractComponent.saveContractClientAllocationVO((ContractClientAllocationVO)contractClientAllocation.getVO());
                    payeeOverridePB.putValue("contractClientAllocationFK", contractClientAllocationFK);
                }
            }

            if (!fedWithholdingType.equals("") || !stateWithholdingType.equals("") || !cityWithholdingType.equals("") || !countyWithholdingType.equals(""))
            {
                createWithholdingOverride(payeeOverridePB, contractClientFK, withholdingFK);
            }

            appReqBlock.getHttpSession().removeAttribute(payeeOverridePB.getValue("taxId"));
        }

        String transactionType = appReqBlock.getReqParm("transactionType");
        formBean.putValue("transactionType", transactionType);

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return showFilterAllocationDetail(appReqBlock);
    }

    //SRAMAM 09/2004 DOUBLE2DECIMAL
    private boolean isNotEqualTo(java.math.BigDecimal bigDecVal, String value)
    {
        return (!new EDITBigDecimal(bigDecVal).isEQ(value));
    }

    private void createWithholdingOverride(PageBean payeeOverridePB, String contractClientFK, String withholdingFK) throws Exception
    {
        contract.business.Contract contractComponent = new contract.component.ContractComponent();
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();

//        String withholdingOverridePK = payeeOverridePB.getValue("withholdingOverridePK");
        String fedWithholdingType = Util.initString(payeeOverridePB.getValue("fedWithholdingType"), "");
        String fedWithholdingAmt = Util.initString(payeeOverridePB.getValue("fedWithholdingAmt"), "0");
        String fedWithholdingPct = Util.initString(payeeOverridePB.getValue("fedWithholdingPct"), "0");
        String stateWithholdingType = Util.initString(payeeOverridePB.getValue("stateWithholdingType"), "");
        String stateWithholdingAmt = Util.initString(payeeOverridePB.getValue("stateWithholdingAmt"),"0");
        String stateWithholdingPct = Util.initString(payeeOverridePB.getValue("stateWithholdingPct"), "0");
        String cityWithholdingType = Util.initString(payeeOverridePB.getValue("cityWithholdingType"), "");
        String cityWithholdingAmt = Util.initString(payeeOverridePB.getValue("cityWithholdingAmt"), "0");
        String cityWithholdingPct = Util.initString(payeeOverridePB.getValue("cityWithholdingPct"), "0");
        String countyWithholdingType = Util.initString(payeeOverridePB.getValue("countyWithholdingType"), "");
        String countyWithholdingAmt = Util.initString(payeeOverridePB.getValue("countyWithholdingAmt"), "0");
        String countyWithholdingPct = Util.initString(payeeOverridePB.getValue("countyWithholdingPct"), "0");

        boolean createWithholdingOverride = false;

        if (!withholdingFK.equals("0"))
        {
            WithholdingVO[] withholdingVO = contractLookup.findWithholdingVOByWithholdingPK(Long.parseLong(withholdingFK), false, null);

            if ((withholdingVO != null) && (withholdingVO.length > 0))
            {
                if (!withholdingVO[0].getFederalWithholdingTypeCT().equalsIgnoreCase(fedWithholdingType) || // withholdingVO[0].getFederalWithholdingAmount() != Double.parseDouble(fedWithholdingAmt) ||
                    isNotEqualTo(withholdingVO[0].getFederalWithholdingAmount(), fedWithholdingAmt) || //withholdingVO[0].getFederalWithholdingPercent() != Double.parseDouble(fedWithholdingPct) ||
                    isNotEqualTo(withholdingVO[0].getFederalWithholdingPercent(), fedWithholdingPct) || !withholdingVO[0].getStateWithholdingTypeCT().equalsIgnoreCase(stateWithholdingType) || //withholdingVO[0].getStateWithholdingAmount() != Double.parseDouble(stateWithholdingAmt) ||
                    isNotEqualTo(withholdingVO[0].getStateWithholdingAmount(), stateWithholdingAmt) || //withholdingVO[0].getStateWithholdingPercent() != Double.parseDouble(stateWithholdingPct) ||
                    isNotEqualTo(withholdingVO[0].getStateWithholdingPercent(), stateWithholdingPct) || !withholdingVO[0].getCityWithholdingTypeCT().equalsIgnoreCase(cityWithholdingType) || //withholdingVO[0].getCityWithholdingAmount() != Double.parseDouble(cityWithholdingAmt) ||
                    isNotEqualTo(withholdingVO[0].getCityWithholdingAmount(), cityWithholdingAmt) || //withholdingVO[0].getCityWithholdingPercent() != Double.parseDouble(cityWithholdingPct) ||
                    isNotEqualTo(withholdingVO[0].getCityWithholdingPercent(), cityWithholdingPct) || !withholdingVO[0].getCountyWithholdingTypeCT().equalsIgnoreCase(countyWithholdingType) || //withholdingVO[0].getCountyWithholdingAmount() != Double.parseDouble(countyWithholdingAmt) ||
                    isNotEqualTo(withholdingVO[0].getCountyWithholdingAmount(), countyWithholdingAmt) || //withholdingVO[0].getCountyWithholdingPercent() != Double.parseDouble(countyWithholdingPct))
                    isNotEqualTo(withholdingVO[0].getCountyWithholdingPercent(), countyWithholdingPct))
                {
                    createWithholdingOverride = true;
                }
            }
            else
            {
                createWithholdingOverride = true;
            }
        }
        else
        {
            createWithholdingOverride = true;
        }

        if (createWithholdingOverride)
        {
            WithholdingVO newWithholdingVO = new WithholdingVO();
            newWithholdingVO.setWithholdingPK(0);
            newWithholdingVO.setContractClientFK(Long.parseLong(contractClientFK));
            newWithholdingVO.setFederalWithholdingTypeCT(fedWithholdingType);
            newWithholdingVO.setFederalWithholdingAmount(new EDITBigDecimal(fedWithholdingAmt).getBigDecimal());
            newWithholdingVO.setFederalWithholdingPercent(new EDITBigDecimal(fedWithholdingPct).getBigDecimal());

            newWithholdingVO.setStateWithholdingTypeCT(stateWithholdingType);
            newWithholdingVO.setStateWithholdingAmount(new EDITBigDecimal(stateWithholdingAmt).getBigDecimal());
            newWithholdingVO.setStateWithholdingPercent(new EDITBigDecimal(stateWithholdingPct).getBigDecimal());

            newWithholdingVO.setCityWithholdingTypeCT(cityWithholdingType);
            newWithholdingVO.setCityWithholdingAmount(new EDITBigDecimal(cityWithholdingAmt).getBigDecimal());
            newWithholdingVO.setCityWithholdingPercent(new EDITBigDecimal(cityWithholdingPct).getBigDecimal());

            newWithholdingVO.setCountyWithholdingTypeCT(countyWithholdingType);
            newWithholdingVO.setCountyWithholdingAmount(new EDITBigDecimal(countyWithholdingAmt).getBigDecimal());
            newWithholdingVO.setCountyWithholdingPercent(new EDITBigDecimal(countyWithholdingPct).getBigDecimal());

            withholdingFK = contractComponent.saveWithholdingVO(newWithholdingVO) + "";
            payeeOverridePB.putValue("withholdingFK", withholdingFK);
        }
    }


    protected void  updateWithholdingOverride(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
        String withholdingFK = formBean.getValue("withholdingFK");
//        String contractClientFK = formBean.getValue("contractClientFK");
        String clientDetailPK = formBean.getValue("clientDetailPK");
        String segmentFK = formBean.getValue("segmentFK");

        SessionBean contractPayeeOverrides = appReqBlock.getSessionBean("contractPayeeOverrides");

        String key = segmentFK + clientDetailPK;

        PageBean payeeOverridePB = contractPayeeOverrides.getPageBean(key);

        String fedWithholdingType = Util.initString(formBean.getValue("fedWithholdingType"), "");
        if (fedWithholdingType.equalsIgnoreCase("Please Select"))
        {
            fedWithholdingType = "";
        }

        formBean.putValue("fedWithholdingType", fedWithholdingType);

        String fedWithholdingAmt = Util.initString(formBean.getValue("fedWithholdingAmt"), "");
        String fedWithholdingPct = Util.initString(formBean.getValue("fedWithholdingPct"), "");
        String stateWithholdingType = Util.initString(formBean.getValue("stateWithholdingType"), "");
        if (stateWithholdingType.equalsIgnoreCase("Please Select"))
        {
            stateWithholdingType = "";
        }

        formBean.putValue("stateWithholdingType", stateWithholdingType);

        String stateWithholdingAmt = Util.initString(formBean.getValue("stateWithholdingAmt"), "");
        String stateWithholdingPct = Util.initString(formBean.getValue("stateWithholdingPct"), "");
        String cityWithholdingType = Util.initString(formBean.getValue("cityWithholdingType"), "");
        if (cityWithholdingType.equalsIgnoreCase("Please Select"))
        {
            cityWithholdingType = "";
        }

        formBean.putValue("cityWithholdingType", cityWithholdingType);

        String cityWithholdingAmt = Util.initString(formBean.getValue("cityWithholdingAmt"), "");
        String cityWithholdingPct = Util.initString(formBean.getValue("cityWithholdingPct"), "");
        String countyWithholdingType = Util.initString(formBean.getValue("countyWithholdingType"), "");
        if (countyWithholdingType.equalsIgnoreCase("Please Select"))
        {
            countyWithholdingType = "";
        }

        formBean.putValue("countyWithholdingType", countyWithholdingType);

        String countyWithholdingAmt = formBean.getValue("countyWithholdingAmt");
        String countyWithholdingPct = formBean.getValue("countyWithholdingPct");

        payeeOverridePB.putValue("fedWithholdingType", fedWithholdingType);
        payeeOverridePB.putValue("fedWithholdingAmt", fedWithholdingAmt);
        payeeOverridePB.putValue("fedWithholdingPct", fedWithholdingPct);
        payeeOverridePB.putValue("stateWithholdingType", stateWithholdingType);
        payeeOverridePB.putValue("stateWithholdingAmt", stateWithholdingAmt);
        payeeOverridePB.putValue("stateWithholdingPct", stateWithholdingPct);
        payeeOverridePB.putValue("cityWithholdingType", cityWithholdingType);
        payeeOverridePB.putValue("cityWithholdingAmt", cityWithholdingAmt);
        payeeOverridePB.putValue("cityWithholdingPct", cityWithholdingPct);
        payeeOverridePB.putValue("countyWithholdingType", countyWithholdingType);
        payeeOverridePB.putValue("countyWithholdingAmt", countyWithholdingAmt);
        payeeOverridePB.putValue("countyWithholdingPct", countyWithholdingPct);
        payeeOverridePB.putValue("withholdingFK", withholdingFK);

        contractPayeeOverrides.putPageBean(key, payeeOverridePB);
        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

    }
    
    private String showBatchReversalDialog(AppReqBlock appReqBlock)
    {
        new BatchReversalTableModel(appReqBlock);
        
        PageBean contractMain = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        String segmentPK = contractMain.getValue("segmentPK");
        if (segmentPK == null || segmentPK.equals("")) {
        	segmentPK = appReqBlock.getSessionBean("quoteMainSessionBean").getPageBean("formBean").getValue("segmentPK");
        	contractMain.putValue("segmentPK", segmentPK);
        }

        return BATCH_REVERSAL_DIALOG;
    }
    
    /* 
     * To confirm reversal of a series of one or more transactions up to and including user-entered date
     */
    private String reverseThroughDate(AppReqBlock appReqBlock) throws Exception
    {
    	String contractId = appReqBlock.getSessionBean("contractMainSessionBean").getValue("contractId");
    	
        PageBean formBean = appReqBlock.getFormBean();
    	String reverseDate =  DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("reverseDate"));

        SegmentVO segmentVO = new VOComposer().composeSegmentVO(contractId, new ArrayList());
        
        // Get list of trx that will be reversed to display for confirmation
        EDITTrxVO[] trxToReverse = getBatchTrxToReverse(segmentVO.getSegmentPK(), segmentVO.getContractNumber(), null, reverseDate);
        List<Long> pksToReverse = getTrxPKs(trxToReverse);

        appReqBlock.getHttpSession().setAttribute("reversalReasonCode", getReversalReasonCode(appReqBlock.getFormBean()));
        appReqBlock.getHttpSession().setAttribute("pksToReverse", pksToReverse);
        appReqBlock.getHttpSession().setAttribute("reversalMap", buildReversalMap(appReqBlock, segmentVO.getContractNumber(), pksToReverse));

        String errorMessage = validateReversals(appReqBlock, segmentVO.getSegmentPK(), segmentVO.getSegmentStatusCT(), pksToReverse);
        appReqBlock.getHttpServletRequest().setAttribute("errorMessage", errorMessage);

        return BATCH_REVERSAL_CONFIRMATION_DIALOG;
    }
    
    /*
     * To confirm reversal all trx up to and including the IS
     */
    private String reverseToSubmitted(AppReqBlock appReqBlock) throws Exception
    {
    	String contractId = appReqBlock.getSessionBean("contractMainSessionBean").getValue("contractId");

        SegmentVO segmentVO = new VOComposer().composeSegmentVO(contractId, new ArrayList());
        
        // Get list of trx that will be reversed to display for confirmation
        EDITTrxVO[] trxToReverse = getBatchTrxToReverse(segmentVO.getSegmentPK(), segmentVO.getContractNumber(), "IS", null);
        List<Long> pksToReverse = getTrxPKs(trxToReverse);

        appReqBlock.getHttpSession().setAttribute("reversalReasonCode", getReversalReasonCode(appReqBlock.getFormBean()));
        appReqBlock.getHttpSession().setAttribute("pksToReverse", pksToReverse);
        appReqBlock.getHttpSession().setAttribute("reversalMap", buildReversalMap(appReqBlock, segmentVO.getContractNumber(), pksToReverse));

        String errorMessage = validateReversals(appReqBlock, segmentVO.getSegmentPK(), segmentVO.getSegmentStatusCT(), pksToReverse);
        appReqBlock.getHttpServletRequest().setAttribute("errorMessage", errorMessage);
        
        return BATCH_REVERSAL_CONFIRMATION_DIALOG;
    }
    
    /*
     * To confirm reversal all trx up to and including the SB
     */
    private String reverseToSubmitPend(AppReqBlock appReqBlock) throws Exception
    {
    	String contractId = appReqBlock.getSessionBean("contractMainSessionBean").getValue("contractId");

        List segmentVOInclusionList = new ArrayList();
        segmentVOInclusionList.add(SegmentVO.class);

        SegmentVO segmentVO = new VOComposer().composeSegmentVO(contractId, segmentVOInclusionList);
        
        // Get list of trx that will be reversed to display for confirmation
        EDITTrxVO[] trxToReverse = getBatchTrxToReverse(segmentVO.getSegmentPK(), segmentVO.getContractNumber(), "SB", null);
        List<Long> pksToReverse = getTrxPKs(trxToReverse);
        
        appReqBlock.getHttpSession().setAttribute("reversalReasonCode", getReversalReasonCode(appReqBlock.getFormBean()));
        appReqBlock.getHttpSession().setAttribute("pksToReverse", pksToReverse);
        appReqBlock.getHttpSession().setAttribute("reversalMap", buildReversalMap(appReqBlock, segmentVO.getContractNumber(), pksToReverse));
		
        String errorMessage = validateReversals(appReqBlock, segmentVO.getSegmentPK(), segmentVO.getSegmentStatusCT(), pksToReverse);
        appReqBlock.getHttpServletRequest().setAttribute("errorMessage", errorMessage);

        return BATCH_REVERSAL_CONFIRMATION_DIALOG;
    }
    
    /* 
     * To check for an return user-entered reversal reason code
     */
    private String getReversalReasonCode(FormBean formBean) {
    	String reversalReasonCode = formBean.getValue("reversalReasonCode");
        if (Util.isANumber(reversalReasonCode)) {
            reversalReasonCode = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(reversalReasonCode)).getCode();
        }
        
        return reversalReasonCode;
    }
    
    /*
     * To confirm reversal of all user-selected trx (one or more)
     */
    private String reverseSelectedTrx(AppReqBlock appReqBlock) throws Exception
    {
    	String contractId = appReqBlock.getSessionBean("contractMainSessionBean").getValue("contractId");

        SegmentVO segmentVO = new VOComposer().composeSegmentVO(contractId, new ArrayList());

        // get selected EDITTrx PKs
    	String key = appReqBlock.getReqParm("selectedRowIds_BatchReversalTableModel");
    	
    	List<Long> pksToReverse = new ArrayList<>();
    	if (key != null) {
    		String[] selectedPKs = Util.fastTokenizer(key, ",");
    		if (selectedPKs != null && selectedPKs.length > 0) {
    			for (String pkString : selectedPKs) {
    				if (pkString != null && !pkString.equals("")) {
						long pk = Long.parseLong(pkString);
						pksToReverse.add(pk);
					}
    			}
    		}
    	}
    	
        appReqBlock.getHttpSession().setAttribute("reversalReasonCode", getReversalReasonCode(appReqBlock.getFormBean()));
        appReqBlock.getHttpSession().setAttribute("pksToReverse", pksToReverse);
        appReqBlock.getHttpSession().setAttribute("reversalMap", buildReversalMap(appReqBlock, segmentVO.getContractNumber(), pksToReverse));

        String errorMessage = validateReversals(appReqBlock, segmentVO.getSegmentPK(), segmentVO.getSegmentStatusCT(), pksToReverse);
        appReqBlock.getHttpServletRequest().setAttribute("errorMessage", errorMessage);
        
        return BATCH_REVERSAL_CONFIRMATION_DIALOG;
    }
    
    /*
     * Builds a map for the UI to display anticipated reversal strategy chain 
     * Map includes the trx that will be affected as well as the anticipated end-result of affected trx (such as undone, redone, reversed, deleted)
     */
    private Map<String, EDITTrxVO> buildReversalMap(AppReqBlock appReqBlock, String contractNumber, List<Long> pksToReverse) throws Exception {
    	
        Map<String, EDITTrxVO> reversalMap = new LinkedHashMap<>();
        
    	appReqBlock.getHttpSession().setAttribute("earliestPYToRedo", null);
    	appReqBlock.getHttpSession().setAttribute("minPKToReverse", null);
    	
    	if (pksToReverse != null && pksToReverse.size() > 0) {
    		
    		EDITTrxVO earliestEditTrxToReverse = EDITTrx.findByPK_UsingCRUD(pksToReverse.get(pksToReverse.size()-1));
    		
        	appReqBlock.getHttpSession().setAttribute("minPKToReverse", earliestEditTrxToReverse.getEDITTrxPK());

    		TransactionPriority transactionPriority = TransactionPriority.findByTrxType(earliestEditTrxToReverse.getTransactionTypeCT());

    		long earliestKey = earliestEditTrxToReverse.getEDITTrxPK();
    		String effectiveDate = earliestEditTrxToReverse.getEffectiveDate();
    		int priority = transactionPriority.getPriority();
    		int sequence = earliestEditTrxToReverse.getSequenceNumber();
    		
    		// check for a BC in the anticipated strategy chain with CPH
    		EDITTrxVO earliestBcTrxWithCPH = event.dm.dao.DAOFactory.getEDITTrxDAO().findEarliestBCWithCPHInStrategyChain(contractNumber, 
    				effectiveDate, priority, sequence); 
    		
    		if (earliestBcTrxWithCPH != null) {
    			// BC with CPH was found, now find the latest PY with SegmentHistory.PriorPaidToDate <= bcTrxWithCPH.effectiveDate
        		EDITTrxVO earliestPYToRedo = event.dm.dao.DAOFactory.getEDITTrxDAO().findLatestPYWithPriorPaidToDateBeforeDate(
        				contractNumber, earliestBcTrxWithCPH.getEffectiveDate());
        		
        		EDITDate effDate = new EDITDate(effectiveDate);
        		EDITDate earliestPYEffDate = new EDITDate(earliestPYToRedo.getEffectiveDate());
        		
        		TransactionPriority earliestPYTransactionPriority = TransactionPriority.findByTrxType(earliestPYToRedo.getTransactionTypeCT());
        		
        		// check if earliestPYToReverse comes before expected strategy chain... if so, reset the strategy chain to go back to this trx instead
        		if (earliestPYToRedo != null && effDate != null && earliestPYEffDate != null &&
    				(earliestPYEffDate.before(effDate) || 
    				(earliestPYEffDate.equals(effDate) && earliestPYTransactionPriority.getPriority() < priority) ||
            		(earliestPYEffDate.equals(effDate) && earliestPYTransactionPriority.getPriority() == priority && 
            				earliestPYToRedo.getSequenceNumber() < sequence))) {
        		
            		earliestKey = earliestPYToRedo.getEDITTrxPK();
        			effectiveDate = earliestPYToRedo.getEffectiveDate();
            		priority = earliestPYTransactionPriority.getPriority();
            		sequence = earliestPYToRedo.getSequenceNumber();
            		
    	        	appReqBlock.getHttpSession().setAttribute("earliestPYToRedo", earliestPYToRedo);
        		}
    		} 
    		
    		// if exists, find date of first PY with priorPaidToDate <= BC's effectiveDate
    		// use PY's effectiveDate, priority and sequence instead
	    	EDITTrxVO[] reversalChain = event.dm.dao.DAOFactory.getEDITTrxDAO().getAllTrxHistory_TrxGTE_ByReverseOrder(contractNumber, 
	    			earliestKey, effectiveDate, priority, sequence, pksToReverse);   
	
        	appReqBlock.getHttpSession().setAttribute("reversalChain", reversalChain);

	    	boolean submitReversalDetected = false;
	    	
	        String mapKey;
	        
	        for (EDITTrxVO editTrxVO : reversalChain) {
	        	
	        	if (pksToReverse.contains(editTrxVO.getEDITTrxPK()) &&
	        			(editTrxVO.getTransactionTypeCT().equalsIgnoreCase("SB") || editTrxVO.getTransactionTypeCT().equalsIgnoreCase("IS"))) {
	        		// LM policies don't have IS trx, so check for either IS OR SB to determine if other trx, such as MA, will be deleted, etc
	        		submitReversalDetected = true;
	        	}
	        	
	        	if (pksToReverse.contains(editTrxVO.getOriginatingTrxFK()) && !editTrxVO.getTransactionTypeCT().equalsIgnoreCase("PY") &&
	        			!(pksToReverse.contains(editTrxVO.getEDITTrxPK()) && editTrxVO.getPendingStatus().equalsIgnoreCase("H"))) {
	        		// originating trx will be reversed so this trx will be deleted if pendingStatus=P at the time of reversal
	        		mapKey = editTrxVO.getEDITTrxPK() + "_" + "DELETE";
	        		reversalMap.put(mapKey, editTrxVO);
	        		
	        	} else if (pksToReverse.contains(editTrxVO.getEDITTrxPK())) {
	        		if (editTrxVO.getPendingStatus().equalsIgnoreCase("T")) {
	        			// not a trx that has ever run before so set it to D
	            		mapKey = editTrxVO.getEDITTrxPK() + "_" + "PENDING STATUS SET TO D";
	        		} else {
	            		mapKey = editTrxVO.getEDITTrxPK() + "_" + "REVERSE";
	        		}
	        		reversalMap.put(mapKey, editTrxVO);
	        		
	        	} else if (editTrxVO.getPendingStatus().equalsIgnoreCase("T")) {
	        		// will be set back to P when other trx are reversed
	        		mapKey = editTrxVO.getEDITTrxPK() + "_" + "PENDING STATUS SET TO P";
	        		reversalMap.put(mapKey, editTrxVO);
	        		
	        	} else {
	        		String complexChangeType = null;
	        		if (editTrxVO.getTransactionTypeCT().equalsIgnoreCase("BC")) {
	        			ContractSetupVO[] contractSetupVO = event.dm.dao.DAOFactory.getContractSetupDAO().findByEDITTrxPK(editTrxVO.getEDITTrxPK());
		                if (contractSetupVO != null && contractSetupVO.length > 0) {
		                	complexChangeType = contractSetupVO[0].getComplexChangeTypeCT();
		                }
	        		}
	        		
	        		if (complexChangeType != null && complexChangeType.equalsIgnoreCase("Batch")) {
		        		mapKey = editTrxVO.getEDITTrxPK() + "_" + "UNDO";
	        		} else {
		        		mapKey = editTrxVO.getEDITTrxPK() + "_" + "UNDO/REDO";
	        		}
	        		
	        		reversalMap.put(mapKey, editTrxVO);
	        	}
	        }
	        
	        if (submitReversalDetected) {
	        	appReqBlock.getHttpSession().setAttribute("isSubmitReversalChain", true);
	        } else {
	        	appReqBlock.getHttpSession().setAttribute("isSubmitReversalChain", false);
	        }
	    }
        
        return reversalMap;
    }
    
    /*
     * To turn an array of editTrx into a list of pks (for batch reversal processing)
     */
    private List<Long> getTrxPKs(EDITTrxVO[] editTrxVOs) throws Exception
    {
    	List<Long> pks = null;
    	    			
    	if (editTrxVOs != null && editTrxVOs.length > 0) {
    		pks = new ArrayList<>();
    	
    		for (EDITTrxVO editTrxVO : editTrxVOs) {
    			pks.add(editTrxVO.getEDITTrxPK());
    		}
    	}
    	
    	return pks;
    }
    
    /*
     * Creates an array of editTrx for batch reversal processing
     */
    private EDITTrxVO[] getBatchTrxToReverse(long segmentPK, String contractNumber, String lastTrxToReverse, String startDate) throws Exception
    {
    	EDITTrxVO[] editTrxToReverse = null;
    	
    	if (startDate != null) {
    		
    		EDITDate issueDate = null;
    		
    		EDITTrxVO[] issueTrx = event.dm.dao.DAOFactory.getEDITTrxDAO().findActiveBySegment_TransactionTypeCT_AND_PendingStatus(segmentPK, "IS", "H");
    		if (issueTrx != null && issueTrx.length > 0) {
    			issueDate = new EDITDate(issueTrx[0].getEffectiveDate());
    		}
    		
    		if (issueDate != null && (new EDITDate(startDate)).beforeOREqual(issueDate)) {
        		editTrxToReverse = event.dm.dao.DAOFactory.getEDITTrxDAO().getAllTrxHistory_EffectiveDateGTE_ByReverseOrder_ForIssueReversal(contractNumber, startDate);   
    		} else { 
        		editTrxToReverse = event.dm.dao.DAOFactory.getEDITTrxDAO().getAllTrxHistory_EffectiveDateGTE_ByReverseOrder_ForNonIssueReversal(contractNumber, startDate);
    		}
    				
    	} else {
    		// reversing to either SB or IS
    		editTrxToReverse = event.dm.dao.DAOFactory.getEDITTrxDAO().getAllTrxHistory_ByReverseOrder(contractNumber); 
    		
    		if (editTrxToReverse != null && editTrxToReverse.length > 0 && lastTrxToReverse != null && !lastTrxToReverse.equals("")) {
    			
    			int index = -1;
    			for (int x = 0; x < editTrxToReverse.length; x++) {
        			if (editTrxToReverse[x].getTransactionTypeCT().equalsIgnoreCase(lastTrxToReverse)) {
        				index = x;
        				break;
        			} 
        		}
    			
    			if (index >= 0) {
    				// return the array up to and including the requested lastTrxToReverse
        			return Arrays.copyOfRange(editTrxToReverse, 0, index+1);
    			} else {
    				String message = "";
    				if (lastTrxToReverse.equalsIgnoreCase("SB")) {
    					message = "SB Transaction Not Found";
    				} else if (lastTrxToReverse.equalsIgnoreCase("IS")) {
    					message = "IS Transaction Not Found";
    				} else {
    					message = lastTrxToReverse + " Transaction Not Found";
    				}
    				
    				throw new Exception(message);
    			}
    		}
    	}
        
        return editTrxToReverse;
    }
    
    /* 
     * Processes the previously-determined batch of editTrx reversals after validation and user confirmation
     */
    private String runBatchReversals(AppReqBlock appReqBlock) throws Exception
    {
    	String errorMessage = "";
    	
        UserSession userSession = appReqBlock.getUserSession();

    	String operator = userSession.getUsername();

        PageBean formBean = appReqBlock.getFormBean();
    	
    	String contractId = appReqBlock.getSessionBean("contractMainSessionBean").getValue("contractId");

        SegmentVO segmentVO = new VOComposer().composeSegmentVO(contractId, new ArrayList());
        
	    try {
	    	
	        List<Long> pksToReverse = (List<Long>) appReqBlock.getHttpSession().getAttribute("pksToReverse");
	
	        Boolean isSubmitReversalChain = (Boolean) appReqBlock.getHttpSession().getAttribute("isSubmitReversalChain");
	        	                	            
            String reversalReasonCode = (String) appReqBlock.getHttpSession().getAttribute("reversalReasonCode");
            if (reversalReasonCode != null && (reversalReasonCode.equals("") || reversalReasonCode.equalsIgnoreCase("Please Select"))) {
            	reversalReasonCode = null;
            }
            
        	if (pksToReverse != null && pksToReverse.size() > 0) {
        		// get the earliest trx of the group (per reversal order) of pksToReverse to use as base of strategy chain
	            Long minPKToReverse = (Long) appReqBlock.getHttpSession().getAttribute("minPKToReverse");

	            EDITTrxVO earliestPYToRedo = (EDITTrxVO) appReqBlock.getHttpSession().getAttribute("earliestPYToRedo");

	        	event.business.Event eventComponent = new event.component.EventComponent();
	        	eventComponent.batchReverseClientTrx(minPKToReverse, operator, reversalReasonCode, pksToReverse, isSubmitReversalChain, earliestPYToRedo);
        	}
	        
	        userSession.unlockSegment();
	        clearAllContractSessions(appReqBlock);
	        SessionHelper.clearSessions();
	
	        if (errorMessage == null || errorMessage.equals("")) {
	            errorMessage = "Processing Has Completed";
	        }
	        
    	} catch (Exception e) {
        	errorMessage = e.getMessage();
        }
	    
	    // get updated segment to check current status
        Segment segment = Segment.findByPK(segmentVO.getSegmentPK());
        String segmentPK = String.valueOf(segment.getSegmentPK());

        appReqBlock.getHttpServletRequest().setAttribute("errorMessage", errorMessage);
        appReqBlock.getFormBean().putValue("segmentPK", segmentPK);
    	appReqBlock.setReqParm("searchValue", segmentPK);

        if (contractReversedToQuote(segment.getSegmentStatusCT())) {                        
            QuoteDetailTran quoteDetailTran = new QuoteDetailTran();
        	return quoteDetailTran.loadQuoteAfterSearch(appReqBlock);
        	
        } else {
        	return loadContractAfterSearch(appReqBlock);
        }
    }
    
    /* 
     * Checks batch reversal trx for invalid reversal scenarios and returns any found errors to prevent further processing
     */
    private String validateReversals(AppReqBlock appReqBlock, long segmentPK, String segmentStatus, List<Long> pksToReverse) throws Exception {

    	String errorMessage = "";
    	
        if (segmentStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_FROZEN)) {
        	return "Reversal processing is not allowed on a Frozen contract. ";
        }
        
        if (pksToReverse != null && pksToReverse.size() > 0) {
        	
        	// get all status N/A trx with pendingStatus of H sorted by strategyChain order
            EDITTrxVO[] processedEditTrxVOs = (EDITTrxVO[]) appReqBlock.getHttpSession().getAttribute("reversalChain");

	        if (processedEditTrxVOs != null && processedEditTrxVOs.length > 0) {
	        
		        int index = 0;
		        boolean bcUndone = false;
		        boolean detectedBadBCReversal = false;
		        boolean detectedConversionReversal = false;
		        boolean detectedConversionUndo = false;
		        boolean detectedPYReversal = false;
			        
	        	for (int x = 0; x < processedEditTrxVOs.length; x++) {
		        	
		        	if (processedEditTrxVOs[x].getPendingStatus().equalsIgnoreCase("H")) {
			        	if (pksToReverse.get(index).compareTo(processedEditTrxVOs[x].getEDITTrxPK()) == 0) {
			        		// current trx is the one being reversed
			        					        		
			        		if (bcUndone && processedEditTrxVOs[x].getTransactionTypeCT().equalsIgnoreCase("BC")) {
			        			// user must reverse the more recent BC first
			        			detectedBadBCReversal = true;
			        		}
			        		
			        		if (processedEditTrxVOs[x].getOperator() != null && processedEditTrxVOs[x].getOperator().equalsIgnoreCase("Conversion")) {
			        			detectedConversionReversal = true;
			                }
			        		
			        		if (processedEditTrxVOs[x].getTransactionTypeCT().equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_PREMIUM)) {
			        			detectedPYReversal = true;
			        		}
			        		
			        		// Check for authorization
				            checkForReverseTransactionAuthorization(processedEditTrxVOs[x].getEDITTrxPK());
				            	
				            index++;
				            
			        	} else {
			        		// the current trx will be undone/redone
			        		if (processedEditTrxVOs[x].getTransactionTypeCT().equalsIgnoreCase("BC")) {
			        			bcUndone = true;
			        		}
			        		
			        		if (processedEditTrxVOs[x].getOperator() != null && processedEditTrxVOs[x].getOperator().equalsIgnoreCase("Conversion")) {
			        			detectedConversionUndo = true;
			                }
			        	}
		        	}
		        			        	
		        	if (index == pksToReverse.size()) {
		        		break;
		        	}
		        }
	        	
	            if (detectedBadBCReversal) {
	    			errorMessage += "A selected Billing Change cannot be reversed because a more recent Billing Change was not also selected for reversal.  ";
	            }
	            
	            if (detectedConversionReversal && detectedConversionUndo) {
	            	errorMessage += "A conversion transaction cannot be reversed or undone/redone.  ";
	            } else {
		            if (detectedConversionReversal) {
		            	errorMessage += "A conversion transaction cannot be reversed.  ";
		            }
		            
		            if (detectedConversionUndo) {
		            	errorMessage += "A conversion transaction cannot be undone/redone.  ";
		            }
	            }
	            
	            if (detectedPYReversal) {
	                EDITTrxVO[] linkedPYs = event.dm.dao.DAOFactory.getEDITTrxDAO().getLinkedPYTrx(segmentPK);
	                
	                if (linkedPYs != null && linkedPYs.length > 0) {
	                	for (EDITTrxVO pyVO : linkedPYs) {
	                		if (pksToReverse.contains(pyVO.getEDITTrxPK()) && !pksToReverse.contains(pyVO.getOriginatingTrxFK())) {
	                			errorMessage += "Linked PY has been selected for reversal but parent " + pyVO.getEffectiveDate() + 
	                					" PY has not also been selected. Both must be selected.  ";
	                		}
	                		
	                		if (pksToReverse.contains(pyVO.getOriginatingTrxFK()) && !pksToReverse.contains(pyVO.getEDITTrxPK())) {
	                			errorMessage += "Parent PY has been selected for reversal but linked " + pyVO.getEffectiveDate() + 
	                					" PY has not also been selected. Both must be selected.  ";
	                		}
	                	}
	                }
	            }
	        }
	    }
                
        return errorMessage;
    }

    private String runReversal(AppReqBlock appReqBlock) throws Exception
    {
        String operator = appReqBlock.getUserSession().getUsername();

        PageBean formBean = appReqBlock.getFormBean();
        String reversalReasonCode = formBean.getValue("reversalReasonCode");
        if (Util.isANumber(reversalReasonCode))
        {
            reversalReasonCode = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(reversalReasonCode)).getCode();
        }

        contract.business.Lookup contractLookup = new contract.component.LookupComponent();

        String contractId = appReqBlock.getSessionBean("contractMainSessionBean").getValue("contractId");

        List segmentVOInclusionList = new ArrayList();

        segmentVOInclusionList.add(PayoutVO.class);
        segmentVOInclusionList.add(SegmentVO.class);
        segmentVOInclusionList.add(LifeVO.class);
        segmentVOInclusionList.add(ContractClientVO.class);
        segmentVOInclusionList.add(ContractClientAllocationVO.class);
        segmentVOInclusionList.add(InvestmentVO.class);
        segmentVOInclusionList.add(InvestmentAllocationVO.class);
        segmentVOInclusionList.add(AgentHierarchyVO.class);
        segmentVOInclusionList.add(AgentSnapshotVO.class);
        segmentVOInclusionList.add(RequirementVO.class);
        segmentVOInclusionList.add(NoteReminderVO.class);
        segmentVOInclusionList.add(DepositsVO.class);
        segmentVOInclusionList.add(InherentRiderVO.class);
        segmentVOInclusionList.add(WithholdingVO.class);
        segmentVOInclusionList.add(WithholdingOverrideVO.class);
        segmentVOInclusionList.add(ContractRequirementVO.class);

        SegmentVO segmentVO = new VOComposer().composeSegmentVO(contractId, segmentVOInclusionList);

        String editTrxPK = appReqBlock.getReqParm("editTrxPK");

        EDITTrxVO editTrxVO = EDITTrx.findByPK_UsingCRUD(Long.valueOf(editTrxPK).longValue());
        String transactionTypeCT = editTrxVO.getTransactionTypeCT();

        String errorMessage = "";
        
        String trxOperator = editTrxVO.getOperator();
        
        if (trxOperator != null && trxOperator.equalsIgnoreCase("Conversion"))
        {
        	errorMessage = "Cannot reverse a conversion transaction.";
        }

        UserSession userSession = appReqBlock.getUserSession();
        if (errorMessage.equals(""))
        {
            if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_SUBMIT)) {
                //Lookup list of transactions and see if there's an issue dated before the submit.
                HistoryFilterRow[] historyFilterRows = null;
                historyFilterRows = HistoryFilter.findHistoryFilterRows(segmentVO.getSegmentPK(), "AllPeriods", null, false);
                HistoryFilterRow issueRow = null;
                for (int x = 0; x <= historyFilterRows.length - 1; x++) {
                    if (historyFilterRows[x].getTransactionTypeCT().equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_ISSUE)) {

                        issueRow = historyFilterRows[x];
                        if (!issueRow.getStatus().equalsIgnoreCase(EDITTrx.STATUS_REVERSAL)) {

                            errorMessage = "Cannot reverse submit until Issue is reversed.";
                            appReqBlock.getHttpServletRequest().setAttribute("errorMessage", errorMessage);
                            appReqBlock.setReqParm("searchValue", Long.toString(segmentVO.getSegmentPK()));

                            userSession.unlockSegment();
                            clearAllContractSessions(appReqBlock);
                            SessionHelper.clearSessions();

                            appReqBlock.getHttpSession().setAttribute("reloadHeader", "true");

//                            return quoteDetailTran.loadQuoteAfterSearch(appReqBlock);
        	                return loadContractAfterSearch(appReqBlock);
                        }
                    }
                }
            } else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_ISSUE)) {
	                errorMessage = updateDepositsAndSuspense(segmentVO);
	
	                List segmentPKList = new ArrayList();
	
	                segmentPKList.add(new Long(segmentVO.getSegmentPK()));
	
	                SegmentVO[] riderSegmentVOs = contractLookup.findRiderSegmentsBy_SegmentPK(segmentVO.getSegmentPK());
	                if (riderSegmentVOs != null && riderSegmentVOs.length > 0)
	                {
	                    for (int i = 0; i < riderSegmentVOs.length; i++)
	                    {
	                        segmentPKList.add(new Long(riderSegmentVOs[i].getSegmentPK()));
	                    }
	                }
	
	                List voInclusionList = new ArrayList();
	                voInclusionList.add(EDITTrxHistoryVO.class);
	                voInclusionList.add(EDITTrxCorrespondenceVO.class);
	
	                event.business.Event eventComponent = new event.component.EventComponent();
	
	                eventComponent.deletePendingTrxBySegmentPK_AndNotTransactionType(segmentPKList, new String[]{"PY"}, voInclusionList);
                
	        } else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_BILLING_CHANGE)) {
	        	
	        	EDITDate effectiveDate = new EDITDate(editTrxVO.getEffectiveDate());
	        	int sequence = editTrxVO.getSequenceNumber();
	        	
                //Lookup list of transactions and see if there's a previous BillSchedule that must be reversed first
                HistoryFilterRow[] historyFilterRows = null;
                historyFilterRows = HistoryFilter.findHistoryFilterRows(segmentVO.getSegmentPK(), "AllPeriods", null, false);
                HistoryFilterRow historyRow = null;
                
                for (int x = 0; x <= historyFilterRows.length - 1; x++) {
                    if (historyFilterRows[x].getTransactionTypeCT().equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_BILLING_CHANGE)) {

                    	historyRow = historyFilterRows[x];
                    	
                        if (historyRow.getEffectiveDate().afterOREqual(effectiveDate) && (historyRow.getStatus().equalsIgnoreCase(EDITTrx.STATUS_NATURAL) || 
                        	historyRow.getStatus().equalsIgnoreCase(EDITTrx.STATUS_APPLY))) {

                        	if (historyRow.getEffectiveDate().after(effectiveDate) || (historyRow.getEffectiveDate().equals(effectiveDate) &&
                        		historyRow.getSequenceNumber() > sequence))
                        	{
	                            errorMessage = "The system cannot reverse this Billing Change because another Billing Change has been processed since then.";
	                            appReqBlock.getHttpServletRequest().setAttribute("errorMessage", errorMessage);
	                            appReqBlock.setReqParm("searchValue", Long.toString(segmentVO.getSegmentPK()));
	
	                            userSession.unlockSegment();
	                            clearAllContractSessions(appReqBlock);
	                            SessionHelper.clearSessions();
	
	                            appReqBlock.getHttpSession().setAttribute("reloadHeader", "true");
	
	        	                return loadContractAfterSearch(appReqBlock);
							}
						}
					}
				}
			}
	
	            event.business.Event eventComponent = new event.component.EventComponent();
	
	            // Check for authorization
	            checkForReverseTransactionAuthorization(Long.parseLong(editTrxPK));
	
	        try
	        {
	        	if (reversalReasonCode.equalsIgnoreCase(EDITTrx.STATUS_REVERSAL) &&
		                transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_MATURITY))
		            {
	        			if(editTrxVO.getPendingStatus().equalsIgnoreCase("P"))
	        			{
	        			 editTrxVO.setPendingStatus("T");
	        			}
		            }
	            //NON-Sufficient fund processing requires some suspense to exist, else not allowed, before the reversal process
	            if (reversalReasonCode.equalsIgnoreCase(EDITTrx.REVERSAL_REASON_NONSUFFICIENTFUNDS) &&
	                transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_PREMIUM))
	            {
	                errorMessage = eventComponent.reverseNSFClientTrx(Long.parseLong(editTrxPK), operator, reversalReasonCode, segmentVO.getContractNumber());
	            }
	            else
	            {
	                eventComponent.reverseClientTrx(Long.parseLong(editTrxPK), operator, reversalReasonCode);
	            }
	        }
	        catch (EDITEventException e)
	        {
	            //  Squash the exception.  We don't want any exceptions from the reversal process to bubble up to the main
	            //  error page
	            e.printStackTrace();
	        }
	    }


        String segmentPK = String.valueOf(userSession.getSegmentPK());
        Segment segment = Segment.findByPK(userSession.getSegmentPK());
        
        userSession.unlockSegment();
        clearAllContractSessions(appReqBlock);
        SessionHelper.clearSessions();

        if (errorMessage.equals(""))
        {
            errorMessage = "Transaction Complete";
        }
        
        appReqBlock.getHttpServletRequest().setAttribute("errorMessage", errorMessage);
        appReqBlock.getFormBean().putValue("segmentPK", segmentPK);
        appReqBlock.setReqParm("searchValue", segmentPK);

        if (contractReversedToQuote(segment.getSegmentStatusCT()))
        {
            QuoteDetailTran quoteDetailTran = new QuoteDetailTran();
        	return quoteDetailTran.loadQuoteAfterSearch(appReqBlock);
        	
        } else {        	
        	return loadContractAfterSearch(appReqBlock);
        }
    }

    private String updateDepositsAndSuspense(SegmentVO segmentVO) throws Exception
    {
        String errorMessage = "";

        CRUD eventCRUD = CRUDFactory.getSingleton().getCRUD(ConnectionFactory.EDITSOLUTIONS_POOL);

        event.business.Event eventComponent = new event.component.EventComponent();
        List voInclusionList = new ArrayList();
        voInclusionList.add(ClientSetupVO.class);
        voInclusionList.add(ContractSetupVO.class);
        voInclusionList.add(GroupSetupVO.class);
        voInclusionList.add(EDITTrxHistoryVO.class);
        voInclusionList.add(InSuspenseVO.class);
        voInclusionList.add(SuspenseVO.class);

        DepositsVO[] depositsVOs = segmentVO.getDepositsVO();

        if (depositsVOs != null)
        {
            for (int i = 0; i < depositsVOs.length; i++)
            {
                if (depositsVOs[i].getEDITTrxFK() > 0)
                {
                    EDITTrxVO editTrx = eventComponent.composeEDITTrxVOByEDITTrxPK(depositsVOs[i].getEDITTrxFK(), voInclusionList);
                    GroupSetupVO groupSetup = (GroupSetupVO) editTrx.getParentVO(ClientSetupVO.class).getParentVO(ContractSetupVO.class).getParentVO(GroupSetupVO.class);

                    if ((groupSetup.getPremiumTypeCT() != null) && groupSetup.getPremiumTypeCT().equalsIgnoreCase("Issue"))
                    {
                        SuspenseVO suspenseVO = null;
                        EDITTrxHistoryVO[] editTrxHistory = editTrx.getEDITTrxHistoryVO();

                        if ((editTrxHistory != null) && (editTrxHistory.length > 0))
                        {
                            InSuspenseVO[] inSuspenseVO = editTrxHistory[0].getInSuspenseVO();

                            if ((inSuspenseVO != null) && (inSuspenseVO.length > 0))
                            {
                                suspenseVO = (SuspenseVO) inSuspenseVO[0].getParentVO(SuspenseVO.class);

                                // if ((suspenseVO.getSuspenseAmount() - suspenseVO.getPendingSuspenseAmount()) < depositsVOs[i].getAnticipatedAmount())
                                if (new EDITBigDecimal(suspenseVO.getSuspenseAmount()).subtractEditBigDecimal(new EDITBigDecimal(suspenseVO.getPendingSuspenseAmount())).isLT(new EDITBigDecimal(depositsVOs[i].getAnticipatedAmount())))
                                {
                                    errorMessage = "Contract Pending But All Issue Deposit Money Not Available - Check Suspense";
                                }
                                else
                                {
                                    suspenseVO.setPendingSuspenseAmount(new EDITBigDecimal(suspenseVO.getPendingSuspenseAmount()).addEditBigDecimal(new EDITBigDecimal(depositsVOs[i].getAnticipatedAmount())).getBigDecimal());
                                    eventCRUD.createOrUpdateVOInDB(suspenseVO);

                                    depositsVOs[i].setEDITTrxFK(0);
//                                    depositsVOs[i].setSuspenseFK(suspenseVO.getSuspensePK());
//                                    depositsVOs[i].setAmountReceived(depositsVOs[i].getAnticipatedAmount());
                                }
                            }
                            else
                            {
                                errorMessage = "Contract Pending But All Issue Deposit Money Not Available - Check Suspense";
                            }
                        }
                    }
                }
            }
        }

        if (eventCRUD != null)
        {
            eventCRUD.close();
        }

        return errorMessage;
    }

    protected String saveTransactionToSummary(AppReqBlock appReqBlock) throws Exception
    {
    	EDITDateTime processingDateTime = new EDITDateTime();
    	appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("processingDateTime", processingDateTime.getFormattedDateTime());
    	
        PageBean formBean = appReqBlock.getFormBean();
        
        String recordPRASEEvents = formBean.getValue("recordPRASEEvents");
        UtilitiesForTran.setupRecordPRASEEvents(appReqBlock, recordPRASEEvents);

        String transactionType = Util.initString(formBean.getValue("transactionType"), "");
        String productStructureId = Util.initString(formBean.getValue("companyStructureId"), "");

        String transactionTypeCode = getTrxCTFromDescription(transactionType, productStructureId);

        String trxSource = Util.initString(formBean.getValue("trxSource"), "");

        //  Check for authorization
        String editTrxPK = Util.initString(formBean.getValue("editTrxPK"), "");
        checkForUpdateTransactionAuthorization(editTrxPK, transactionTypeCode);

        contract.business.Lookup contractLookup = new contract.component.LookupComponent();

        String returnPage = "";
        boolean transactionMessageSet = false;

        List voExclusionList = new ArrayList();

        //        voExclusionList.add(ContractClientVO.class);
        voExclusionList.add(ClientRoleVO.class);
        voExclusionList.add(ContractClientAllocationOvrdVO.class);

        //        voExclusionList.add(ChangeHistoryVO.class);
        voExclusionList.add(NoteReminderVO.class);
        voExclusionList.add(ContractSetupVO.class);
        voExclusionList.add(SegmentBackupVO.class);
        voExclusionList.add(RealTimeActivityVO.class);
        voExclusionList.add(PlacedAgentVO.class);
        voExclusionList.add(CommissionProfileVO.class);
        voExclusionList.add(InvestmentAllocationOverrideVO.class);
        voExclusionList.add(BucketHistoryVO.class);

        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        PageBean selectedContracts = contractTransactionSessionBean.getPageBean("selectedContracts");
        String[] contracts = selectedContracts.getValues("contracts");

        String trxAmount = formBean.getValue("amount");

        EDITBigDecimal transactionAmount = new EDITBigDecimal();

        if (Util.isANumber(trxAmount))
        {
            transactionAmount = new EDITBigDecimal(trxAmount);
        }

        EDITBigDecimal totalCashReceived = new EDITBigDecimal();

        EDITBigDecimal totalDepositsReceived = new EDITBigDecimal();
        DepositsVO[] trxDepositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("trxDepositsVOs");

        for (int i = 0; i < contracts.length; i++)
        {
            String[] tokenizedContract = Util.fastTokenizer(contracts[i], ",");

            EDITBigDecimal amountReceived = Util.roundDollars(new EDITBigDecimal(tokenizedContract[8]));

            totalCashReceived = totalCashReceived.addEditBigDecimal(amountReceived);
        }

        if (trxDepositsVOs != null)
        {
            for (int i = 0; i < trxDepositsVOs.length; i++)
            {
                totalDepositsReceived = totalDepositsReceived.addEditBigDecimal(Util.roundDollars(trxDepositsVOs[i].getAmountReceived()));
            }
        }
        else if (transactionTypeCode.equalsIgnoreCase("PY") || transactionTypeCode.equalsIgnoreCase("LR"))
        {
            appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("transactionMessage", "Deposits/Suspense Must Be Selected For Payment Transaction");
            transactionMessageSet = true;
        }

        if (!transactionMessageSet)
        {
            EDITBigDecimal totalFilterAllocAmt = null;

            if (totalDepositsReceived.isEQ("0"))
            {
                totalFilterAllocAmt = new EDITBigDecimal("0");
            }
            else
            {
                totalFilterAllocAmt = Util.roundDollars(totalCashReceived.addEditBigDecimal(totalDepositsReceived));
            }

            if (totalFilterAllocAmt.isGT("0") && !totalFilterAllocAmt.isEQ(transactionAmount))
            {
                appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("transactionMessage", "Cash + Deposits Not Equal to Transaction Amount");
                transactionMessageSet = true;
            }
        }

        if (transactionMessageSet)
        {
            CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();
            String optionId = formBean.getValue("optionId");

            if (Util.isANumber(optionId))
            {
                optionId = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionId)).getCode();
                formBean.putValue("optionId", optionId);
            }

            String premiumType = formBean.getValue("premiumType");

            if (Util.isANumber(premiumType))
            {
                premiumType = codeTableWrapper.getCodeTableEntry(Long.parseLong(premiumType)).getCode();
                formBean.putValue("premiumType", premiumType);
            }

            appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", formBean);

            boolean thisIsSchedEvent = EDITTrx.checkForScheduledEventTrxType(transactionTypeCode);

            if (thisIsSchedEvent)
            {
                returnPage = CONTRACT_TRANS_SCHEDULED_EVENT;
            }
            else if (transactionTypeCode != null && transactionTypeCode.equalsIgnoreCase("PY") && trxSource != null && trxSource.equalsIgnoreCase("QuickPay")) {
            	returnPage = QUICK_PAY_DIALOG;
            }
            else if (transactionTypeCode.equalsIgnoreCase("PY") || transactionTypeCode.equalsIgnoreCase("PI") ||
                     transactionTypeCode.equalsIgnoreCase("LR") || transactionTypeCode.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_PREMIUM_LOAN))
            {
                returnPage = CONTRACT_TRANS_PAYMENT;
            }
            else if (transactionTypeCode.equalsIgnoreCase("TF") ||
                     transactionTypeCode.equalsIgnoreCase("AA") ||
                     transactionTypeCode.equalsIgnoreCase("PR") ||
                     transactionTypeCode.equalsIgnoreCase("FT") ||
                     transactionTypeCode.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_SERIES_TRANSFER) ||
                     transactionTypeCode.equalsIgnoreCase("HFTA") ||
                     transactionTypeCode.equalsIgnoreCase("HFTP") ||
                     transactionTypeCode.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_HF_SERIES_AMT) ||
                     transactionTypeCode.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_HF_SERIES_PCT))
            {
                appReqBlock.getHttpSession().setAttribute("uiFilteredFundVOs", new UIFilteredFundVO[0]);
                appReqBlock.getHttpSession().setAttribute("uiInvestmentOverrideVOs", new UIInvestmentOverrideVO[0]);

                appReqBlock.getSessionBean("contractInvestmentOverrides").clearState();

                returnPage = CONTRACT_TRANSFER;
            }
            else
            {
                returnPage = CONTRACT_TRANS_WITHDRAWAL;
            }
        }
        else
        {
        	// Check for potential undo/redo trx to display warning
            EDITDate currentDate = new EDITDate();
            EDITDate effectiveDate = new EDITDate(formBean.getValue("effectiveDate"));
            
        	String undoTrxApproved = Util.initString(formBean.getValue("undoTrxApproved"), "");
            
            if (effectiveDate.before(currentDate) && !undoTrxApproved.equalsIgnoreCase("true"))
            {
            	Segment segment = Segment.findByContractNumber(formBean.getValue("contractId"));
            	long segmentPK = segment.getSegmentPK();
            	
            	int priority = TransactionPriority.findByTrxType(transactionTypeCode).getPriority();
            	
            	long trxPK;
            	
            	if (editTrxPK == null || editTrxPK == "") {
            		trxPK = 0L;
            	} else {
            		trxPK = Long.parseLong(editTrxPK); 
            	}
            	
            	EDITTrxVO[] undoTrx = event.dm.dao.DAOFactory.getEDITTrxDAO().findAllAssociatedUndoTrx(segmentPK, trxPK, effectiveDate.toString(), currentDate.toString(), priority);
            
            	if (undoTrx != null && undoTrx.length > 0)
            	{
            		String undoTrxMessage = "";
            		
            		CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();
            		
            		for (EDITTrxVO undoEditTrxVO : undoTrx)
            		{
            			String undoTransactionType = codeTableWrapper.getCodeDescByCodeTableNameAndCode("TRXTYPE", undoEditTrxVO.getTransactionTypeCT());
            			
            			if (undoEditTrxVO.getOperator().equalsIgnoreCase("Conversion"))
            			{
            				undoTrxMessage = "";
            				
            				String errorMessage = "Backdating this transaction will cause a conversion " + undoTransactionType + 
            						" trx to be undone.  Undo/redo of conversion transactions is not advised.  " +
            						"If necessary, please submit a helpdesk request to complete this transaction as entered.";
            	            
            				appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("transactionMessage", errorMessage);

            				break;
            			}
            			
            			String undoEffectiveDate = new EDITDate(undoEditTrxVO.getEffectiveDate()).getMMDDYYYYDate();

            			undoTrxMessage += undoEffectiveDate + " - " + undoTransactionType + " (Seq " + undoEditTrxVO.getSequenceNumber() + ")#";
            		}
            		
                    appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("undoMessage", undoTrxMessage);
                    
                    appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);
                    appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", appReqBlock.getFormBean());
                    
                    boolean thisIsSchedEvent = EDITTrx.checkForScheduledEventTrxType(transactionTypeCode);

                    if (thisIsSchedEvent)
                    {
                        return CONTRACT_TRANS_SCHEDULED_EVENT;
                    }
                    else if (transactionTypeCode != null && transactionTypeCode.equalsIgnoreCase("PY") && trxSource != null && trxSource.equalsIgnoreCase("QuickPay")) {
                    	returnPage = QUICK_PAY_DIALOG;
                    }
                    else if (transactionTypeCode.equalsIgnoreCase("PY") || transactionTypeCode.equalsIgnoreCase("PI") ||
                             transactionTypeCode.equalsIgnoreCase("LR") || transactionTypeCode.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_PREMIUM_LOAN))
                    {
                    	return CONTRACT_TRANS_PAYMENT;
                    }
                    else if (transactionTypeCode.equalsIgnoreCase("TF") ||
                             transactionTypeCode.equalsIgnoreCase("AA") ||
                             transactionTypeCode.equalsIgnoreCase("PR") ||
                             transactionTypeCode.equalsIgnoreCase("FT") ||
                             transactionTypeCode.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_SERIES_TRANSFER) ||
                             transactionTypeCode.equalsIgnoreCase("HFTA") ||
                             transactionTypeCode.equalsIgnoreCase("HFTP") ||
                             transactionTypeCode.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_HF_SERIES_AMT) ||
                             transactionTypeCode.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_HF_SERIES_PCT))
                    {
                    	return CONTRACT_TRANSFER;
                    }
                    else
                    {
                    	return CONTRACT_TRANS_WITHDRAWAL;
                    }
            	}
            }
            
            appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("undoTrxApproved", "");
            
            if ((contracts != null) && (contracts.length > 0))
            {
                //ONLY THE BASE SEGMENT GETS PROCESSED, RIDER SHOULD BE INSIDE VO
                for (int c = 0; c < contracts.length; c++)
                {
                    String[] tokenizedContract = Util.fastTokenizer(contracts[c], ",");
                    String segmentFK = tokenizedContract[1];

                    SegmentVO[] segmentVO = contractLookup.getSegmentBySegmentPK(Long.parseLong(segmentFK), true, voExclusionList);

                    if (segmentVO[0].getSegmentFK() == 0 || transactionTypeCode.equalsIgnoreCase("MA"))
                    {
                        returnPage = completeTransactionSave(appReqBlock, false, formBean, segmentVO[0], tokenizedContract);
                    }
                }
            }
            else
            {
                String segmentFK = formBean.getValue("segmentFK");
                String contractId = formBean.getValue("contractId");

                SegmentVO[] segmentVO = null;

                if (segmentFK.equals(""))
                {
                    segmentVO = contractLookup.getSegmentByContractNumber(contractId, true, voExclusionList);

                    segmentFK = segmentVO[0].getSegmentPK() + "";
                }

                else
                {
                    segmentVO = contractLookup.getSegmentBySegmentPK(Long.parseLong(segmentFK), true, voExclusionList);
                }

                returnPage = completeTransactionSave(appReqBlock, false, formBean, segmentVO[0], null);
            }
        }
        
        appReqBlock.getHttpSession().setAttribute("reloadHeader", "true");

        UserSession userSession = appReqBlock.getUserSession();

        userSession.setDepositsVO(null);

        if (returnPage.equalsIgnoreCase(QUICK_PAY_DIALOG)) {
        	return showQuickPayDialog(appReqBlock);
        } else {
        	return returnPage;
        }
    }



    @SuppressWarnings("finally")
	private String completeTransactionSave(AppReqBlock appReqBlock, boolean thisIsAnalyzer, PageBean formBean, SegmentVO segmentVO, String[] tokenizedContract) throws Exception
    {
    	String dateTime = appReqBlock.getSessionBean("contractTransactionSessionBean").getValue("processingDateTime");
    	
    	EDITDateTime processingDateTime = null;
    	
    	if (dateTime != null && !dateTime.equals(""))
    	{
    		processingDateTime = new EDITDateTime(dateTime);
    	}
    	else
    	{
    		processingDateTime = new EDITDateTime();
    	}
    	
        event.business.Event eventComponent = new event.component.EventComponent();

        VOEditException voEditException = null;
        PortalEditingException editingException = null;

        PageBean transactionBean = new PageBean();
        transactionBean = formBean;

        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        String groupSetupPK = Util.initString(formBean.getValue("groupSetupPK"), "0");
        String contractSetupPK = Util.initString(formBean.getValue("contractSetupPK"), "0");
        String clientSetupPK = Util.initString(formBean.getValue("clientSetupPK"), "0");
        String contractClientFK = Util.initString(formBean.getValue("contractClientFK"), "0");
        String clientRoleFK = Util.initString(formBean.getValue("clientRoleFK"), "0");
        String editTrxPK = Util.initString(formBean.getValue("editTrxPK"), "0");
        String originatingTrxFK = Util.initString(formBean.getValue("originatingTrxPK"), "0");

        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        PageBean selectedTrx = contractTransactionSessionBean.getPageBean("formBean");

        String authorizedSignatureCT = formBean.getValue("authorizedSignatureCT");
        if (Util.isANumber(authorizedSignatureCT))
        {
            authorizedSignatureCT = codeTableWrapper.getCodeTableEntry(Long.parseLong(authorizedSignatureCT)).getCode();
        }
        else
        {
            authorizedSignatureCT = null;
        }

//        String billAmtEditOverrideIndStatus = formBean.getValue("billAmtEditOverrideIndStatus");

        String ignoreEditWarnings = appReqBlock.getReqParm("ignoreEditWarnings");
        ignoreEditWarnings = (ignoreEditWarnings == null) ? "" : ignoreEditWarnings;

//        String operator = appReqBlock.getUserSession().getUsername();

        String returnPage = null;
        boolean transactionMessageSet = false;
        boolean thisIsSchedEvent = false;

        long productStructurePK = segmentVO.getProductStructureFK();

        String transactionType = formBean.getValue("transactionType");
        String transactionTypeCode = getTrxCTFromDescription(transactionType, productStructurePK + "");

        String effectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("effectiveDate"));

        String frequency = formBean.getValue("frequencyId");

        if (Util.isANumber(frequency))
        {
            frequency = codeTableWrapper.getCodeTableEntry(Long.parseLong(frequency)).getCode();
            transactionBean.putValue("frequencyId", frequency);
        }
        else
        {
            transactionBean.putValue("frequencyId", frequency);
            frequency = null;
        }

        if (segmentVO.getSegmentStatusCT().equalsIgnoreCase("Terminated") ||
            segmentVO.getSegmentStatusCT().equalsIgnoreCase("Pending") ||
            segmentVO.getSegmentStatusCT().equalsIgnoreCase("Frozen") ||
            segmentVO.getSegmentStatusCT().equalsIgnoreCase("Surrendered") ||
            segmentVO.getSegmentStatusCT().equalsIgnoreCase("NotTaken") ||
            (segmentVO.getSegmentStatusCT().equalsIgnoreCase("FSHedgeFundPend") &&
             (!transactionTypeCode.equalsIgnoreCase("HFTA") && !transactionTypeCode.equalsIgnoreCase("HFTP") &&
              !transactionTypeCode.equalsIgnoreCase("HREM"))))
        {
            appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("transactionMessage", "Transaction Not Allowed For Contract Status");
            transactionMessageSet = true;
        }
        else if (segmentVO.getSegmentStatusCT().equalsIgnoreCase("DeathHedgeFundPend") ||
                 segmentVO.getSegmentStatusCT().equalsIgnoreCase("Death"))
        {
            Segment segment = Segment.findByPK(new Long(segmentVO.getSegmentPK()));

            boolean trxCanProcess = TransactionProcessor.checkForAllowableTransaction(segment, transactionTypeCode, new EDITDate(effectiveDate), frequency);
            if (!trxCanProcess)
            {
                appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("transactionMessage", "Transaction Not Allowed For Contract Status");
                transactionMessageSet = true;
            }
        }
        else
        {
            appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("transactionMessage", "");
        }

        if (effectiveDate == null)
        {
            appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("transactionMessage", "Effective Date Must Be Entered for Transaction");
            transactionMessageSet = true;
        }

        boolean saveSuccessful = false;

        DepositsVO[] trxDepositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("trxDepositsVOs");

        try
        {
            if (!transactionMessageSet)
            {
                thisIsSchedEvent = EDITTrx.checkForScheduledEventTrxType(transactionTypeCode);

                String riderType = formBean.getValue("optionId");

                if (Util.isANumber(riderType))
                {
                    riderType = codeTableWrapper.getCodeTableEntry(Long.parseLong(riderType)).getCode();
                    transactionBean.putValue("optionId", riderType);
                }

                String sequenceNumber = Util.initString(formBean.getValue("sequenceNumber"), "1");
                transactionBean.putValue("sequenceNumber", sequenceNumber);

                String taxYear = formBean.getValue("taxYear");

                 if (taxYear.equals(""))
                 {
                     taxYear = new EDITDate(effectiveDate).getFormattedYear();
                     transactionBean.putValue("taxYear", taxYear);
                 }

                String statusInd = formBean.getValue("statusInd");

                if (statusInd.equals(""))
                {
                    statusInd = "N";
                    transactionBean.putValue("statusInd", statusInd);
                }

                String lookBackIndStatus = formBean.getValue("lookBackIndStatus");

                if (lookBackIndStatus.equalsIgnoreCase("checked")) {
                    lookBackIndStatus = "Y";
                    transactionBean.putValue("lookBackIndStatus", "checked");
                } else {
                    lookBackIndStatus = "N";
                    transactionBean.putValue("lookBackIndStatus", "unchecked");
                }
                
                String zeroLoadIndStatus = formBean.getValue("zeroLoadIndStatus");

                if (zeroLoadIndStatus.equalsIgnoreCase("checked")) {
                	zeroLoadIndStatus = "Y";
                    transactionBean.putValue("zeroLoadIndStatus", "checked");
                } else {
                	zeroLoadIndStatus = "N";
                    transactionBean.putValue("zeroLoadIndStatus", "unchecked");
                }

                String accountingPeriod = formBean.getValue("accountingPeriod");
                transactionBean.putValue("accountingPeriod", accountingPeriod);

                String pendingStatus = Util.initString(formBean.getValue("pendingStatus"), "P");
                transactionBean.putValue("pendingStatus", pendingStatus);

                String groupAmount = Util.initString(formBean.getValue("amount"), "0");
                String groupPercent = Util.initString(formBean.getValue("groupPercent"), "0");
                String trxPercent = Util.initString(formBean.getValue("percent"), "0");

//                String pct = "0";
                String amount = "0";
                String amountReceived = "0";
//                String costBasis = "0";
                String deathStatus = null;
                String claimStatus = null;

                if (tokenizedContract != null)
                {
//                    pct = tokenizedContract[6];
                    amount = tokenizedContract[7];
                    amountReceived = Util.initString(tokenizedContract[8], "0");
//                    costBasis = tokenizedContract[10];
                    deathStatus = tokenizedContract[11];
                    claimStatus = tokenizedContract[14];
                }
                else
                {
                    amountReceived = Util.initString(formBean.getValue("amountReceived"), "0");
//                    costBasis = Util.initString(formBean.getValue("costBasis"), "0");
                }

                String grossNetInd = formBean.getValue("grossNetInd");

                if (Util.isANumber(grossNetInd))
                {
                    grossNetInd = codeTableWrapper.getCodeTableEntry(Long.parseLong(grossNetInd)).getCode();
                    transactionBean.putValue("grossNetInd", grossNetInd);
                }
                else
                {
                    transactionBean.putValue("grossNetInd", grossNetInd);
                    grossNetInd = null;
                }

                String premiumType = formBean.getValue("premiumType");

                if (Util.isANumber(premiumType))
                {
                    premiumType = codeTableWrapper.getCodeTableEntry(Long.parseLong(premiumType)).getCode();
                    transactionBean.putValue("premiumType", premiumType);
                }
                else
                {
                    transactionBean.putValue("premiumType", premiumType);
                    premiumType = null;
                }

                String distributionCode = formBean.getValue("distributionId");

                if (Util.isANumber(distributionCode))
                {
                    distributionCode = codeTableWrapper.getCodeTableEntry(Long.parseLong(distributionCode)).getCode();
                    transactionBean.putValue("distributionId", distributionCode);
                }
                else
                {
                    transactionBean.putValue("distributionId", distributionCode);
                    distributionCode = null;
                }

                String lifeContingent = formBean.getValue("lifeContingentId");

                if (Util.isANumber(lifeContingent))
                {
                    lifeContingent = codeTableWrapper.getCodeTableEntry(Long.parseLong(lifeContingent)).getCode();
                    transactionBean.putValue("lifeContingentId", lifeContingent);
                }
                else
                {
                    transactionBean.putValue("lifeContingentId", lifeContingent);
                    lifeContingent = null;
                }

                String complexChangeType = Util.initString(formBean.getValue("complexChangeType"), null);
                String complexChangeValue = Util.initString(formBean.getValue("complexChangeValue"), null);
                String suppressDecreaseFaceInd = formBean.getValue("suppressDecreaseFaceInd");

                if (suppressDecreaseFaceInd.equalsIgnoreCase("checked"))
                {
                    suppressDecreaseFaceInd = "Y";
                }
                else
                {
                    suppressDecreaseFaceInd = "N";
                }

                ContractSetupVO contractSetupAsVO = ContractSetup.findByPK(Long.parseLong(contractSetupPK));
                String userInvestmentInd = null;
                if (contractSetupAsVO != null)
                {
                    userInvestmentInd = Util.initString(contractSetupAsVO.getUserInvestmentOverrideInd(), null);
                }

                String lastDayOfMonthIndStatus = formBean.getValue("lastDayOfMonthIndStatus");

                if (lastDayOfMonthIndStatus.equalsIgnoreCase("checked"))
                {
                    lastDayOfMonthIndStatus = "Y";
                    transactionBean.putValue("lastDayOfMonthIndStatus", "checked");
                }
                else
                {
                    lastDayOfMonthIndStatus = "N";
                    transactionBean.putValue("lastDayOfMonthIndStatus", "unchecked");
                }

//                String costOfLivingIndStatus = formBean.getValue("costOfLivingIndStatus");

                if (transactionTypeCode.equalsIgnoreCase("IN"))
                {
//                    costOfLivingIndStatus = "Y";
                    transactionBean.putValue("costOfLivingIndStatus", "checked");
                }
                else
                {
//                    costOfLivingIndStatus = "N";
                    transactionBean.putValue("costOfLivingIndStatus", "unchecked");
                }

//                String incDecPercent = Util.initString(formBean.getValue("incDecPercent"), "0");

                String employerContribution = Util.initString(formBean.getValue("employerContribution"), "0");
                String employeeContribution = Util.initString(formBean.getValue("employeeContribution"), "0");

                String withdrawalType = Util.initString(formBean.getValue("withdrawalType"), "");

                if (Util.isANumber(withdrawalType))
                {
                    withdrawalType = codeTableWrapper.getCodeTableEntry(Long.parseLong(withdrawalType)).getCode();
                    transactionBean.putValue("withdrawalType", withdrawalType);
                }
                else
                {
                    transactionBean.putValue("withdrawalType", withdrawalType);
                }

                String reasonCode = Util.initString(formBean.getValue("reasonCode"), "");
                if (Util.isANumber(reasonCode))
                {
                    reasonCode = codeTableWrapper.getCodeTableEntry(Long.parseLong(reasonCode)).getCode();
                }


                String transferTypeCT = Util.initString(formBean.getValue("transferTypeCT"), null);

                String trxIsRescheduledInd = Util.initString(selectedTrx.getValue("trxIsRescheduledInd"), "N");
                String reapplyEDITTrxFK = Util.initString(selectedTrx.getValue("reapplyEDITTrxFK"), "0");
                String commissionStatus = Util.initString(selectedTrx.getValue("commissionStatus"), null);
//                String originatingTrxFK = Util.initString(selectedTrx.getValue("originatingTrxFK"), "0");
                String dueDate = null;

                if (thisIsSchedEvent)
                {
                    dueDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("dueDate"));

                    if (dueDate == null)
                    {
                        String startDate = formBean.getValue("startDate");

                        dueDate = startDate;

                        if (dueDate != null)
                        {
                            transactionBean.putValue("dueDate", startDate);
                        }
                        else
                        {
                            appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("transactionMessage", "Start Date Must Be Entered for Scheduled Transaction");
                            transactionMessageSet = true;
                        }
                    }
                }

                GroupSetupVO groupSetupVO = getGroupSetupVO(groupSetupPK);

                //  Overlay the GroupSetupVO's fields with the page's values
                groupSetupVO.setMemoCode(Util.initString(formBean.getValue("memoCode"), null));
                groupSetupVO.setPremiumTypeCT(premiumType);
                groupSetupVO.setGrossNetStatusCT(grossNetInd);
                groupSetupVO.setDistributionCodeCT(distributionCode);
                groupSetupVO.setGroupAmount(new EDITBigDecimal(groupAmount).getBigDecimal());
                groupSetupVO.setGroupPercent(new EDITBigDecimal(groupPercent).getBigDecimal());
//                groupSetupVO.setGroupPercent(new EDITBigDecimal(incDecPercent).getBigDecimal());
                groupSetupVO.setEmployerContribution(new EDITBigDecimal(employerContribution).getBigDecimal());
                groupSetupVO.setEmployeeContribution(new EDITBigDecimal(employeeContribution).getBigDecimal());
                groupSetupVO.setWithdrawalTypeCT(withdrawalType);

                setChargeOverrides(appReqBlock, groupSetupVO, effectiveDate);

                ContractSetupVO contractSetupVO = getContractSetupVO(contractSetupPK);

                //  Overlay the ContractSetupVO's fields with the page's values
                contractSetupVO.setGroupSetupFK(groupSetupVO.getGroupSetupPK());
                contractSetupVO.setSegmentFK(segmentVO.getSegmentPK());
                contractSetupVO.setPolicyAmount(new EDITBigDecimal(groupAmount).getBigDecimal());

                if (deathStatus != null)
                {
                    if (deathStatus.equals("null"))
                    {
                        deathStatus = null;
                    }
                }

                contractSetupVO.setDeathStatusCT(deathStatus);
                contractSetupVO.setAmountReceived(new EDITBigDecimal(amountReceived).getBigDecimal());

                if (claimStatus != null)
                {
                    if (claimStatus.equals("null"))
                    {
                        claimStatus = null;
                    }
                }

                contractSetupVO.setClaimStatusCT(claimStatus);
                contractSetupVO.setComplexChangeTypeCT(complexChangeType);
                contractSetupVO.setComplexChangeNewValue(complexChangeValue);
                contractSetupVO.setSuppressDecreaseFaceInd(suppressDecreaseFaceInd);
                contractSetupVO.setUserInvestmentOverrideInd(userInvestmentInd);

                if (trxDepositsVOs != null)
                {
                    List voInclusionList = new ArrayList();
                    voInclusionList.add(OutSuspenseVO.class);

                    for (int i = 0; i < trxDepositsVOs.length; i++)
                    {
                        if (new EDITBigDecimal(trxDepositsVOs[i].getAmountReceived()).isGT("0"))
                        {
                            if (trxDepositsVOs[i].getDepositsPK() < 0)
                            {
                                trxDepositsVOs[i].setDepositsPK(0);
                            }

                            long depositsPK = new Deposits(trxDepositsVOs[i]).save();
                            trxDepositsVOs[i].setDepositsPK(depositsPK);
                        }

                        if (new EDITBigDecimal(trxDepositsVOs[i].getAmountReceived()).isGT("0"))
                        {
                            boolean outSuspenseFound = false;

                            if (Long.parseLong(contractSetupPK) > 0)
                            {
                                Suspense suspense = Suspense.findByPK(new Long(trxDepositsVOs[i].getSuspenseFK()));
                                suspense.setPendingSuspenseAmount(suspense.getSuspenseAmount());
                                Set outSuspenseSet = suspense.getOutSuspenses();

                                if (outSuspenseSet != null)
                                {
                                    Iterator it = outSuspenseSet.iterator();

                                    while (it.hasNext())
                                    {
                                        OutSuspense outSuspense = (OutSuspense) it.next();
                                        if (outSuspense.getContractSetupFK() == Long.parseLong(contractSetupPK))
                                        {
                                            outSuspenseFound = true;
                                        }
                                    }
                                }
                            }

                            if (!outSuspenseFound)
                            {
                                OutSuspenseVO outSuspenseVO = new OutSuspenseVO();
                                outSuspenseVO.setOutSuspensePK(0);
                                outSuspenseVO.setContractSetupFK(contractSetupVO.getContractSetupPK());
                                outSuspenseVO.setSuspenseFK(trxDepositsVOs[i].getSuspenseFK());
                                outSuspenseVO.setAmount(trxDepositsVOs[i].getAmountReceived());

                                contractSetupVO.addOutSuspenseVO(outSuspenseVO);
                            }
                        }
                    }

                    //COSTBASIS MOD
                    EDITBigDecimal trxCostBasis = new EDITBigDecimal();

                    if ((segmentVO != null) && (segmentVO.getQualNonQualCT() != null))
                    {
                        if (segmentVO.getQualNonQualCT().equalsIgnoreCase("NonQualified"))
                        {
                            trxCostBasis = getCostBasis(trxDepositsVOs);
                            contractSetupVO.setCostBasis(trxCostBasis.getBigDecimal());
                        }
                    }
                }
                else
                {
                    contractSetupVO.setCostBasis(new EDITBigDecimal().getBigDecimal());
                }

                boolean overrideCreated = false;

                if (transactionTypeCode.equalsIgnoreCase("PY"))
                {
                    contractSetupVO.setCostBasis(contractSetupVO.getPolicyAmount());
                    overrideCreated = checkForFreeLookOverrides(segmentVO, effectiveDate, contractSetupVO, groupSetupVO, appReqBlock);
                }

                if (!overrideCreated)
                {
                    checkForInvestmentAllocOverrides(appReqBlock, contractSetupVO, segmentVO);
                }

                // Payee overrides
                SessionBean payeeOverrides = appReqBlock.getSessionBean("contractPayeeOverrides");

                if (payeeOverrides.hasPageBeans())
                {
                    Map payeeBeansHT = payeeOverrides.getPageBeans();
                    Iterator payeeBeansEnum = payeeBeansHT.values().iterator();
                    int i = 0;

                    while (payeeBeansEnum.hasNext())
                    {
                        PageBean payeeOverrideBean = (PageBean) payeeBeansEnum.next();

                        String payeeOverrideStatus = payeeOverrideBean.getValue("status");
                        String fedWithholdingType = payeeOverrideBean.getValue("fedWithholdingType");
                        String stateWithholdingType = payeeOverrideBean.getValue("stateWithholdingType");
                        String cityWithholdingType = payeeOverrideBean.getValue("cityWithholdingType");
                        String countyWithholdingType = payeeOverrideBean.getValue("countyWithholdingType");
                        String payeeEditTrxPK = payeeOverrideBean.getValue("editTrxPK");

                        if (!payeeOverrideStatus.equalsIgnoreCase("deleted"))
                        {
                            String segmentFK = payeeOverrideBean.getValue("segmentFK");
                            contractClientFK = payeeOverrideBean.getValue("contractClientFK");
                            clientSetupPK = Util.initString(payeeOverrideBean.getValue("clientSetupPK"), "0");

                            if (segmentFK.equals(segmentVO.getSegmentPK() + ""))
                            {
                                i++;
                                ClientSetupVO clientSetupVO = new ClientSetupVO();
                                clientSetupVO.setClientSetupPK(Long.parseLong(clientSetupPK));
                                clientSetupVO.setContractSetupFK(contractSetupVO.getContractSetupPK());
                                clientSetupVO.setContractClientFK(Long.parseLong(contractClientFK));
                                clientRoleFK = checkClientRoleFK(contractClientFK, clientRoleFK);
                                clientSetupVO.setClientRoleFK(Long.parseLong(clientRoleFK));

                                String ccAllocOverridePK = Util.initString(payeeOverrideBean.getValue("contractClientAllocationOverridePK"), "0");
                                String ccAllocFK = Util.initString(payeeOverrideBean.getValue("contractClientAllocationFK"), "0");

                                ContractClientAllocationOvrdVO ccAllocOverrideVO = new ContractClientAllocationOvrdVO();
                                ccAllocOverrideVO.setContractClientAllocationOvrdPK(Long.parseLong(ccAllocOverridePK));
                                ccAllocOverrideVO.setClientSetupFK(clientSetupVO.getClientSetupPK());
                                ccAllocOverrideVO.setContractClientAllocationFK(Long.parseLong(ccAllocFK));

                                clientSetupVO.addContractClientAllocationOvrdVO(ccAllocOverrideVO);

                                String withholdingFK = Util.initString(payeeOverrideBean.getValue("withholdingFK"), "0");
                                String withholdingOverridePK = Util.initString(payeeOverrideBean.getValue("withholdingOverridePK"), "0");

                                if (((fedWithholdingType == null) || fedWithholdingType.equals("")) && ((stateWithholdingType == null) || stateWithholdingType.equals("")) && ((cityWithholdingType == null) || cityWithholdingType.equals("")) && ((countyWithholdingType == null) || countyWithholdingType.equals("")))
                                {
                                    if (!withholdingFK.equals("0"))
                                    {
                                        eventComponent.deleteWithholdingOverride(Long.parseLong(withholdingFK));
                                    }
                                }
                                else
                                {
                                    WithholdingOverrideVO withholdingOverrideVO = new WithholdingOverrideVO();
                                    withholdingOverrideVO.setWithholdingOverridePK(Long.parseLong(withholdingOverridePK));

                                    withholdingOverrideVO.setClientSetupFK(clientSetupVO.getClientSetupPK());
                                    withholdingOverrideVO.setWithholdingFK(Long.parseLong(withholdingFK));

                                    clientSetupVO.addWithholdingOverrideVO(withholdingOverrideVO);
                                }

                                EDITTrxVO editTrxVO = initializeEDITTrx(appReqBlock, formBean, transactionTypeCode, effectiveDate, taxYear, thisIsSchedEvent, dueDate, statusInd, lookBackIndStatus, accountingPeriod);

                                if (Util.isANumber(editTrxPK))
                                {
                                    if (payeeEditTrxPK.equals(""))
                                    {
                                        editTrxVO.setEDITTrxPK(Long.parseLong(editTrxPK));
                                    }
                                    else
                                    {
                                        editTrxVO.setEDITTrxPK(Long.parseLong(payeeEditTrxPK));
                                    }

                                    editTrxVO.setClientSetupFK(clientSetupVO.getClientSetupPK());
                                    editTrxVO.setPendingStatus("P");
                                    //set the correct sequence number to be negative for now, it will be changed when saving each trx.
                                    editTrxVO.setSequenceNumber(i);

                                    editTrxVO.setTrxAmount(contractSetupVO.getPolicyAmount());
                                    editTrxVO.setTrxPercent(new EDITBigDecimal(trxPercent).getBigDecimal());
                                    editTrxVO.setTrxIsRescheduledInd(trxIsRescheduledInd);
                                    editTrxVO.setReapplyEDITTrxFK(Long.parseLong(reapplyEDITTrxFK));
                                    editTrxVO.setCommissionStatus(commissionStatus);
                                    editTrxVO.setOriginatingTrxFK(Long.parseLong(originatingTrxFK));
                                    String interestProceedsOverride = Util.initString(selectedTrx.getValue("interestOverride"), "0");
                                    editTrxVO.setInterestProceedsOverride(new EDITBigDecimal(interestProceedsOverride).getBigDecimal());
                                    editTrxVO.setNewPolicyNumber(selectedTrx.getValue("newPolicyNumber"));
                                    editTrxVO.setTransferTypeCT(transferTypeCT);
                                    editTrxVO.setAuthorizedSignatureCT(authorizedSignatureCT);
                                    editTrxVO.setPremiumDueCreatedIndicator(Util.initString(selectedTrx.getValue("preiumDueCreateInd"), "N"));

                                    clientSetupVO.addEDITTrxVO(editTrxVO);
                                }

                                contractSetupVO.addClientSetupVO(clientSetupVO);
                            }
                             // end if (segment keys equal)
                        }
                         // end if (payee override status)
                    }
                     // end while
                    if (i > 1)
                    {
                        resetTrxAmount(contractSetupVO, groupSetupVO, i);
                    }
                }
                 // end if
                else
                {
                    ClientSetupVO clientSetupVO = new ClientSetupVO();

                    if (Long.parseLong(clientSetupPK) > 0)
                    {
                        clientSetupVO.setClientSetupPK(Long.parseLong(clientSetupPK));
                        clientSetupVO.setContractSetupFK(contractSetupVO.getContractSetupPK());
                        clientSetupVO.setContractClientFK(Long.parseLong(contractClientFK));
                        clientSetupVO.setClientRoleFK(Long.parseLong(clientRoleFK));

                        EDITTrxVO editTrxVO = initializeEDITTrx(appReqBlock, formBean, transactionTypeCode, effectiveDate, taxYear, thisIsSchedEvent, dueDate, statusInd, lookBackIndStatus, accountingPeriod);

                        if (Long.parseLong(editTrxPK) > 0)
                        {
                        	// DECK: et EDITTrx for selectedRiderPK.  We could pass into the view and back to the java, and maybe we should, but nah...
                     
                        	EDITTrx editTrx = EDITTrx.findByPK(Long.parseLong(editTrxPK));
                            editTrxVO.setEDITTrxPK(Long.parseLong(editTrxPK));
                            editTrxVO.setClientSetupFK(Long.parseLong(clientSetupPK));
                            editTrxVO.setPendingStatus(pendingStatus);
                            editTrxVO.setSequenceNumber(Integer.parseInt(sequenceNumber));
                            editTrxVO.setTrxAmount(contractSetupVO.getPolicyAmount());
                            editTrxVO.setTrxPercent(new EDITBigDecimal(trxPercent).getBigDecimal());
                            editTrxVO.setTrxIsRescheduledInd(trxIsRescheduledInd);
                            editTrxVO.setReapplyEDITTrxFK(Long.parseLong(reapplyEDITTrxFK));
                            editTrxVO.setCommissionStatus(commissionStatus);
                            editTrxVO.setOriginatingTrxFK(Long.parseLong(originatingTrxFK));
                            editTrxVO.setInterestProceedsOverride(new EDITBigDecimal(Util.initString(selectedTrx.getValue("interestOverride"), "0")).getBigDecimal());
                            editTrxVO.setNewPolicyNumber(Util.initString(selectedTrx.getValue("newPolicyNumber"), null));
                            editTrxVO.setTransferTypeCT(transferTypeCT);
                            editTrxVO.setAuthorizedSignatureCT(authorizedSignatureCT);
                            editTrxVO.setPremiumDueCreatedIndicator(Util.initString(selectedTrx.getValue("premiumDueCreateInd"), "N"));
                            editTrxVO.setSelectedRiderPK(editTrx.getSelectedRiderPK());


                            clientSetupVO.addEDITTrxVO(editTrxVO);
                        }

                        contractSetupVO.addClientSetupVO(clientSetupVO);
                    }
                }

                groupSetupVO.addContractSetupVO(contractSetupVO);

                ScheduledEventVO scheduledEventVO = null;

                Segment segment = new Segment(segmentVO);
                String eventType = segment.setEventTypeForDriverScript();

                if (thisIsSchedEvent)
                {
                    scheduledEventVO = setupTrxInfoForEvent(appReqBlock, transactionTypeCode);
                }

                if (scheduledEventVO != null)
                {
                    groupSetupVO.addScheduledEventVO(scheduledEventVO);
                }

                EDITTrxVO newEditTrxVO = initializeEDITTrx(appReqBlock, formBean, transactionTypeCode, effectiveDate, taxYear, thisIsSchedEvent, dueDate, statusInd, lookBackIndStatus, accountingPeriod);
                newEditTrxVO.setTrxAmount(new EDITBigDecimal(amount).getBigDecimal());
                newEditTrxVO.setTrxPercent(new EDITBigDecimal(trxPercent).getBigDecimal());
                newEditTrxVO.setInterestProceedsOverride(new EDITBigDecimal(Util.initString(selectedTrx.getValue("interestOverride"), "0")).getBigDecimal());
                newEditTrxVO.setNewPolicyNumber(Util.initString(selectedTrx.getValue("newPolicyNumber"), null));
                newEditTrxVO.setReapplyEDITTrxFK(Long.parseLong(reapplyEDITTrxFK));
                newEditTrxVO.setTransferTypeCT(transferTypeCT);
                newEditTrxVO.setOriginatingTrxFK(Long.parseLong(originatingTrxFK));
                newEditTrxVO.setAuthorizedSignatureCT(authorizedSignatureCT);
                newEditTrxVO.setPremiumDueCreatedIndicator(Util.initString(selectedTrx.getValue("preiumDueCreateInd"), "N"));

                // Now re-compose the segment to pick up and investment overrides that might have been added.
                contract.business.Lookup contractLookup = new contract.component.LookupComponent();
                List voExclusionList = new ArrayList();
                voExclusionList.add(ClientRoleVO.class);
                voExclusionList.add(ContractClientAllocationOvrdVO.class);
                voExclusionList.add(WithholdingOverrideVO.class);
                voExclusionList.add(NoteReminderVO.class);
                voExclusionList.add(ContractSetupVO.class);
                voExclusionList.add(SegmentBackupVO.class);
                voExclusionList.add(RealTimeActivityVO.class);
                voExclusionList.add(PlacedAgentVO.class);
                voExclusionList.add(CommissionProfileVO.class);
                voExclusionList.add(InvestmentAllocationOverrideVO.class);
                voExclusionList.add(BucketHistoryVO.class);
                voExclusionList.add(InvestmentHistoryVO.class);
                voExclusionList.add(CommissionInvestmentHistoryVO.class);
                voExclusionList.add(SegmentHistoryVO.class);
                voExclusionList.add(ContractTreatyVO.class);

                segmentVO = contractLookup.getSegmentBySegmentPK(segmentVO.getSegmentPK(), true, voExclusionList)[0];

                if (!transactionMessageSet && (voEditException == null) && (editingException == null))
                {
                    if (thisIsAnalyzer)
                    {
                        newEditTrxVO.setEDITTrxPK(0);

                        CodeTableComponent codeTableComponent = new CodeTableComponent();

                        Analyzer analyzer = new AnalyzerComponent();
                        HttpSession session = appReqBlock.getHttpSession();
                        session.setAttribute("analyzerComponent", analyzer);

                        NaturalDocVO naturalDocVO =
                            codeTableComponent.buildNaturalDocForAnalyzer(groupSetupVO, newEditTrxVO, transactionType, segmentVO.getOptionCodeCT(), productStructurePK);

                        // Parameter isAnalyzeTrnasaction - when analyzing transaction the value is true.
                        analyzer.loadScriptAndParameters(naturalDocVO, transactionType, statusInd, eventType, effectiveDate, productStructurePK, true);

                        SessionBean paramBean = appReqBlock.getSessionBean("paramBean");
                        paramBean.clearState();

                        PageBean debugScriptBean = paramBean.getPageBean("debugScriptBean");
                        String[] scriptLines = analyzer.getScriptLines();
                        debugScriptBean.putValues("scriptLines", scriptLines, new String[]
                            {
                                "toString"
                            }, null);

                        String scriptName = analyzer.getScriptName();
                        debugScriptBean.putValue("scriptName", scriptName);
                        // No need to reset the script processor.
//                        analyzer.resetScriptProcessor();

                        String[] stringArray = analyzer.getDataStack();
                        debugScriptBean.putValues("dataStackValues", stringArray, new String[]
                            {
                                "toString"
                            }, null);

                        appReqBlock.getHttpSession().setAttribute("workingStorage", analyzer.getWS());
                        stringArray = analyzer.getFunctions();
                        debugScriptBean.putValues("functionTables", stringArray, new String[]
                            {
                                "toString"
                            }, null);
                        stringArray = analyzer.getFunctionEntry("");
                        debugScriptBean.putValues("functionEntries", stringArray, new String[]
                            {
                                "toString"
                            }, null);
                        stringArray = debugScriptBean.getValues("breakPoints");
                        debugScriptBean.putValues("breakPoints", stringArray, new String[]
                            {
                                "toString"
                            }, null);
                        debugScriptBean.putValue("instPtr", analyzer.getInstPtr());
                        debugScriptBean.putValue("lastInstPtr", analyzer.getLastInstPtr());
                        debugScriptBean.putValue("currentRow", analyzer.getCurrentRow());
                        appReqBlock.getHttpServletRequest().setAttribute("pageBean", debugScriptBean);
                        appReqBlock.getHttpServletRequest().setAttribute("analyzeTransaction", "true");
                    }
                    else
                    {
                        saveSuccessful = eventComponent.saveGroupSetup(groupSetupVO, newEditTrxVO, segmentVO, transactionType, segmentVO.getOptionCodeCT(), productStructurePK, ignoreEditWarnings, trxDepositsVOs);
                    }
                }
            }
        }
        catch (EDITEventException e)
        {
          System.out.println(e);

            e.printStackTrace(); //To change body of catch statement use File | Settings | File Templates.

            String message = "Error Saving Transaction [" + e.getMessage() + "]";

            appReqBlock.getHttpServletRequest().setAttribute("message", message);

            transactionMessageSet = true;

            ValidationVO[] validationVOs = e.getValidationVO();

            if (validationVOs != null)
            {
                if (validationVOs.length > 0)
                {
                    editingException = new PortalEditingException();

                    editingException.setValidationVOs(validationVOs);
                }
            }
            else
            {
                throw e;
            }
        }
        catch (PortalEditingException e)
        {
            editingException = e;
        }
        catch (EDITValidationException e)
        {
            editingException = new PortalEditingException(e.getMessage());
        }
        catch (RuntimeException e)
        {
            String message = e.getMessage();
            appReqBlock.getHttpServletRequest().setAttribute("message", message);

            transactionMessageSet = true;
        }
        finally
        {
            if (!transactionMessageSet)
            {
                if (trxDepositsVOs != null)
                {
                    for (int i = 0; i < trxDepositsVOs.length; i++)
                    {
                        if (new EDITBigDecimal(trxDepositsVOs[i].getAmountReceived()).isGT("0"))
                        {
                        	List voInclusionList = new ArrayList();
                            voInclusionList.add(OutSuspenseVO.class);
                            voInclusionList.add(ContractSetupVO.class);
                            voInclusionList.add(ClientSetupVO.class);
                            voInclusionList.add(EDITTrxVO.class);
                            
                            if (trxDepositsVOs[i].getDepositsPK() < 0)
                            {
                                trxDepositsVOs[i].setDepositsPK(0);
                            }

                            long depositEditTrxFK = getEDITTrxPK(trxDepositsVOs[i].getSuspenseFK(), voInclusionList);

                            trxDepositsVOs[i].setEDITTrxFK(depositEditTrxFK);
                            new Deposits(trxDepositsVOs[i]).save();

                            Suspense suspense = Suspense.findByPK(new Long(trxDepositsVOs[i].getSuspenseFK()));

                            if (suspense != null)
                            {
                                EDITBigDecimal suspenseAmount = suspense.getSuspenseAmount();
                                if (suspenseAmount.isGT(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
                                {
                                    suspense.setPendingSuspenseAmount(suspenseAmount);

                                    eventComponent.saveSuspenseForTransaction(suspense);
                                }
                            }
                        }
                    }
                }
            }

            if (saveSuccessful)
            {
                appReqBlock.getHttpSession().removeAttribute("trxDepositsVOs");
                appReqBlock.getHttpSession().removeAttribute("currentTrxDepositVO");

                // Reload all transactions...
                appReqBlock.getFormBean().removeValue("beginScrollingTrxPK");
                appReqBlock.getFormBean().removeValue("endScrollingTrxPK");
            }

            appReqBlock.getHttpServletRequest().setAttribute("analyzerMode", "true");

            if (!transactionMessageSet && (voEditException == null) && (editingException == null) && !thisIsAnalyzer)
            {
                loadTransactionProcess(appReqBlock);

                PageBean emptyFormBean = new PageBean();

                appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", emptyFormBean);
            }
            else
            {
                appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", transactionBean);
            }
            
         	// Check for logged exceptions that may have been created during script processing to alert user
            String contractNumber = segmentVO.getContractNumber();
            String exitMessage = "";
            
            logging.LogEntry[] logEntries = logging.LogEntry.findBy_LogNameContractNumberDateTime(Log.EXECUTE_TRANSACTION, contractNumber, processingDateTime);
            
            if (logEntries != null && logEntries.length > 0)
            {
            	exitMessage = "The following error(s) have been logged in the EXECUTE.TRANSACTION Log ... Please address: \\n";
            	
            	for (logging.LogEntry logEntry : logEntries)
            	{
            		exitMessage += "\\n " + logEntry.getLogMessage();
            	}
            	
            	appReqBlock.getHttpServletRequest().setAttribute("exitMessage", exitMessage);
            }
            else
            {
            	exitMessage = "Transaction Saved Successfully";
            	appReqBlock.getHttpServletRequest().setAttribute("exitMessage", exitMessage);
            }
            
            appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("processingDatetime", "");
            
            String trxSource = Util.initString(formBean.getValue("trxSource"), "");
            
            if (thisIsSchedEvent)
            {
                returnPage = CONTRACT_TRANS_SCHEDULED_EVENT;
            }
            else if (transactionTypeCode != null && transactionTypeCode.equalsIgnoreCase("PY") && trxSource != null && trxSource.equalsIgnoreCase("QuickPay")) {
            	appReqBlock.setReqParm("selectedRowIds_TransactionSuspenseTableModel", null);
            	return showQuickPayDialog(appReqBlock);
            }
            else if (EDITTrx.checkForPremiumTrxType(transactionTypeCode))
            {
                returnPage = CONTRACT_TRANS_PAYMENT;
            }
            else if ("TF".equalsIgnoreCase(transactionTypeCode) ||
                     "AA".equalsIgnoreCase(transactionTypeCode) ||
                     "PR".equalsIgnoreCase(transactionTypeCode) ||
                     "FT".equalsIgnoreCase(transactionTypeCode) ||
                     EDITTrx.TRANSACTIONTYPECT_SERIES_TRANSFER.equalsIgnoreCase(transactionTypeCode) ||
                     "HFTA".equalsIgnoreCase(transactionTypeCode) ||
                     "HFTP".equalsIgnoreCase(transactionTypeCode) ||
                     EDITTrx.TRANSACTIONTYPECT_HF_SERIES_AMT.equalsIgnoreCase(transactionTypeCode) ||
                     EDITTrx.TRANSACTIONTYPECT_HF_SERIES_PCT.equalsIgnoreCase(transactionTypeCode))
            {
                if (!transactionMessageSet && (voEditException == null) && (editingException == null) && !thisIsAnalyzer)
                {
                    appReqBlock.getHttpSession().setAttribute("uiFilteredFundVOs", new UIFilteredFundVO[0]);
                    appReqBlock.getHttpSession().setAttribute("uiInvestmentOverrideVOs", new UIInvestmentOverrideVO[0]);

                    appReqBlock.getSessionBean("contractInvestmentOverrides").clearState();
                }
                else
                {
                    UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructurePK + "");
                    appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);

                    UIInvestmentOverrideVO[] uiInvestmentOverrideVOs = buildUIInvestmentOverrideVO(segmentVO.getContractNumber());

                    if (uiInvestmentOverrideVOs != null)
                    {
                        appReqBlock.getHttpSession().setAttribute("uiInvestmentOverrideVOs", uiInvestmentOverrideVOs);
                    }
                    else
                    {
                        appReqBlock.getHttpSession().setAttribute("uiInvestmentOverrideVOs", new UIInvestmentOverrideVO[0]);
                    }
                }

                returnPage = CONTRACT_TRANSFER;
            }
            else
            {
                returnPage = CONTRACT_TRANS_WITHDRAWAL;
            }

            if (editingException != null)
            {
                if (editingException.getValidationVOs() ==  null)
                {
                    if (editingException.getAction().equalsIgnoreCase("MoneyLocked"))
                    {
                        appReqBlock.getHttpServletRequest().setAttribute("message", "Money Locked");
                    }
                    else
                    {
                        appReqBlock.getHttpServletRequest().setAttribute("message", "Invalid Investments");
                    }
                }

                editingException.setReturnPage(returnPage);
                throw editingException;
            }
            else if (voEditException != null)
            {
                voEditException.setReturnPage(returnPage);
                throw voEditException;
            }
            else
            {
                return returnPage;
            }
        }
    }

    /**
     * Format the Charges for the transaction
     * @param appReqBlock
     * @param groupSetupVO
     */
    private void setChargeOverrides(AppReqBlock appReqBlock, GroupSetupVO groupSetupVO, String effectiveDate) throws Exception
    {
        event.business.Event eventComponent = new event.component.EventComponent();
        // Charge overrides
        SessionBean chargeOverrides = appReqBlock.getSessionBean("contractChargeOverrides");

        Map chargeBeans = chargeOverrides.getPageBeans();
        Iterator keys = chargeBeans.keySet().iterator();

        while (keys.hasNext())
        {
            String key = (String) keys.next();
            PageBean chargeBean = (PageBean) chargeBeans.get(key);
            long chargePK = Long.parseLong(chargeBean.getValue("chargePK"));
            if (!chargeBean.getValue("deleteInd").equalsIgnoreCase("Y"))
            {
                ChargeVO chargeVO = new ChargeVO();

                chargeVO.setChargePK(chargePK);
                chargeVO.setGroupSetupFK(groupSetupVO.getGroupSetupPK());
                chargeVO.setChargeTypeCT(Util.initString(chargeBean.getValue("chargeType"), null));
                chargeVO.setChargeAmount(new EDITBigDecimal(chargeBean.getValue("chargeAmount")).getBigDecimal());
                if (chargeBean.getValue("oneTimeOnlyInd").equalsIgnoreCase("Y"))
                {
                    chargeVO.setOneTimeOnlyInd("Y");
                    if (chargeBean.getValue("oneTimeOnlyDate").equals(""))
                    {
                        chargeVO.setOneTimeOnlyDate(effectiveDate);
                    }
                    else
                    {
                        chargeVO.setOneTimeOnlyDate(chargeBean.getValue("oneTimeOnlyDate"));
                    }
                }
                groupSetupVO.addChargeVO(chargeVO);
            }
            else
            {
                eventComponent.deleteChange(chargePK);
            }
        }
         //end while

    }

    /**
     * When payee overrides entered, adjust the trx amount of the editTrx for the allocation percentage.
     * @param contractSetupVO
     * @param groupSetupVO
     * @param i
     */
    private void resetTrxAmount(ContractSetupVO contractSetupVO, GroupSetupVO groupSetupVO, int i)
    {

        EDITBigDecimal trxAmount = new EDITBigDecimal(groupSetupVO.getGroupAmount());
        ClientSetupVO[] clientSetupVOs = contractSetupVO.getClientSetupVO();
        EDITBigDecimal accumAmount = new EDITBigDecimal("0", 2);
        EDITBigDecimal adjustedAmount = new EDITBigDecimal("0", 2);
        i = i - 1;

//        for (int j = 0; j < clientSetupVOs.length; j++)
        for (int j = 0; j < i; j++)
        {
            long contractClientAllocationPK = clientSetupVOs[i].getContractClientAllocationOvrdVO(0).getContractClientAllocationFK();
            ContractClientAllocation contractClientAllocation = ContractClientAllocation.findByPK(contractClientAllocationPK);
            String allocationPercent = contractClientAllocation.getAllocationPercent().toString();
            adjustedAmount = trxAmount.multiplyEditBigDecimal(allocationPercent);
            clientSetupVOs[j].getEDITTrxVO(0).setTrxAmount(adjustedAmount.getBigDecimal());
            accumAmount = adjustedAmount.addEditBigDecimal(accumAmount);
        }

        adjustedAmount = trxAmount.subtractEditBigDecimal(accumAmount);
        
        clientSetupVOs[i].getEDITTrxVO(0).setTrxAmount(adjustedAmount.getBigDecimal());
    }

    private long getEDITTrxPK(long suspensePK, List voInclusionList)
    {
        long editTrxPK = 0;
        event.business.Event eventComponent = new event.component.EventComponent();

        try
        {
            SuspenseVO suspenseVO = eventComponent.composeSuspenseVO(suspensePK, voInclusionList);
            OutSuspenseVO[] outSuspenseVOs = suspenseVO.getOutSuspenseVO();

            if (outSuspenseVOs.length > 0)
            {
                ContractSetupVO contractSetupVO = (ContractSetupVO) outSuspenseVOs[0].getParentVO(ContractSetupVO.class);
                ClientSetupVO[] clientSetupVO = contractSetupVO.getClientSetupVO();
                editTrxPK = clientSetupVO[0].getEDITTrxVO(0).getEDITTrxPK();
            }
        }
        catch (Exception e)
        {
            System.out.println(e);
        }

        return editTrxPK;
    }

    private EDITTrxVO initializeEDITTrx(AppReqBlock appReqBlock, PageBean formBean, String transactionTypeCode, String effectiveDate, String taxYear,
                                         boolean thisIsSchedEvent, String dueDate,  String statusInd, String lookBackIndStatus, String accountingPeriod)
    {
        EDITTrxVO editTrxVO = new EDITTrxVO();

        editTrxVO.setEffectiveDate(effectiveDate);
        editTrxVO.setStatus(statusInd);

        editTrxVO.setTaxYear(Integer.parseInt(taxYear));

        if (thisIsSchedEvent)
        {
            editTrxVO.setDueDate(dueDate);
        }

        editTrxVO.setTransactionTypeCT(transactionTypeCode);

        editTrxVO.setLookBackInd(lookBackIndStatus);

        String operator = appReqBlock.getUserSession().getUsername();
        editTrxVO.setOperator(operator);
        editTrxVO.setMaintDateTime(new EDITDateTime().getFormattedDateTime());

        String noCorrespondenceIndStatus = formBean.getValue("noCorrespondenceIndStatus");
        String noAccountingIndStatus = formBean.getValue("noAccountingIndStatus");
        String noCommissionIndStatus = formBean.getValue("noCommissionIndStatus");
        String zeroLoadIndStatus = formBean.getValue("zeroLoadIndStatus");
        String noCheckEFTStatus = formBean.getValue("noCheckEFTStatus");
        String reinsuranceStatus = formBean.getValue("reinsuranceStatus");
        String billAmtEditOverrideIndStatus = formBean.getValue("billAmtEditOverrideIndStatus");

        if (noCorrespondenceIndStatus.equalsIgnoreCase("checked")) {
            editTrxVO.setNoCorrespondenceInd("Y");
        } else {
            editTrxVO.setNoCorrespondenceInd("N");
        }

        if (noAccountingIndStatus.equalsIgnoreCase("checked")) {
            editTrxVO.setNoAccountingInd("Y");
        } else {
            editTrxVO.setNoAccountingInd("N");
        }

        if (noCommissionIndStatus.equalsIgnoreCase("checked")) {
            editTrxVO.setNoCommissionInd("Y");
        } else {
            editTrxVO.setNoCommissionInd("N");
        }

        editTrxVO.setZeroLoadInd(zeroLoadIndStatus.equalsIgnoreCase("checked") ? "Y" : "N");

        if (noCheckEFTStatus.equalsIgnoreCase("checked")) {
            editTrxVO.setNoCheckEFT("Y");
        } else {
            editTrxVO.setNoCheckEFT("N");
        }

        if (billAmtEditOverrideIndStatus.equalsIgnoreCase("checked")) {
            editTrxVO.setBillAmtEditOverrideInd("Y");
        } else {
            editTrxVO.setBillAmtEditOverrideInd("N");
        }

        String notificationAmount = Util.initString(formBean.getValue("notificationAmount"), "0");
        String notificationAmountReceived = Util.initString(formBean.getValue("notificationAmountReceived"), "0");
        editTrxVO.setNotificationAmount(new EDITBigDecimal(notificationAmount).getBigDecimal());
        editTrxVO.setNotificationAmountReceived(new EDITBigDecimal(notificationAmountReceived).getBigDecimal());

        if (!reinsuranceStatus.equals(""))
        {
            editTrxVO.setReinsuranceStatus(reinsuranceStatus);
        }

        if (!accountingPeriod.equals(""))
        {
            editTrxVO.setAccountingPeriod(accountingPeriod);
            editTrxVO.setOriginalAccountingPeriod(accountingPeriod);
        }

        String contributionExcessDateStr = formBean.getValue("contributionExcessDate");
        EDITDate contributionExcessDate = null;

        if (!contributionExcessDateStr.equals(""))
        {
            contributionExcessDate = new EDITDate(contributionExcessDateStr);
        }

        if (contributionExcessDate != null)
        {
            editTrxVO.setDateContributionExcess(contributionExcessDate.getFormattedDate());
        }

        return editTrxVO;
    }

    private boolean checkForFreeLookOverrides(SegmentVO segmentVO,
                                              String effectiveDate, 
                                              ContractSetupVO contractSetupVO, 
                                              GroupSetupVO groupSetupVO,
                                              AppReqBlock appReqBlock) throws Exception
    {
        boolean overrideCreated = false;
        engine.business.Lookup engineLookup = new engine.component.LookupComponent();

        String grouping = "FREELOOKPROCESS";
        String field = "FREELOOKINDICATOR";
        String qualifierCT = "*";
        EDITDate effDate = new EDITDate(effectiveDate);

        AreaValueVO areaValueVO = engineLookup.getAreaValue(segmentVO.getProductStructureFK(), segmentVO.getIssueStateCT(), grouping, effDate, field, qualifierCT);

        if (areaValueVO != null)
        {
            if (areaValueVO.getAreaValue().equals("Y"))
            {
                //check waiver field and end date -- Life processing
                if (segmentVO.getWaiveFreeLookIndicator().equalsIgnoreCase("N"))
                {
                    if (segmentVO.getFreeLookEndDate() == null)
                    {
                        overrideCreated = createInvestmentAllocOverrideForPYTrx(contractSetupVO, segmentVO, effDate, appReqBlock);
                    }
                    else
                    {
                        if (new EDITDate(effectiveDate).before(new EDITDate(segmentVO.getFreeLookEndDate())))
                        {
                            overrideCreated = createInvestmentAllocOverrideForPYTrx(contractSetupVO, segmentVO, effDate, appReqBlock);
                        }
                    }
                }
            }
            else if (areaValueVO.getAreaValue().equals("E"))
            {
                // free look for eia product
                if ((groupSetupVO.getGroupSetupPK() == 0) && ((groupSetupVO.getPremiumTypeCT() != null) && !groupSetupVO.getPremiumTypeCT().equalsIgnoreCase("Issue")))
                {
                    // to make sure the override is created only once per transaction
                    overrideCreated = createInvestmentAllocOverrideForPYTrx(contractSetupVO, segmentVO, effDate, appReqBlock);
                }
            }
        }

        return overrideCreated;
    }

    private EDITBigDecimal getCostBasis(DepositsVO[] depositsVOs)
    {
        EDITBigDecimal costBasisResult = new EDITBigDecimal("0");

        for (int i = 0; i < depositsVOs.length; i++)
        {
            EDITBigDecimal costBasis = new EDITBigDecimal(depositsVOs[i].getCostBasis());
            EDITBigDecimal amtReceived = new EDITBigDecimal(depositsVOs[i].getAmountReceived());

            if (costBasis.isEQ("0"))
            {
                costBasisResult = costBasisResult.addEditBigDecimal(amtReceived);
            }
            else
            {
                costBasisResult = costBasisResult.addEditBigDecimal(costBasis);
            }
        }

        return costBasisResult;
    }

    private String checkClientRoleFK(String contractClientFK, String clientRoleFK) throws Exception
    {
        if (contractClientFK != "0")
        {
//            if (clientRoleFK.equals("0"))
//            {
                ContractClientVO[] contractClientVO = (ContractClientVO[]) DAOFactory.getContractClientDAO().findByContractClientPK(Long.parseLong(contractClientFK), false, null);
                clientRoleFK = contractClientVO[0].getClientRoleFK() + "";
//            }
        }

        return clientRoleFK;
    }

//    private String setReturnPageForValidation(String transactionType, boolean isScheduledEvent)
//    {
//        String returnPage = null;
//
//        if (isScheduledEvent)
//        {
//            returnPage = CONTRACT_TRANS_SCHEDULED_EVENT;
//        }
//
//        else if (transactionType.equalsIgnoreCase("PY") || transactionType.equalsIgnoreCase("PI") ||
//                 transactionType.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_PREMIUM_LOAN))
//        {
//            returnPage = CONTRACT_TRANS_PAYMENT;
//        }
//
//        else if (transactionType.equalsIgnoreCase("TF") || transactionType.equalsIgnoreCase("AA") || transactionType.equalsIgnoreCase("PR") || transactionType.equalsIgnoreCase("FT") || transactionType.equalsIgnoreCase("HFTA") || transactionType.equalsIgnoreCase("HFTP"))
//        {
//            returnPage = CONTRACT_TRANSFER;
//        }
//
//        else
//        {
//            returnPage = CONTRACT_TRANS_WITHDRAWAL;
//        }
//
//        return returnPage;
//    }

    private void checkForInvestmentAllocOverrides(AppReqBlock appReqBlock, ContractSetupVO contractSetupVO, SegmentVO segmentVO) throws Exception
    {
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();
        contract.business.Contract contractComponent = new contract.component.ContractComponent();
        event.business.Event eventComponent = new event.component.EventComponent();

        // Investment overrides
        SessionBean investmentOverrides = appReqBlock.getSessionBean("contractInvestmentOverrides");

        Map investmentBeans = investmentOverrides.getPageBeans();
        Iterator invOverrides = investmentBeans.values().iterator();

        while (invOverrides.hasNext())
        {
            PageBean investmentBean = (PageBean) invOverrides.next();

            String status = investmentBean.getValue("status");

            if (!status.equalsIgnoreCase("deleted"))
            {
                String invAllocOvrdPK = investmentBean.getValue("investmentAllocationOverridePK");
                String investmentFK = investmentBean.getValue("investmentFK");
                String invAllocFK = investmentBean.getValue("investmentAllocationFK");
                String fromToIndicator = investmentBean.getValue("fromToIndicator");
                String filteredFundFK = investmentBean.getValue("fundId");
                String allocPct = investmentBean.getValue("allocationPercent");
                String allocDollars = investmentBean.getValue("allocationDollars");
                String allocUnits = investmentBean.getValue("allocationUnits");
                String hfStatus = investmentBean.getValue("hfStatus");
                String hfiaIndicator = investmentBean.getValue("hfiaIndicator");
                String holdingAccountIndicator = investmentBean.getValue("holdingAccountIndicator");
                String bucketFK = investmentBean.getValue("bucketFK");
                String hfInvestmentFK = investmentBean.getValue("hfInvestmentFK");
                if (!Util.isANumber(investmentFK) ||
                        investmentFK.equals("0"))
                {
                    InvestmentVO[] investmentVOs = contractLookup.getInvestmentByFilteredFundFKAndSegmentFK(Long.parseLong(filteredFundFK), contractSetupVO.getSegmentFK());
                    InvestmentVO investmentVO = null;
                    boolean investmentFound = false;

                    if ((investmentVOs == null) || (investmentVOs.length == 0) ||
                         investmentVOs[0].getStatus() != null)
                    {
                        investmentVO = new InvestmentVO();
                        investmentVO.setInvestmentPK(0);
                        investmentVO.setSegmentFK(contractSetupVO.getSegmentFK());
                        investmentVO.setFilteredFundFK(Long.parseLong(filteredFundFK));
                        investmentFK = contractComponent.saveInvestmentVO(investmentVO) + "";
                        investmentVO.setInvestmentPK(Long.parseLong(investmentFK));
                    }
                    else
                    {
                        investmentVO = investmentVOs[0];
                        investmentFK = investmentVO.getInvestmentPK() + "";
                        investmentFound = true;
                    }

                    InvestmentAllocationVO investmentAllocationVO = new InvestmentAllocationVO();

                    if (Util.isANumber(invAllocFK))
                    {
                        investmentAllocationVO.setInvestmentAllocationPK(Long.parseLong(invAllocFK));
                    }
                    else
                    {
                        investmentAllocationVO.setInvestmentAllocationPK(0);
                    }

                    investmentAllocationVO.setInvestmentFK(Long.parseLong(investmentFK));

                    if (Util.isANumber(allocPct))
                    {
                        //investmentAllocationVO.setAllocationPercent(Double.parseDouble(allocPct));
                        investmentAllocationVO.setAllocationPercent(new EDITBigDecimal(allocPct).getBigDecimal());
                    }
                    else
                    {
                        investmentAllocationVO.setAllocationPercent(new EDITBigDecimal("0").getBigDecimal());
                    }

                    if (Util.isANumber(allocDollars))
                    {
                        //investmentAllocationVO.setDollars(Double.parseDouble(allocDollars));
                        investmentAllocationVO.setDollars(new EDITBigDecimal(allocDollars).getBigDecimal());
                    }
                    else
                    {
                        investmentAllocationVO.setDollars(new EDITBigDecimal().getBigDecimal());
                    }

                    if (Util.isANumber(allocUnits))
                    {
                        investmentAllocationVO.setUnits(new EDITBigDecimal(allocUnits).getBigDecimal());
                    }
                    else
                    {
                        investmentAllocationVO.setUnits(new EDITBigDecimal().getBigDecimal());
                    }

                    investmentAllocationVO.setOverrideStatus("O");

                    invAllocFK = contractComponent.saveInvestmentAllocationVO(investmentAllocationVO) + "";

                    investmentAllocationVO.setInvestmentAllocationPK(Long.parseLong(invAllocFK));

                    // update segmentVO for validation purpose
                    if (investmentFound)
                    {
                        InvestmentVO[] allInvestmentVOs = segmentVO.getInvestmentVO();

                        for (int i = 0; i < allInvestmentVOs.length; i++)
                        {
                            if (investmentVO.getInvestmentPK() == allInvestmentVOs[i].getInvestmentPK())
                            {
                                allInvestmentVOs[i].addInvestmentAllocationVO(investmentAllocationVO);

                                break;
                            }
                        }
                    }
                    else
                    {
                        investmentVO.addInvestmentAllocationVO(investmentAllocationVO);

                        segmentVO.addInvestmentVO(investmentVO);
                    }
                }

                InvestmentAllocationOverrideVO invAllocOvrdVO = new InvestmentAllocationOverrideVO();

                if (Util.isANumber(invAllocOvrdPK))
                {
                    invAllocOvrdVO.setInvestmentAllocationOverridePK(Long.parseLong(invAllocOvrdPK));
                }
                else
                {
                    invAllocOvrdVO.setInvestmentAllocationOverridePK(0);
                }

                invAllocOvrdVO.setContractSetupFK(contractSetupVO.getContractSetupPK());
                invAllocOvrdVO.setInvestmentFK(Long.parseLong(investmentFK));
                invAllocOvrdVO.setInvestmentAllocationFK(Long.parseLong(invAllocFK));
                invAllocOvrdVO.setToFromStatus(fromToIndicator);

                if (!hfStatus.equals(""))
                {
                    invAllocOvrdVO.setHFStatus(hfStatus);
                }
                else
                {
                    invAllocOvrdVO.setHFStatus("A");
                }

                if (!hfiaIndicator.equals(""))
                {
                    invAllocOvrdVO.setHFIAIndicator(hfiaIndicator);
                }
                else
                {
                    invAllocOvrdVO.setHFIAIndicator("N");
                }

                if (!holdingAccountIndicator.equals(""))
                {
                    invAllocOvrdVO.setHoldingAccountIndicator(holdingAccountIndicator);
                }
                else
                {
                    invAllocOvrdVO.setHoldingAccountIndicator("N");
                }

                if (Util.isANumber(bucketFK) && Long.parseLong(bucketFK) > 0)
                {
                    invAllocOvrdVO.setBucketFK(Long.parseLong(bucketFK));
                }

                if (Util.isANumber(hfInvestmentFK) && Long.parseLong(hfInvestmentFK) > 0)
                {
                    invAllocOvrdVO.setHedgeFundInvestmentFK(Long.parseLong(hfInvestmentFK));
                }

                contractSetupVO.addInvestmentAllocationOverrideVO(invAllocOvrdVO);
            }
             // end if
            else
            {
                String invAllocOvrdPK = investmentBean.getValue("investmentAllocationOverridePK");

                if (Util.isANumber(invAllocOvrdPK) && !invAllocOvrdPK.equals("0"))
                {
                    eventComponent.deleteInvestmentAllocationOverride(Long.parseLong(invAllocOvrdPK));
                }
            }
        }
         // end while
    }

    private boolean createInvestmentAllocOverrideForPYTrx(ContractSetupVO contractSetupVO, 
                                                          SegmentVO segmentVO, 
                                                          EDITDate effDate,
                                                          AppReqBlock appReqBlock) throws Exception
    {
        engine.business.Lookup engineLookup = new engine.component.LookupComponent();

        boolean overridesCreated = false;
        String field = "FREELOOKFUND";
        String grouping = "FREELOOKPROCESS";
        String qualifierCT = "*";

        AreaValueVO areaValueVO = engineLookup.getAreaValue(segmentVO.getProductStructureFK(), segmentVO.getIssueStateCT(), grouping, effDate, field, qualifierCT);

        if (areaValueVO != null)
        {
            String fundNumber = areaValueVO.getAreaValue();

            FilteredFundVO[] filteredFundVOs = engineLookup.getByFundNumber(fundNumber);

            overridesCreated = false;

            if (filteredFundVOs != null)
            {
                long filteredFundPK = filteredFundVOs[0].getFilteredFundPK();

                if (filteredFundPK != 0)
                {
                    overridesCreated = matchToInvestments(contractSetupVO, segmentVO, filteredFundPK, appReqBlock);
                }
            }
        }

        return overridesCreated;
    }

    private boolean matchToInvestments(ContractSetupVO contractSetupVO,
                                       SegmentVO segmentVO,
                                       long filteredFundFK,
                                       AppReqBlock appReqBlock) throws Exception
    {
        boolean overridesCreated = false;

        contract.business.Contract contractComponent = new contract.component.ContractComponent();

        InvestmentVO[] investmentVOs = segmentVO.getInvestmentVO();
        boolean investmentFound = false;
        InvestmentAllocationVO[] investmentAllocationVOs = null;
        boolean investmentAllocationFound = false;
        long investmentPK = 0;
        long investmentAllocationPK = 0;

        if (investmentVOs != null)
        {
            for (int i = 0; i < investmentVOs.length; i++)
            {
                if (filteredFundFK == investmentVOs[i].getFilteredFundFK() &&
                    investmentVOs[i].getStatus() == null)
                {
                    investmentFound = true;
                    investmentPK = investmentVOs[i].getInvestmentPK();
                    investmentAllocationVOs = investmentVOs[i].getInvestmentAllocationVO();

                    for (int j = 0; j < investmentAllocationVOs.length; j++)
                    {
                        String overrideStatus = investmentAllocationVOs[j].getOverrideStatus();

                        //double allocPct = investmentAllocationVOs[j].getAllocationPercent();
                        EDITBigDecimal allocPct = new EDITBigDecimal(investmentAllocationVOs[j].getAllocationPercent());

                        //if (overrideStatus.equalsIgnoreCase("O") && allocPct == 1.0)
                        if (overrideStatus.equalsIgnoreCase("O") && allocPct.isEQ("1"))
                        {
                            investmentAllocationFound = true;
                            investmentAllocationPK = investmentAllocationVOs[j].getInvestmentAllocationPK();

                            break;
                        }
                    }
                     // end of inner for loop
                }
            }
             //end of outer for loop
        }

        if (!investmentFound)
        {
            InvestmentVO investmentVO = new InvestmentVO();
            investmentVO.setInvestmentPK(investmentPK);
            investmentVO.setFilteredFundFK(filteredFundFK);
            investmentVO.setSegmentFK(segmentVO.getSegmentPK());
            investmentPK = contractComponent.saveInvestmentVO(investmentVO);
        }

        if (!investmentAllocationFound)
        {
            InvestmentAllocationVO investmentAllocationVO = new InvestmentAllocationVO();
            investmentAllocationVO.setInvestmentAllocationPK(investmentAllocationPK);
            investmentAllocationVO.setInvestmentFK(investmentPK);
            investmentAllocationVO.setAllocationPercent(new EDITBigDecimal("1").getBigDecimal());
            investmentAllocationVO.setOverrideStatus("O");
            investmentAllocationPK = contractComponent.saveInvestmentAllocationVO(investmentAllocationVO);
        }

        // Investment overrides
        SessionBean investmentOverrides = appReqBlock.getSessionBean("contractInvestmentOverrides");

        Map investmentBeans = investmentOverrides.getPageBeans();
        Iterator invOverrides = investmentBeans.values().iterator();

        boolean matchFound = false;

        while (invOverrides.hasNext())
        {
            PageBean investmentBean = (PageBean) invOverrides.next();

            String status = investmentBean.getValue("status");

            if (!status.equalsIgnoreCase("deleted"))
            {
                String investmentFK = investmentBean.getValue("investmentFK");
                String invAllocFK = investmentBean.getValue("investmentAllocationFK");

                if (Long.parseLong(investmentFK) == investmentPK &&
                    Long.parseLong(invAllocFK) == investmentAllocationPK)

                {
                    matchFound = true;
                }
            }
        }

        if (!matchFound)
        {
            //free look override does not already exist - create
            InvestmentAllocationOverrideVO investmentAllocationOverrideVO = new InvestmentAllocationOverrideVO();
            investmentAllocationOverrideVO.setInvestmentAllocationOverridePK(0);
            investmentAllocationOverrideVO.setContractSetupFK(contractSetupVO.getContractSetupPK());
            investmentAllocationOverrideVO.setInvestmentFK(investmentPK);
            investmentAllocationOverrideVO.setInvestmentAllocationFK(investmentAllocationPK);
            investmentAllocationOverrideVO.setToFromStatus("T");

            contractSetupVO.addInvestmentAllocationOverrideVO(investmentAllocationOverrideVO);

            overridesCreated = true;
        }

        return overridesCreated;
    }

    private ScheduledEventVO setupTrxInfoForEvent(AppReqBlock appReqBlock, String transactionType) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();
        PageBean formBean = appReqBlock.getFormBean();

        String scheduledEventPK = formBean.getValue("scheduledEventPK");

        String startDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("startDate"));

        String stopDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("stopDate"));

        if (stopDate == null)
        {
            stopDate = EDITDate.DEFAULT_MAX_DATE;
        }

        String lifeContingent = formBean.getValue("lifeContingentId");

        if (Util.isANumber(lifeContingent))
        {
            lifeContingent = codeTableWrapper.getCodeTableEntry(Long.parseLong(lifeContingent)).getCode();
        }
        else
        {
            lifeContingent = null;
        }

        String lastDayOfMonthIndStatus = formBean.getValue("lastDayOfMonthIndStatus");

        if (lastDayOfMonthIndStatus.equalsIgnoreCase("checked"))
        {
            lastDayOfMonthIndStatus = "Y";
        }
        else
        {
            lastDayOfMonthIndStatus = "N";
        }

        String costOfLivingIndStatus = formBean.getValue("costOfLivingIndStatus");

        if (transactionType.equalsIgnoreCase("IN"))
        {
            costOfLivingIndStatus = "Y";
        }
        else
        {
            costOfLivingIndStatus = "N";
        }

        String frequency = formBean.getValue("frequencyId");

        if (Util.isANumber(frequency))
        {
            frequency = codeTableWrapper.getCodeTableEntry(Long.parseLong(frequency)).getCode();
        }

        //        else
        //        {
        //            frequency = null;
        //        }
        ScheduledEventVO scheduledEventVO = new ScheduledEventVO();

        if (Util.isANumber(scheduledEventPK))
        {
            scheduledEventVO.setScheduledEventPK(Long.parseLong(scheduledEventPK));
        }
        else
        {
            scheduledEventVO.setScheduledEventPK(0);
        }

        scheduledEventVO.setStartDate(startDate);
        scheduledEventVO.setStopDate(stopDate);
        scheduledEventVO.setLastDayOfMonthInd(lastDayOfMonthIndStatus);
        scheduledEventVO.setFrequencyCT(frequency);
        scheduledEventVO.setLifeContingentCT(lifeContingent);
        scheduledEventVO.setCostOfLivingInd(costOfLivingIndStatus);

        return scheduledEventVO;
    }

    protected String deleteTransaction(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String editTrxPK = Util.initString(formBean.getValue("editTrxPK"), "");

        String transactionType = Util.initString(formBean.getValue("transactionType"), "");
        String productStructureId = Util.initString(formBean.getValue("companyStructureId"), "");
        PendingStatus pendingStatus = PendingStatus.getViaDBText(Util.initString(formBean.getValue("pendingStatus"), ""));

        String transactionTypeCode = getTrxCTFromDescription(transactionType, productStructureId);

        String operator = appReqBlock.getUserSession().getUsername();

        event.business.Event eventComponent = new event.component.EventComponent();

        if (Util.isANumber(editTrxPK))
        {
        	long lngEditTrxPk;
        	if (PendingStatus.PENDING == pendingStatus && (lngEditTrxPk = Long.parseLong(editTrxPK)) > 0) 
        	{
        		List voInclusionList = new ArrayList();
                voInclusionList.add(ClientSetupVO.class);
                voInclusionList.add(ContractSetupVO.class);
                voInclusionList.add(OutSuspenseVO.class);

                EDITTrxVO editTrxVO = new event.dm.composer.VOComposer().composeEDITTrxVOByEDITTrxPK(lngEditTrxPk, voInclusionList);

                ContractSetupVO contractSetupVO = (ContractSetupVO) editTrxVO.getParentVO(ClientSetupVO.class).getParentVO(ContractSetupVO.class);
                if (contractSetupVO.getOutSuspenseVOCount() > 0) {
                	eventComponent.replaceSuspense(contractSetupVO.getOutSuspenseVO(), operator);
                }
                
        		EDITTrx editTrx = new EDITTrx(lngEditTrxPk);
        		editTrx.setPendingStatus(PendingStatus.DELETED.getDbText());
        		editTrx.saveNonRecursively();
        	}
        	else
        	{
            	eventComponent.deleteClientTrx(Long.parseLong(editTrxPK), operator);
        	}
        }

        // Reload all transactions...
        appReqBlock.getHttpSession().getAttribute("trxDepositsVOs");
        clearAllTransactionSessions(appReqBlock);

        appReqBlock.getFormBean().putValue("noScrolling", "true");
        appReqBlock.getFormBean().removeValue("beginScrollingTrxPK");
        appReqBlock.getFormBean().removeValue("endScrollingTrxPK");
        loadTransactionProcess(appReqBlock);

        return getTransactionReturnPage(transactionTypeCode);
    }

    protected String cancelTransaction(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String transactionType = formBean.getValue("transactionType");
        transactionType = CodeTableWrapper.getSingleton().getCodeByCodeTableNameAndCodeDesc("TRXTYPE", transactionType);
        String editTrxPK = formBean.getValue("editTrxPK");

        DepositsVO[] depositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("trxDepositsVOs");

        if (depositsVOs != null)
        {
            for (int i = 0; i < depositsVOs.length; i++)
            {
                if (depositsVOs[i].getDepositsPK() < 0)
                {
                    if (depositsVOs[i].getSuspenseFK() > 0)
                    {
                        resetSuspensePendingAmount(depositsVOs[i].getSuspenseFK(), new EDITBigDecimal(depositsVOs[i].getAmountReceived()));
                    }
                }
                else if (depositsVOs[i].getDepositsPK() > 0)
                {
                    contract.business.Lookup contractLookup = new contract.component.LookupComponent();
                    DepositsVO depositsVO = contractLookup.composeDepositsVOByPK(depositsVOs[i].getDepositsPK());

                    if (depositsVO != null)
                    {
                        if (new EDITBigDecimal(depositsVO.getAmountReceived()).isEQ("0"))
                        {
                            resetSuspensePendingAmount(depositsVOs[i].getSuspenseFK(), new EDITBigDecimal(depositsVOs[i].getAmountReceived()));
                        }
                    }
                }
            }

            appReqBlock.getHttpSession().removeAttribute("trxDepositsVOs");
            appReqBlock.getHttpSession().removeAttribute("currentTrxDepositVO");

            return loadTransactionProcess(appReqBlock);
        }
        else if (transactionType != null && transactionType.equalsIgnoreCase("PY") &&
                 (Util.isANumber(editTrxPK) && Long.parseLong(editTrxPK) > 0))
        {
            appReqBlock.getHttpServletRequest().setAttribute("message", "Transaction Is Missing Deposits - Please Delete Transaction or Add Deposits");

            CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();
            String optionId = formBean.getValue("optionId");

            if (Util.isANumber(optionId))
            {
                optionId = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionId)).getCode();
                formBean.putValue("optionId", optionId);
            }

            String premiumType = formBean.getValue("premiumType");

            if (Util.isANumber(premiumType))
            {
                premiumType = codeTableWrapper.getCodeTableEntry(Long.parseLong(premiumType)).getCode();
                formBean.putValue("premiumType", premiumType);
            }

            appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", formBean);

            return CONTRACT_TRANS_PAYMENT;
        }
        else
        {
            appReqBlock.getHttpSession().removeAttribute("trxDepositsVOs");
            appReqBlock.getHttpSession().removeAttribute("currentTrxDepositVO");

            return loadTransactionProcess(appReqBlock);
        }
    }

    private void resetSuspensePendingAmount(long suspenseFK, EDITBigDecimal amountReceived) throws Exception
    {
        event.business.Event eventComponent = new event.component.EventComponent();

        SuspenseVO suspenseVO = eventComponent.composeSuspenseVO(suspenseFK, new ArrayList());

        if (suspenseVO != null)
        {
            EDITBigDecimal pendingAmt = Util.roundToNearestCent(suspenseVO.getPendingSuspenseAmount());

            if (pendingAmt.isGT(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
            {
                pendingAmt = pendingAmt.subtractEditBigDecimal(Util.roundToNearestCent(amountReceived));
                suspenseVO.setPendingSuspenseAmount(Util.roundToNearestCent(pendingAmt).getBigDecimal());
                eventComponent.saveSuspenseNonRecursively(suspenseVO);
            }
        }
    }

    protected String initializeContractState(AppReqBlock appReqBlock) throws Exception
    {
        clearAllContractSessions(appReqBlock);

        return TAB_CONTENT;
    }

    protected String getClientInfo(AppReqBlock appReqBlock) throws Exception
    {
        client.business.Lookup clientLookup = new client.component.LookupComponent();

        PageBean formBean = appReqBlock.getFormBean();

        String taxId = formBean.getValue("taxId");
        List voExclusionVector = new ArrayList();
        voExclusionVector.add(ClientAddressVO.class);
        voExclusionVector.add(ClientRoleVO.class);

        ClientDetailVO[] clientDetailVOs = clientLookup.findClientDetailByTaxId(taxId, true, voExclusionVector);

        if ((clientDetailVOs == null) || (clientDetailVOs.length == 0))
        {
            appReqBlock.getHttpServletRequest().setAttribute("searchStatus", "noData");
            appReqBlock.getHttpSession().setAttribute(taxId, new ClientDetailVO[0]);
        }

        else
        {
            appReqBlock.getHttpSession().setAttribute(taxId, clientDetailVOs);
        }

        String transactionType = appReqBlock.getReqParm("transactionType");
        formBean.putValue("transactionType", transactionType);

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return CONTRACT_TRANS_PAYEE_DIALOG;
    }

    protected String getContractIds(AppReqBlock appReqBlock) throws Exception
    {
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();

        SegmentVO[] segmentVOs = contractLookup.getAllSegments();

        PageBean pageBean = new PageBean();

        pageBean.putValues("contractIds", segmentVOs, new String[]
            {
                "getContractNumber"
            }, null);

        appReqBlock.getHttpServletRequest().setAttribute("pageBean", pageBean);

        return LOAD_CONTRACT_DIALOG;
    }

    /**
     * Loads information from persistence to the beans for display on the screen
     * @param appReqBlock
     * @return Next page to be displayed
     * @throws Exception
     */
    protected String loadContract(AppReqBlock appReqBlock) throws Exception
    {
        String segmentPK = appReqBlock.getFormBean().getValue("segmentPK");

        //  Get baseSegment
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();

        List voInclusionList = setListForSegmentVO();

        SegmentVO baseSegmentVO = contractLookup.composeSegmentVO(Long.parseLong(segmentPK), voInclusionList);

        //  Get optionCode
        String optionId = baseSegmentVO.getOptionCodeCT();

        clearAllContractSessions(appReqBlock);

        loadMainPage(appReqBlock, baseSegmentVO);

        loadRiders(appReqBlock, baseSegmentVO);

        loadClients(appReqBlock, baseSegmentVO);

        if (optionId.equalsIgnoreCase(Segment.OPTIONCODECT_UNIVERSAL_LIFE)) {
            SegmentVO[] segmentVOs = contractLookup.composeSegmentVOs(baseSegmentVO.getContractNumber(), voInclusionList);
        	loadAgentHierarchy(appReqBlock, segmentVOs);
        } else {
        	loadAgentHierarchy(appReqBlock, baseSegmentVO);
        }

        loadInvestment(appReqBlock, baseSegmentVO);

        loadContractRequirements(appReqBlock, baseSegmentVO);

        loadNotes(appReqBlock, baseSegmentVO);

        loadRMD(appReqBlock, baseSegmentVO);

        appReqBlock.getHttpSession().setAttribute("reloadHeader", "true");

        String productType = checkProductType(optionId);
        String mainReturnPage = getMainReturnPage(productType);

        return mainReturnPage;
        }

    /**
     * Loads main page information to the beans for display on the screen
     * @param appReqBlock
     * @param segmentVO
     * @throws Exception
     */
    private void loadMainPage(AppReqBlock appReqBlock, SegmentVO segmentVO) throws Exception
    {
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        SessionBean base = appReqBlock.getSessionBean("contractBase");
        SessionBean contractTaxesSessionBean = appReqBlock.getSessionBean("contractTaxesSessionBean");

        ContractClient contractClientOwner = getOwnerContractClient(segmentVO);
        ClientDetail clientDetailOwner = ClientDetail.findBy_SegmentPK_ClientRoleFK(segmentVO.getSegmentPK(), contractClientOwner.getClientRoleFK());

        PayoutVO[] payoutVO = segmentVO.getPayoutVO();
        
        String paidToDate = null;
        LifeVO[] lifeVOs = segmentVO.getLifeVO();
        LifeVO lifeVO = null;
        if ((lifeVOs != null) && (lifeVOs.length > 0)) {
        	lifeVO = lifeVOs[0];
            paidToDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(lifeVO.getPaidToDate());
        }
        contractMainSessionBean.putValue("paidToDate", paidToDate);

        BillScheduleVO billScheduleVO = null;
        if (segmentVO.getParentVOs() != null) {
            billScheduleVO = (BillScheduleVO) segmentVO.getParentVO(BillScheduleVO.class);
        }

        appReqBlock.getHttpSession().setAttribute("BillScheduleVO", billScheduleVO);
        
        if (clientDetailOwner != null) {
             contractMainSessionBean.putValue("policyOwnerName", clientDetailOwner.getLastName() + ", " + 
                                                                 clientDetailOwner.getFirstName());	
             contractMainSessionBean.putValue("ownerTaxId", clientDetailOwner.getTaxIdentification());
        }

        PageBean baseRiderBean = new PageBean();

        PremiumDueVO[] premiumDueVOs = segmentVO.getPremiumDueVO();
        if (premiumDueVOs != null) {
            appReqBlock.getHttpSession().setAttribute("premiumDueVOs", premiumDueVOs);
            baseRiderBean.putValue("premiumDueHistory", "checked");
        } else {
            baseRiderBean.putValue("premiumDueHistory", "unchecked");
        }

        //contract Bill history
        Bill[] bills = Bill.findBillHistoryBySegmentFK(new Long(segmentVO.getSegmentPK()));
        if (bills.length >0) {
                appReqBlock.getHttpSession().setAttribute("bills", bills);
                baseRiderBean.putValue("contractBillsInd", "checked");
        } else {
                appReqBlock.getHttpSession().setAttribute("bills", bills);
                baseRiderBean.putValue("contractBillsInd", "unchecked");
        }
        
        String segmentPK = segmentVO.getSegmentPK() + "";
        String contractId = segmentVO.getContractNumber();

        String contractGroupFK = Util.initString((segmentVO.getContractGroupFK() + ""), "0");
        String billScheduleFK = Util.initString((segmentVO.getBillScheduleFK() + ""), "0");
        String batchContractSetupFK = Util.initString((segmentVO.getBatchContractSetupFK() + ""), "0");
        String departmentLocationFK = Util.initString((segmentVO.getDepartmentLocationFK() + ""), "0");
        String priorContractGroupFK = Util.initString((segmentVO.getPriorContractGroupFK() + ""), "0");
        String originalContractGroupFK = Util.initString((segmentVO.getOriginalContractGroupFK() + ""), "0");
        String priorPRDDue = segmentVO.getPriorPRDDue();

        String billSchedulePK = Util.initString((billScheduleVO.getBillSchedulePK() + ""), "0");
        
        
        String billingSchedule = null;
        BillSchedule billSchedule = null;
        
        if (!billSchedulePK.equals("0"))
        {
            billSchedule = BillSchedule.findBy_BillSchedulePK(new Long(billSchedulePK));
            if (billSchedule != null) {
                billingSchedule = billSchedule.getBillMethodCT();
            }
        }
        
        contractMainSessionBean.putValue("billingSchedule", billingSchedule);
        
        String brandingCompany = null;
        MasterContract masterContract = MasterContract.findByPK(segmentVO.getMasterContractFK());
        if (masterContract != null) {
        	String brandingCode = masterContract.getBrandingCompanyCT();
        	if (brandingCode != null) {  
                CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();
        		brandingCompany = codeTableWrapper.getCodeDescByCodeTableNameAndCode("BRANDINGCOMPANY", brandingCode);
        	}
        }
        contractMainSessionBean.putValue("brandingCompany", brandingCompany);
        
        String groupNumber = null;
        String groupName = null;
        if (!contractGroupFK.equals("0"))
        {
            ContractGroup contractGroup = ContractGroup.findBy_ContractGroupPK(new Long(contractGroupFK));
            if (contractGroup != null) {
                groupNumber = contractGroup.getContractGroupNumber();
                ClientRole[] clientRoles = ClientRole.findBy_RoleType_ReferenceID(ClientRole.ROLETYPECT_GROUP, groupNumber);
                for (int c = 0; c < clientRoles.length; c ++) {
                    groupName = ClientDetail.findBy_ClientDetailPK(clientRoles[c].getClientDetailFK()).getCorporateName();	
                }
            } else {
                //throw error
            }
        }
        contractMainSessionBean.putValue("groupName", groupName);	

        String productStructureFK = segmentVO.getProductStructureFK() + "";
        String segmentStatus = segmentVO.getSegmentStatusCT();

        String effectiveDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getEffectiveDate());

        String appSignedDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getApplicationSignedDate());

        String appReceivedDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getApplicationReceivedDate());

        String issueDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getIssueDate());

        String dateInEffectDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getDateInEffect());

        String creationDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getCreationDate());

        String conversionDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getConversionDate());

        String deductionAmountEffectiveDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getDeductionAmountEffectiveDate());

        String creationOperator = segmentVO.getCreationOperator();

        String waiverInEffect = Util.initString(segmentVO.getWaiverInEffect(), "N");
        String waiverInEffectStatus = "";

        if (waiverInEffect.equalsIgnoreCase("Y"))
        {
            waiverInEffectStatus = "checked";
        }

        String cashWithAppInd = segmentVO.getCashWithAppInd();

        if (cashWithAppInd != null)
        {
            if (cashWithAppInd.equals("Y"))
            {
                cashWithAppInd = "checked";
            }
            else
            {
                cashWithAppInd = "unchecked";
            }
        }
        else
        {
            cashWithAppInd = "unchecked";
        }

        String consecutiveAPLCount = segmentVO.getConsecutiveAPLCount() + "";
        String ageAtIssue = segmentVO.getAgeAtIssue() + "";
        String originalStateCT = segmentVO.getOriginalStateCT() + "";
        String ratedGenderCT = segmentVO.getRatedGenderCT() + "";
        String underwritingClass = segmentVO.getUnderwritingClassCT() + "";
        String groupPlan = segmentVO.getGroupPlan() + "";
        String segmentAmount = segmentVO.getAmount().toString();
        String worksheetTypeCT = segmentVO.getWorksheetTypeCT();
        String dividendOptionCT = Util.initString(segmentVO.getDividendOptionCT(), "");

        String payoutPK = "";
        String startDate = "";
        String certainDuration = "";
        String frequency = "";
        String paymentAmount = "";
        String reduce1 = "";
        String reduce2 = "";
        String excessInterestMethod = "";
        String exclusionRatio = "";
        String finalPayDate = "";
        String lastCheckDate = "";
        String nextPaymentDate = "";
        String totalExpectedReturn = "";
        String yearlyTaxableBenefit = "";
        String finalDistributionAmount = "";
        String postJune301986InvestmentIndStatus = "";
        String certainPeriodEndDate = "";
        String lastDayOfMonthInd = "";
        String contractType = "";
        String units = "";
        String unitsChangeEffectiveDate = "";
        String originalUnits = "";
        String commissionPhaseID = "";
        String commissionPhaseOverride = "";
        String authorizedSignatureCT = "";

        String lastAnnivDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getLastAnniversaryDate());

        String expiryDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getExpiryDate());

        String sequence = segmentVO.getSequence() + "";
        
        String location = segmentVO.getLocation() + "";
        
        String indivAnnPremium = Util.formatDecimal("#############0.00", segmentVO.getIndivAnnPremium());

        String freeLookEndDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getFreeLookEndDate());

        String policyDeliveryDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getPolicyDeliveryDate());

        String chargeDeductDivisionIndStatus = Util.initString(segmentVO.getChargeDeductDivisionInd(), "");

        if (chargeDeductDivisionIndStatus.equalsIgnoreCase("Y"))
        {
            chargeDeductDivisionIndStatus = "checked";
        }

        String pointInScaleIndStatus = Util.initString(segmentVO.getPointInScaleIndicator(), "");

        if (pointInScaleIndStatus.equalsIgnoreCase("Y"))
        {
            pointInScaleIndStatus = "checked";
        }

        String chargeDeductAmount = segmentVO.getChargeDeductAmount() + "";

        String segmentName = segmentVO.getSegmentNameCT();

        //Set checkbox for Suspense History
        Suspense[] suspenses = Suspense.findSuspenseHistory(contractId);
        String suspenseHistoryStatus = "unchecked";
        if (suspenses != null)
        {
            suspenseHistoryStatus = "checked";
        }

        String mrdElection = "";
        String mrdAmount = "";

        if (payoutVO.length > 0)
        {
            payoutPK = payoutVO[0].getPayoutPK() + "";


            startDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(payoutVO[0].getPaymentStartDate());

            certainDuration = payoutVO[0].getCertainDuration() + "";
            lastDayOfMonthInd = payoutVO[0].getLastDayOfMonthInd();

            frequency = payoutVO[0].getPaymentFrequencyCT();

            postJune301986InvestmentIndStatus = Util.initString(payoutVO[0].getPostJune1986Investment(), "N");

            if (postJune301986InvestmentIndStatus.equals("N"))
            {
                    postJune301986InvestmentIndStatus = "unchecked";
                }
            else
            {
                postJune301986InvestmentIndStatus = "checked";
            }

            paymentAmount = Util.formatDecimal("#############0.00", payoutVO[0].getPaymentAmount());
            reduce1 = new EDITBigDecimal(payoutVO[0].getReducePercent1()).toString();
            reduce2 = new EDITBigDecimal(payoutVO[0].getReducePercent2()).toString();
            exclusionRatio = Util.formatDecimal("########0.000000000", payoutVO[0].getExclusionRatio());

            finalDistributionAmount = Util.formatDecimal("#############0.00", payoutVO[0].getFinalDistributionAmount());

            finalPayDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(payoutVO[0].getFinalPaymentDate());

            lastCheckDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(payoutVO[0].getLastCheckDate());

            nextPaymentDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(payoutVO[0].getNextPaymentDate());

            totalExpectedReturn = Util.formatDecimal("#############0.00", payoutVO[0].getTotalExpectedReturnAmount());
            yearlyTaxableBenefit = Util.formatDecimal("#############0.00", payoutVO[0].getYearlyTaxableBenefit());

            certainPeriodEndDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(payoutVO[0].getCertainPeriodEndDate());

            //store unused payout field in session in order not to lose if contract changed
            contractMainSessionBean.putValue("lastDayOfMonthInd", Util.initString(payoutVO[0].getLastDayOfMonthInd(), null));
            }

        String quoteDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getQuoteDate());
        String contractPremiumTaxes = Util.formatDecimal("#############0.00", segmentVO.getCharges());
        String frontEndLoads = Util.formatDecimal("#############0.00", segmentVO.getLoads());
        String contractFees = Util.formatDecimal("#############0.00", segmentVO.getFees());

        String optionId = segmentVO.getOptionCodeCT();

        if (optionId == null)
        {
            optionId = "";
        }

        String qualifiedType = segmentVO.getQualifiedTypeCT();
        String taxReportingGroup = segmentVO.getTaxReportingGroup();

        if (taxReportingGroup == null)
        {
            taxReportingGroup = "";
        }

        String qualNonQual = segmentVO.getQualNonQualCT();

        String purchaseAmount = Util.formatDecimal("#############0.00", segmentVO.getAmount());
        String savingsPercent = Util.formatDecimal("0.0##", segmentVO.getSavingsPercent());
        String dismembermentPercent = segmentVO.getDismembermentPercent() + "";
        String financialIndStatus = "unchecked";

        if ((purchaseAmount != "") && (paymentAmount != "") || (lastAnnivDate != null && !lastAnnivDate.equals("")))
        {
            financialIndStatus = "checked";
        }

        String exchangeIndStatus = segmentVO.getExchangeInd();

        if (exchangeIndStatus != null)
        {
            if (exchangeIndStatus.equals("Y"))
            {
                exchangeIndStatus = "checked";
            }
            else
            {
                exchangeIndStatus = "unchecked";
            }
        }
        else
        {
            exchangeIndStatus = "unchecked";
        }

        String issueState = Util.initString(segmentVO.getIssueStateCT(), "");
        String productStructureId = segmentVO.getProductStructureFK() + "";
        String freeAmount = Util.formatDecimal("##########0.00", segmentVO.getFreeAmount());
        String freeAmtRemaining = Util.formatDecimal("##########0.00", segmentVO.getFreeAmountRemaining());
        
        String premiumTaxSitusOverride = segmentVO.getPremiumTaxSitusOverrideCT();

        engine.business.Lookup engineLookup = new engine.component.LookupComponent();

        ProductStructureVO[] productStructureVO = engineLookup.getByProductStructureId(segmentVO.getProductStructureFK());
        Company company = Company.findByPK(productStructureVO[0].getCompanyFK());

        String companyName = company.getCompanyName();
        String marketingPackage = productStructureVO[0].getMarketingPackageName();
        String groupProduct = productStructureVO[0].getGroupProductName();
        String areaName = productStructureVO[0].getAreaName();
        String businessName = productStructureVO[0].getBusinessContractName();
        long productStructurePK = productStructureVO[0].getProductStructurePK();

        String costBasis = Util.formatDecimal("#############0.00", segmentVO.getCostBasis());

        String statusChangeDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getStatusChangeDate());

        String terminationDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(segmentVO.getTerminationDate());

        String recoveredCostBasis = Util.formatDecimal("#############0.00", segmentVO.getRecoveredCostBasis());

        String waiveFreeLookIndicator = Util.initString(segmentVO.getWaiveFreeLookIndicator(), "N");

        if (waiveFreeLookIndicator.equalsIgnoreCase("Y"))
        {
            waiveFreeLookIndicator = "checked";
        }
        else if (waiveFreeLookIndicator.equalsIgnoreCase("N"))
        {
            waiveFreeLookIndicator = "unchecked";
        }

        String freeLookDaysOverride = segmentVO.getFreeLookDaysOverride() + "";
        String dialableSalesLoadPct = Util.initString(new EDITBigDecimal(segmentVO.getDialableSalesLoadPercentage()).toString(), "");

        String commitmentIndicatorStatus = Util.initString(segmentVO.getCommitmentIndicator(), "");

        if (commitmentIndicatorStatus.equalsIgnoreCase("Y"))
        {
            commitmentIndicatorStatus = "checked";
        }

        boolean suppExists = setSupplementalLink(segmentVO, appReqBlock);
        if (suppExists)
        {
            baseRiderBean.putValue("suppIndStatus", "checked");
        }
        else
        {
            baseRiderBean.putValue("suppIndStatus", "unchecked");
        }

        //Set the header Type from ROTH conversion Ind or the CaseTracking Option
        String contractTypeCode = Util.initString(segmentVO.getCasetrackingOptionCT(), "");
        if (segmentVO.getROTHConvInd() != null)
        {
            if (segmentVO.getROTHConvInd().equalsIgnoreCase("Y"))
            {
                contractTypeCode = "ROTH Conversion";
            }
        }

        String commitmentAmount = Util.formatDecimal("#############0.00", segmentVO.getCommitmentAmount());
        
        String totalFaceAmount;
        if (optionId.equals(UNIVERSAL_LIFE) && lifeVO != null) 
        {
        	totalFaceAmount = Util.formatDecimal("#############0.00", lifeVO.getFaceAmount());
        }
        else
        {
        	totalFaceAmount = Util.formatDecimal("#############0.00", segmentVO.getTotalFaceAmount());
        }

        contractType = Util.initString(segmentVO.getContractTypeCT(), "");

        units = Util.initBigDecimal(segmentVO, "Units", new BigDecimal("0")).toString();
        originalUnits = Util.initBigDecimal(segmentVO, "OriginalUnits", new BigDecimal("0")).toString();
        commissionPhaseID = Util.initInt(new Segment(segmentVO), "CommissionPhaseID", 1) + "";
        commissionPhaseOverride = Util.initString(segmentVO.getCommissionPhaseOverride(), "");

        authorizedSignatureCT = Util.initString(segmentVO.getAuthorizedSignatureCT(), "");

        baseRiderBean.putValue("segmentPK", segmentPK);
        baseRiderBean.putValue("companyStructureId", productStructureFK);
        baseRiderBean.putValue("segmentStatus", segmentStatus);
        baseRiderBean.putValue("contractGroupFK", contractGroupFK);
        baseRiderBean.putValue("billScheduleFK", billScheduleFK);
        baseRiderBean.putValue("batchContractSetupFK", batchContractSetupFK);
        baseRiderBean.putValue("departmentLocationFK", departmentLocationFK);
        baseRiderBean.putValue("priorContractGroupFK", priorContractGroupFK);
        baseRiderBean.putValue("originalContractGroupFK", originalContractGroupFK);
        baseRiderBean.putValue("priorPRDDue", priorPRDDue);
        baseRiderBean.putValue("groupNumber", groupNumber);
        baseRiderBean.putValue("effectiveDate", effectiveDate);
        baseRiderBean.putValue("conversionDate", conversionDate);

        baseRiderBean.putValue("appSignedDate", appSignedDate);

        baseRiderBean.putValue("appReceivedDate", appReceivedDate);

        baseRiderBean.putValue("issueDate", issueDate);

        baseRiderBean.putValue("startDate", startDate);

        baseRiderBean.putValue("dateInEffectDate", dateInEffectDate);

        baseRiderBean.putValue("creationDate", creationDate);
        baseRiderBean.putValue("creationOperator", creationOperator);

        baseRiderBean.putValue("waiverInEffectStatus", waiverInEffectStatus);

        baseRiderBean.putValue("optionId", optionId);
        baseRiderBean.putValue("certainDuration", certainDuration);
        baseRiderBean.putValue("frequencyId", frequency);
        baseRiderBean.putValue("qualifiedType", qualifiedType);
        contractTaxesSessionBean.putValue("taxReportingGroup", taxReportingGroup);

        baseRiderBean.putValue("qualNonQual", qualNonQual);
        baseRiderBean.putValue("postJune301986InvestmentIndStatus", postJune301986InvestmentIndStatus);
        baseRiderBean.putValue("financialIndStatus", financialIndStatus);
        baseRiderBean.putValue("dateIndStatus", "checked");
        contractTaxesSessionBean.putValue("exchangeIndStatus", exchangeIndStatus);
        baseRiderBean.putValue("lastDayOfMonthInd", lastDayOfMonthInd);

        if (!taxReportingGroup.equals("") || exchangeIndStatus.equals("checked"))
        {
            baseRiderBean.putValue("taxesIndStatus", "checked");
        }

        else
        {
            baseRiderBean.putValue("taxesIndStatus", "unchecked");
        }

        if (segmentVO.getDepositsVOCount() > 0)
        {
            baseRiderBean.putValue("depositsIndStatus", "checked");
        }
        else
        {
            baseRiderBean.putValue("depositsIndStatus", "unchecked");
        }

        if (segmentVO.getRequiredMinDistributionVOCount() > 0)
        {
            baseRiderBean.putValue("rmdIndStatus", "checked");
        }
        else
        {
            baseRiderBean.putValue("rmdIndStatus", "unchecked");
        }

        if (segmentVO.getBillScheduleFK() > 0)
        {
            baseRiderBean.putValue("billingIndStatus", "checked");
        }
        else
        {
            baseRiderBean.putValue("billingIndStatus", "unchecked");
        }

        if (segmentVO.getEstateOfTheInsured() != null && segmentVO.getEstateOfTheInsured().equalsIgnoreCase(Segment.INDICATOR_YES))
        {
            baseRiderBean.putValue("estateOfTheInsuredIndStatus", "checked");
        }
        else
        {
            baseRiderBean.putValue("estateOfTheInsuredIndStatus", "unchecked");
        }

        baseRiderBean.putValue("excessInterest", excessInterestMethod);
        baseRiderBean.putValue("reduce1", reduce1);
        baseRiderBean.putValue("reduce2", reduce2);
        baseRiderBean.putValue("mrdElection", mrdElection);
        baseRiderBean.putValue("areaId", issueState);
        baseRiderBean.putValue("premiumTaxSitusOverride", premiumTaxSitusOverride);

        baseRiderBean.putValue("costBasis", costBasis);
        baseRiderBean.putValue("exclusionRatio", exclusionRatio);
        baseRiderBean.putValue("finalDistributionAmount", finalDistributionAmount);
        baseRiderBean.putValue("terminationDate", terminationDate);
        baseRiderBean.putValue("finalPayDate", finalPayDate);
        baseRiderBean.putValue("lastCheckDate", lastCheckDate);
        baseRiderBean.putValue("mrdAmount", mrdAmount);
        baseRiderBean.putValue("nextPaymentDate", nextPaymentDate);
        baseRiderBean.putValue("paymentAmount", paymentAmount);
        baseRiderBean.putValue("statusChangeDate", statusChangeDate);
        baseRiderBean.putValue("totalExpectedReturn", totalExpectedReturn);
        baseRiderBean.putValue("yearlyTaxableBenefit", yearlyTaxableBenefit);
        baseRiderBean.putValue("recoveredCostBasis", recoveredCostBasis);
        baseRiderBean.putValue("purchaseAmount", purchaseAmount);
        baseRiderBean.putValue("savingsPercent", savingsPercent);
        baseRiderBean.putValue("dismembermentPercent", dismembermentPercent);
        baseRiderBean.putValue("payoutPK", payoutPK);
        baseRiderBean.putValue("certainPeriodEndDate", certainPeriodEndDate);
        baseRiderBean.putValue("lastAnnivDate", lastAnnivDate);
        baseRiderBean.putValue("freeAmount", freeAmount);
        baseRiderBean.putValue("freeAmountRemaining", freeAmtRemaining);
        baseRiderBean.putValue("policyDeliveryDate", policyDeliveryDate);
        baseRiderBean.putValue("chargeDeductDivisionIndStatus", chargeDeductDivisionIndStatus);
        baseRiderBean.putValue("pointInScaleIndStatus", pointInScaleIndStatus);
        baseRiderBean.putValue("waiveFreeLookIndicator", waiveFreeLookIndicator);
        baseRiderBean.putValue("freeLookDaysOverride", freeLookDaysOverride);
        baseRiderBean.putValue("freeLookEndDate", freeLookEndDate);
        baseRiderBean.putValue("dialableSalesLoadPct", dialableSalesLoadPct);
        baseRiderBean.putValue("chargeDeductAmount", chargeDeductAmount);
        baseRiderBean.putValue("segmentName", segmentName);
        baseRiderBean.putValue("riderType", "");
        baseRiderBean.putValue("commitmentIndicatorStatus", commitmentIndicatorStatus);
        baseRiderBean.putValue("commitmentAmount", commitmentAmount);
        baseRiderBean.putValue("dateOfDeathValue", Util.initString((segmentVO.getDateOfDeathValue()+ ""), "0"));
        baseRiderBean.putValue("annuitizationValue", Util.initString((segmentVO.getAnnuitizationValue()+ ""), "0"));
        baseRiderBean.putValue("suppOriginalContractNumber", Util.initString(segmentVO.getSuppOriginalContractNumber(), ""));
        baseRiderBean.putValue("openClaimEndDate", Util.initString(segmentVO.getOpenClaimEndDate(), ""));
        baseRiderBean.putValue("chargeCodeStatus", Util.initString(segmentVO.getChargeCodeStatus(), ""));
        baseRiderBean.putValue("totalFaceAmount", totalFaceAmount);
        baseRiderBean.putValue("contractType", contractType);
        baseRiderBean.putValue("units", units);
        baseRiderBean.putValue("unitsChangeEffectiveDate", unitsChangeEffectiveDate);
        baseRiderBean.putValue("originalUnits", originalUnits);
        baseRiderBean.putValue("commissionPhaseID", commissionPhaseID);
        baseRiderBean.putValue("commissionPhaseOverride", commissionPhaseOverride);
        baseRiderBean.putValue("authorizedSignatureCT", authorizedSignatureCT);
        baseRiderBean.putValue("applicationState", Util.initString(segmentVO.getApplicationSignedStateCT(), ""));
        baseRiderBean.putValue("originalStateCT", Util.initString(segmentVO.getOriginalStateCT(), ""));
        baseRiderBean.putValue("annualPremium", segmentVO.getAnnualPremium() + "");
        baseRiderBean.putValue("applicationNumber", Util.initString(segmentVO.getApplicationNumber(), ""));
        baseRiderBean.putValue("memberOfContractGroup", Util.initString(segmentVO.getMemberOfContractGroup(), ""));
        baseRiderBean.putValue("postIssueStatus", Util.initString(segmentVO.getPostIssueStatusCT(), ""));
        baseRiderBean.putValue("ageAtIssue", ageAtIssue);
        baseRiderBean.putValue("originalStateCT", originalStateCT);
        baseRiderBean.putValue("ratedGenderCT", ratedGenderCT);
        baseRiderBean.putValue("underwritingClass", underwritingClass);
        baseRiderBean.putValue("groupPlan", groupPlan);
        baseRiderBean.putValue("segmentAmount", segmentAmount);
        baseRiderBean.putValue("worksheetTypeCT", worksheetTypeCT);
        baseRiderBean.putValue("dividendOptionCT", dividendOptionCT);
        baseRiderBean.putValue("suspenseHistoryStatus", suspenseHistoryStatus);
        baseRiderBean.putValue("scheduledTerminationDate", Util.initString(segmentVO.getScheduledTerminationDate(), ""));
        baseRiderBean.putValue("issueStateORInd", Util.initString(segmentVO.getIssueStateORInd(), ""));
        baseRiderBean.putValue("deductionAmountOverride", Util.initString(segmentVO.getDeductionAmountOverride()+"", "0"));
        baseRiderBean.putValue("deductionAmountEffectiveDate", Util.initString(deductionAmountEffectiveDate, ""));
        baseRiderBean.putValue("expiryDate", expiryDate);
        baseRiderBean.putValue("sequence", sequence);
        baseRiderBean.putValue("location", location);
        baseRiderBean.putValue("indivAnnPremium", indivAnnPremium);

        String mecStatus = "";

        if (lifeVO != null)
        {
            loadLifeVO(lifeVO, baseRiderBean);
            mecStatus = lifeVO.getMECStatusCT();
            appReqBlock.getHttpSession().setAttribute("lifeVO", lifeVO);
        }

        DepositsVO[] depositsVOs = segmentVO.getDepositsVO();
        appReqBlock.getHttpSession().setAttribute("depositsVOs", depositsVOs);

        NoteReminderVO[] noteReminderVOs = segmentVO.getNoteReminderVO();

        if (noteReminderVOs != null)
        {
            if (noteReminderVOs.length > 0)
            {
                baseRiderBean.putValue("notesIndStatus", "checked");
            }
        }

        //save unused contract fields in the session
        contractMainSessionBean.putValue("certainDuration", certainDuration);
        contractMainSessionBean.putValue("lastDayOfMonthInd", lastDayOfMonthInd);
        contractMainSessionBean.putValue("companyStructureId", productStructureId);
        contractMainSessionBean.putValue("quoteDate", quoteDate);
        contractMainSessionBean.putValue("statusCode", segmentStatus);
        contractMainSessionBean.putValue("premiumTaxes", contractPremiumTaxes);
        contractMainSessionBean.putValue("frontEndLoads", frontEndLoads);
        contractMainSessionBean.putValue("fees", contractFees);
        contractMainSessionBean.putValue("cashWithAppInd", cashWithAppInd);
        contractMainSessionBean.putValue("consecutiveAPLCount", consecutiveAPLCount);
        contractMainSessionBean.putValue("mecStatus", mecStatus);
        contractMainSessionBean.putValue("contractTypeCode", contractTypeCode);
        contractMainSessionBean.putValue("clientUpdate", Util.initString(segmentVO.getClientUpdate(), ""));
        contractMainSessionBean.putValue("totalBenes", Util.initString(segmentVO.getTotalActiveBeneficiaries()+ "", "0"));
        contractMainSessionBean.putValue("remainingBenes", Util.initString(segmentVO.getRemainingBeneficiaries() + "", "0"));
        contractMainSessionBean.putValue("finalNotifyDate", Util.initString(segmentVO.getFinalNotifyDate(), ""));
        contractMainSessionBean.putValue("requirementEffDate", Util.initString(segmentVO.getRequirementEffectiveDate(), ""));

        String scheduledPremiumAmount = "";
    	String billTypeCT = Util.initString(billScheduleVO.getBillTypeCT(), "");
    	PremiumDue premiumDue = null;

    	if (billScheduleVO != null) {
    		premiumDue = PremiumDue.findBySegmentPK_maxEffectiveDate(new Long(segmentPK), new EDITDate(billScheduleVO.getNextBillDueDate()));
    	} else {
    		premiumDue = PremiumDue.findBySegmentPK_LatestEffectiveDate(new Long(segmentPK));
    	}
    	
    	scheduledPremiumAmount = (premiumDue != null ? premiumDue.getScheduledPremiumAmount(billTypeCT) : "");    	
    	baseRiderBean.putValue("scheduledPremiumAmount", scheduledPremiumAmount);

        if (segmentVO.getContractGroupFK() > 0)
        {
            ContractGroup contractGroup = ContractGroup.findBy_ContractGroupPK(new Long(segmentVO.getContractGroupFK()));
            contractMainSessionBean.putValue("contractGroup", contractGroup.getContractGroupNumber());
        }

        contractMainSessionBean.putValue("companyStructure", companyName + "," + marketingPackage + "," + groupProduct + "," + areaName + "," + businessName);
        contractMainSessionBean.putValue("companyName", companyName);
        contractMainSessionBean.putValue("product", businessName);
        contractMainSessionBean.putValue("productStructurePK", String.valueOf(productStructurePK));

        base.putPageBean("contractBase", baseRiderBean);
        contractMainSessionBean.putValue("contractId", contractId);
        contractMainSessionBean.putValue("companyStructureId", productStructureId);

        contractMainSessionBean.putPageBean("formBean", baseRiderBean);
    }

    private boolean setSupplementalLink(SegmentVO segmentVO, AppReqBlock appReqBlock)
    {
        boolean suppExists = false;

        //When the SuppOriginalContractNumber is not null this contract was created from the contract specified
        if (segmentVO.getSuppOriginalContractNumber() != null)
        {
            suppExists = true;
        }
        else
        {
            SegmentVO[] segmentVOs = contract.dm.dao.DAOFactory.getSegmentDAO().findBySuppOriginalContractNumber(segmentVO.getContractNumber(), false, null);
            if (segmentVOs != null)
            {
                suppExists = true;
                Set contractNumbers = new HashSet();
                for (int i = 0; i < segmentVOs.length; i++)
                {
                    contractNumbers.add(segmentVOs[i].getContractNumber());
                }

                appReqBlock.getHttpSession().setAttribute("suppContractNumbers", contractNumbers);
            }
        }

        return suppExists;
    }

    /**
     * Put the Life table fields into the page bean for display
     * @param lifeVO
     * @param baseRiderBean
     */
    private void loadLifeVO(LifeVO lifeVO, PageBean baseRiderBean)
    {
        String lifePK = lifeVO.getLifePK() + "";
        String deathBeneOption = Util.initString(lifeVO.getDeathBenefitOptionCT(), "");
        String nonForfeitureOption = Util.initString(lifeVO.getNonForfeitureOptionCT(), "");
        String option7702 = Util.initString(lifeVO.getOption7702CT(), "");
        String term = Util.initString(lifeVO.getTerm() + "", "");
        String guidelineSinglePrem = lifeVO.getGuidelineSinglePremium() + "";
        String guidelineLevelPrem = Util.formatDecimal("#############0.00", lifeVO.getGuidelineLevelPremium());
        String tamra = Util.formatDecimal("#############0.00", lifeVO.getTamra());
        String faceAmount = Util.formatDecimal("#############0.00", lifeVO.getFaceAmount());
        String mecGuidelineSinglePremium = Util.formatDecimal("#############0.00", lifeVO.getMECGuidelineSinglePremium());
        String mecGuidelineLevelPremium = Util.formatDecimal("#############0.00", lifeVO.getMECGuidelineLevelPremium());
        String cumGuidelineLevelPremium = Util.formatDecimal("#############0.00", lifeVO.getCumGuidelineLevelPremium());
        String mecDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(lifeVO.getMECDate());
        String pendingDBOChangeIndStatus = Util.initString(lifeVO.getPendingDBOChangeInd(), "");

        if (pendingDBOChangeIndStatus.equalsIgnoreCase("Y"))
        {
            pendingDBOChangeIndStatus = "checked";
        }

        String startNew7PayIndicator = Util.initString(lifeVO.getStartNew7PayIndicator(), "");

        if (startNew7PayIndicator.equalsIgnoreCase("Y"))
        {
            startNew7PayIndicator = "checked";
        }

        String mecStatus = Util.initString(lifeVO.getMECStatusCT(), "");
        String maxNetAmountAtRisk = Util.formatDecimal("#############0.00", lifeVO.getMaximumNetAmountAtRisk());
        String paidToDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(lifeVO.getPaidToDate());
        String lapsePendingDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(lifeVO.getLapsePendingDate());
        String lapseDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(lifeVO.getLapseDate());
        String tamraStartDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(lifeVO.getTamraStartDate());
        String MAPEndDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(lifeVO.getMAPEndDate());
        String tamraInitAdjValue = Util.formatDecimal("#############0.00", lifeVO.getTamraInitAdjValue());

        baseRiderBean.putValue("lifePK", lifePK);
        baseRiderBean.putValue("deathBeneOption", deathBeneOption);
        baseRiderBean.putValue("nonForfeitureOption", nonForfeitureOption);
        baseRiderBean.putValue("option7702", option7702);
        baseRiderBean.putValue("term", term);
        baseRiderBean.putValue("guidelineSinglePrem", guidelineSinglePrem);
        baseRiderBean.putValue("guidelineLevelPrem", guidelineLevelPrem);
        baseRiderBean.putValue("faceAmount", faceAmount);
        baseRiderBean.putValue("tamra", tamra);
        baseRiderBean.putValue("MECDate", mecDate);
        baseRiderBean.putValue("pendingDBOChangeIndStatus", pendingDBOChangeIndStatus);
        baseRiderBean.putValue("tamraStartDate", tamraStartDate);
        baseRiderBean.putValue("MAPEndDate", MAPEndDate);
        baseRiderBean.putValue("mecGuidelineSinglePremium", mecGuidelineSinglePremium);
        baseRiderBean.putValue("mecGuidelineLevelPremium", mecGuidelineLevelPremium);
        baseRiderBean.putValue("cumGuidelineLevelPremium", cumGuidelineLevelPremium);
        baseRiderBean.putValue("startNew7PayIndicatorStatus", startNew7PayIndicator);
        baseRiderBean.putValue("mecStatus", mecStatus);
        baseRiderBean.putValue("maxNetAmountAtRisk", maxNetAmountAtRisk);
        baseRiderBean.putValue("paidToDate", paidToDate);
        baseRiderBean.putValue("lapsePendingDate", lapsePendingDate);
        baseRiderBean.putValue("lapseDate", lapseDate);
        baseRiderBean.putValue("currentDeathBenefit", lifeVO.getCurrentDeathBenefit() + "");
        baseRiderBean.putValue("guarPaidUpTerm", lifeVO.getGuarPaidUpTerm() + "");
        baseRiderBean.putValue("nonGuarPaidUpTerm", lifeVO.getNonGuarPaidUpTerm() + "");
        baseRiderBean.putValue("mortalityCredit", lifeVO.getMortalityCredit() + "");
        baseRiderBean.putValue("endowmentCredit", lifeVO.getEndowmentCredit() + "");
        baseRiderBean.putValue("excessInterestCredit", lifeVO.getExcessInterestCredit() + "");
        baseRiderBean.putValue("tamraInitAdjValue", tamraInitAdjValue);
    }

    /**
     * Loads ContractRequirement information to the beans for display on the screen
     * @param appReqBlock
     * @param segmentVO
     */
    private void loadContractRequirements(AppReqBlock appReqBlock, SegmentVO segmentVO)
    {
        ContractRequirementVO[] contractRequirementVOs = segmentVO.getContractRequirementVO();

        if (contractRequirementVOs != null)
        {
            appReqBlock.getHttpSession().setAttribute("contractRequirementVO", contractRequirementVOs);
        }
    }

    /**
     * Loads NoteReminder information to the beans for display on the screen
     * @param appReqBlock
     * @param segmentVO
     */
    private void loadNotes(AppReqBlock appReqBlock, SegmentVO segmentVO)
    {
        NoteReminderVO[] noteReminderVOs = segmentVO.getNoteReminderVO();

        if (noteReminderVOs != null)
        {
            SessionBean contractNotesSessionBean = appReqBlock.getSessionBean("contractNotesSessionBean");

            for (int n = 0; n < noteReminderVOs.length; n++)
            {
                PageBean noteBean = new PageBean();

                String noteReminderPK = noteReminderVOs[n].getNoteReminderPK() + "";
                String noteTypeId = noteReminderVOs[n].getNoteTypeCT();
                String sequence = noteReminderVOs[n].getSequence() + "";
                String noteQualifierId = noteReminderVOs[n].getNoteQualifierCT();
                String key = noteReminderPK + sequence + noteTypeId + noteQualifierId;
                String note = noteReminderVOs[n].getNote();

                noteBean.putValue("noteReminderPK", noteReminderPK);
                noteBean.putValue("segmentFK", noteReminderVOs[n].getSegmentFK() + "");
                noteBean.putValue("noteTypeId", noteTypeId);
                noteBean.putValue("sequence", sequence);
                noteBean.putValue("noteQualifierId", noteQualifierId);
                noteBean.putValue("note", note);
                noteBean.putValue("maintDate", noteReminderVOs[n].getMaintDateTime());
                noteBean.putValue("operator", noteReminderVOs[n].getOperator());

                noteBean.putValue("key", key);

                contractNotesSessionBean.putPageBean(key, noteBean);
            }
        }
    }

    /**
     * Puts the RMD VO into Session if it exists
     * @param appReqBlock
     * @param segmentVO
     * @throws Exception
     */
    private void loadRMD(AppReqBlock appReqBlock, SegmentVO segmentVO) throws Exception
    {
        RequiredMinDistributionVO[] rmdVO = segmentVO.getRequiredMinDistributionVO();

        if (rmdVO.length > 0)
        {
            appReqBlock.getHttpSession().setAttribute("rmdVO", rmdVO[0]);
        }
    }

    /**
     * Loads client information to the beans for display on the screen
     * @param appReqBlock
     * @param segmentVO
     * @throws Exception
     */
    private void loadClients(AppReqBlock appReqBlock, SegmentVO segmentVO) throws Exception
    {
        ContractClientVO[] contractClientVOs = segmentVO.getContractClientVO();

        PageBean clientPageBean = null;

        populateClientPageBean(contractClientVOs, clientPageBean, appReqBlock, segmentVO.getRiderNumber());

        SegmentVO[] riderVOs = segmentVO.getSegmentVO();

        for (int i = 0; i < riderVOs.length; i++)
        {
            ContractClientVO[] riderContractClientVOs = riderVOs[i].getContractClientVO();

            if (riderContractClientVOs != null && riderContractClientVOs.length > 0)
            {
                populateClientPageBean(riderContractClientVOs, clientPageBean, appReqBlock, riderVOs[i].getRiderNumber());
            }
        }
    }

    /**
     * Loads AgentHierarchy information to the beans for display on the screen
     * @param appReqBlock
     * @param segmentVO
     * @throws Exception
     */
    private void loadAgentHierarchy(AppReqBlock appReqBlock, SegmentVO segmentVO) throws Exception
    {
        List uiAgentHierarchies = new ArrayList();

            agent.business.Agent agentComponent = new agent.component.AgentComponent();

        AgentHierarchyAllocation[] agentHierarchyAllocations = AgentHierarchyAllocation.findAllBySegmentFK(new Long(segmentVO.getSegmentPK()));

        for (int i = 0; i < agentHierarchyAllocations.length; i++) {
                
            UIAgentHierarchyVO uiAgentHierarchyVO = new UIAgentHierarchyVO();

            uiAgentHierarchyVO.setAgentHierarchyAllocationVO(agentHierarchyAllocations[i].getAsVO());

            //  Need to get the fully composed AgentHierarchy and Agent from the fully composed Segment since pages need PlacedAgents, etc.
            AgentHierarchyVO[] agentHierarchyVOs = segmentVO.getAgentHierarchyVO();

            if (agentHierarchyVOs != null)
            {
                for (int j = 0; j < agentHierarchyVOs.length; j++)
                {
                    if (agentHierarchyVOs[j].getAgentHierarchyPK() == agentHierarchyAllocations[i].getAgentHierarchyFK().longValue())
                    {
                        //  This is the AgentHierarchy that goes with the AgentHierarchyAllocation, attach the allocation
                        // (for cloud land saves) and put it in the UI object
                        agentHierarchyVOs[j].addAgentHierarchyAllocationVO(agentHierarchyAllocations[i].getAsVO());

                        uiAgentHierarchyVO.setAgentHierarchyVO(agentHierarchyVOs[j]);

                        //  Get the composed Agent for this hierarchy and put in UI object
                        long agentFK = agentHierarchyVOs[j].getAgentFK();

                AgentVO agentVO = agentComponent.composeAgentVO(agentFK, new ArrayList());

                uiAgentHierarchyVO.setAgentVO(agentVO);

                        break;
                    }
                }
            }

                uiAgentHierarchyVO.setCoverage(segmentVO.getRiderNumber() + "_" + segmentVO.getOptionCodeCT());
                uiAgentHierarchyVO.setSegmentEffectiveDate(segmentVO.getEffectiveDate());
                uiAgentHierarchyVO.setSegmentFK(segmentVO.getSegmentPK());

                uiAgentHierarchies.add(uiAgentHierarchyVO);
            }

            if (uiAgentHierarchies.size() > 0)
            {
                UIAgentHierarchyVO[] uiAgentHierarchyVOs = (UIAgentHierarchyVO[]) uiAgentHierarchies.toArray(new UIAgentHierarchyVO[uiAgentHierarchies.size()]);

                appReqBlock.getHttpSession().setAttribute("uiAgentHierarchyVOs", uiAgentHierarchyVOs);
            }
        }

    /**
     * Loads AgentHierarchy information to the beans for display on the screen
     * @param appReqBlock
     * @param segmentVO
     * @throws Exception
     */
    private void loadAgentHierarchy(AppReqBlock appReqBlock, SegmentVO[] segmentVOs) throws Exception
    {
        List uiAgentHierarchies = new ArrayList();

        agent.business.Agent agentComponent = new agent.component.AgentComponent();

        // AgentHierarchyAllocation[] agentHierarchyAllocations = AgentHierarchyAllocation.findAllByContractNumber(segmentVOs[0].getContractNumber());
        AgentHierarchyAllocation[] agentHierarchyAllocations = null;

        if (segmentVOs != null) {
	        for (SegmentVO segmentVO : segmentVOs) {
	        	
	            agentHierarchyAllocations = AgentHierarchyAllocation.findAllBySegmentFK(new Long(segmentVO.getSegmentPK()));

		        for (AgentHierarchyAllocation agentHierarchyAllocation : agentHierarchyAllocations) {
		                
		        	UIAgentHierarchyVO uiAgentHierarchyVO = new UIAgentHierarchyVO();
		
		            uiAgentHierarchyVO.setAgentHierarchyAllocationVO(agentHierarchyAllocation.getAsVO());
		
		            //  Need to get the fully composed AgentHierarchy and Agent from the fully composed Segment since pages need PlacedAgents, etc.
		            AgentHierarchyVO[] agentHierarchyVOs = segmentVO.getAgentHierarchyVO();
		
		            if (agentHierarchyVOs != null && agentHierarchyVOs.length > 0) {
		            	
		                for (AgentHierarchyVO agentHierarchyVO : agentHierarchyVOs) {
		                    if (agentHierarchyVO.getAgentHierarchyPK() == agentHierarchyAllocation.getAgentHierarchyFK().longValue()) {
		                        //  This is the AgentHierarchy that goes with the AgentHierarchyAllocation, attach the allocation
		                        // (for cloud land saves) and put it in the UI object
		                        agentHierarchyVO.addAgentHierarchyAllocationVO(agentHierarchyAllocation.getAsVO());
		
		                        uiAgentHierarchyVO.setAgentHierarchyVO(agentHierarchyVO);
		
		                        //  Get the composed Agent for this hierarchy and put in UI object
		                        long agentFK = agentHierarchyVO.getAgentFK();
		
		                        AgentVO agentVO = agentComponent.composeAgentVO(agentFK, new ArrayList());
		
		                        uiAgentHierarchyVO.setAgentVO(agentVO);
		
		                        break;
		                    }
		                }
		                
		                uiAgentHierarchyVO.setCoverage(segmentVO.getRiderNumber() + "_" + segmentVO.getOptionCodeCT());
		                uiAgentHierarchyVO.setSegmentEffectiveDate(segmentVO.getEffectiveDate());
		                uiAgentHierarchyVO.setSegmentFK(segmentVO.getSegmentPK());
		            	
		                uiAgentHierarchies.add(uiAgentHierarchyVO);
		            }	
	            }
		    }
	    }

        if (uiAgentHierarchies.size() > 0) {
            UIAgentHierarchyVO[] uiAgentHierarchyVOs = (UIAgentHierarchyVO[]) uiAgentHierarchies.toArray(new UIAgentHierarchyVO[uiAgentHierarchies.size()]);

            appReqBlock.getHttpSession().setAttribute("uiAgentHierarchyVOs", uiAgentHierarchyVOs);
        }
    }

    /**
     * Loads Investment information to the beans for display on the screen
     * @param appReqBlock
     * @param segmentVO
     * @throws Exception
     */
    private void loadInvestment(AppReqBlock appReqBlock, SegmentVO segmentVO) throws Exception
    {
        SessionBean funds = appReqBlock.getSessionBean("contractFunds");

        engine.business.Lookup engineLookup = new engine.component.LookupComponent();

        String segmentPK = segmentVO.getSegmentPK() + "";
        String contractId = segmentVO.getContractNumber();
        String optionId = segmentVO.getOptionCodeCT();
        InvestmentVO[] investmentVOs = segmentVO.getInvestmentVO();

        boolean primaryFound = false;

        if (investmentVOs.length > 0)
        {
            for (int y = 0; y < investmentVOs.length; y++)
            {
                String status = investmentVOs[y].getStatus();
                if (status == null || status.equalsIgnoreCase(""))
                {
                String investmentPK = investmentVOs[y].getInvestmentPK() + "";
                long filteredFundFK = investmentVOs[y].getFilteredFundFK();
                List voInclusionList = new ArrayList();
                FundVO fundVO = engineLookup.composeFundVOByFilteredFundPK(filteredFundFK, voInclusionList);
                String fundName = "";
                String fundType = "";

                if (fundVO != null)
                {
                    fundName = fundVO.getName();
                    fundType = fundVO.getFundType();
                }

                    String excessIntCalcDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(investmentVOs[y].getExcessInterestCalculationDate());
                    String excessIntPymtDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(investmentVOs[y].getExcessInterestPaymentDate());
                String excessInterest = investmentVOs[y].getExcessInterest() + "";
                String excessIntMethod = investmentVOs[y].getExcessInterestMethod();
                    String excessIntStartDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(investmentVOs[y].getExcessInterestStartDate());
                String air = investmentVOs[y].getAssumedInvestmentReturn() + "";
                String depositBucketsIndStatus = "unchecked";
                long chargeCodeFK = investmentVOs[y].getChargeCodeFK();

                if (investmentVOs[y].getBucketVOCount() > 0)
                {
                    depositBucketsIndStatus = "checked";
                }

                PageBean fundRelationshipPageBean = null;
                String key = optionId + filteredFundFK;

                if (!funds.pageBeanExists(key))
                {
                    fundRelationshipPageBean = new PageBean();
                }
                else
                {
                    fundRelationshipPageBean = funds.getPageBean(key);
                }

                fundRelationshipPageBean.putValue("investmentPK", investmentPK);
                fundRelationshipPageBean.putValue("filteredFundFK", filteredFundFK + "");
                fundRelationshipPageBean.putValue("segmentFK", segmentPK);
                fundRelationshipPageBean.putValue("optionId", optionId);
                fundRelationshipPageBean.putValue("contractId", contractId);
                fundRelationshipPageBean.putValue("fundName", fundName);
                fundRelationshipPageBean.putValue("fundType", fundType);
                fundRelationshipPageBean.putValue("excessIntCalcDate", excessIntCalcDate);
                fundRelationshipPageBean.putValue("excessIntPymtDate", excessIntPymtDate);
                fundRelationshipPageBean.putValue("excessInterest", excessInterest);
                fundRelationshipPageBean.putValue("excessIntMethod", excessIntMethod);
                fundRelationshipPageBean.putValue("excessIntStartDate", excessIntStartDate);
                fundRelationshipPageBean.putValue("air", air);
                fundRelationshipPageBean.putValue("depositBucketsIndStatus", depositBucketsIndStatus);
                fundRelationshipPageBean.putValue("chargeCodeFK", chargeCodeFK+"");
                if (status != null)
                {
                    fundRelationshipPageBean.putValue("status", status);
                }

                EDITBigDecimal cumDollars = new EDITBigDecimal();

                EDITBigDecimal cumUnits = new EDITBigDecimal();

                //double guarCumValue = 0;
                EDITBigDecimal guarCumValue = new EDITBigDecimal();
//                    BucketAllocationVO[] bucketAllocationVO = null;
                BucketVO[] bucketVOs = investmentVOs[y].getBucketVO();
                int numberOfLoans = 0;

                if (fundType.equalsIgnoreCase("Loan"))
                {
                    numberOfLoans = investmentVOs[y].getBucketVOCount();
                }

                for (int b = 0; b < bucketVOs.length; b++)
                {
                    //cumDollars += bucketVOs[b].getCumDollars();
                    //cumDollars += bucketVOs[b].getCumDollars();
                    cumDollars = cumDollars.addEditBigDecimal(bucketVOs[b].getCumDollars());

                    //cumUnits += bucketVOs[b].getCumUnits();
                    cumUnits = cumUnits.addEditBigDecimal(bucketVOs[b].getCumUnits());

                    //guarCumValue += bucketVOs[b].getGuarCumValue();
                    guarCumValue = guarCumValue.addEditBigDecimal(bucketVOs[b].getGuarCumValue());
//                        bucketAllocationVO = bucketVOs[b].getBucketAllocationVO();
                }

                // String fundCumDollars = Util.formatDecimal("#########0.00", Util.roundDouble(cumDollars, 2));
                String fundCumDollars = Util.formatDecimal("#########0.00", EDITBigDecimal.round(cumDollars, 2));
                String fundCumUnits = cumUnits + "";
                String fundGuarCumValue = Util.formatDecimal("#########0.00", EDITBigDecimal.round(guarCumValue, 2));
                fundRelationshipPageBean.putValue("cumDollars", fundCumDollars);
                fundRelationshipPageBean.putValue("cumUnits", fundCumUnits);
                fundRelationshipPageBean.putValue("guarCumValue", fundGuarCumValue);
                fundRelationshipPageBean.putValue("numberOfLoans", numberOfLoans + "");

                InvestmentAllocationVO[] investmentAllocationVOs = investmentVOs[y].getInvestmentAllocationVO();
                primaryFound = false;

                for (int a = 0; a < investmentAllocationVOs.length; a++)
                {
                    String invAllocPK = investmentAllocationVOs[a].getInvestmentAllocationPK() + "";
                        String allocationPercent = (new EDITBigDecimal(investmentAllocationVOs[a].getAllocationPercent())).toString();
                        String overrideStatus = Util.initString(investmentAllocationVOs[a].getOverrideStatus(), "P");
                        String dollars = (new EDITBigDecimal(investmentAllocationVOs[a].getDollars())).toString();
                        String units = (new EDITBigDecimal(investmentAllocationVOs[a].getUnits())).toString();

                    if (overrideStatus.equalsIgnoreCase("P"))
                    {
                        primaryFound = true;
                        fundRelationshipPageBean.putValue("invAllocPK", invAllocPK);
                        fundRelationshipPageBean.putValue("allocationPercent", allocationPercent);
                        fundRelationshipPageBean.putValue("overrideStatus", overrideStatus);
                        fundRelationshipPageBean.putValue("dollars", dollars);
                        fundRelationshipPageBean.putValue("units", units);
                    }
                }

                if (!primaryFound)
                {
                    fundRelationshipPageBean.putValue("allocationPercent", "0");
                    fundRelationshipPageBean.putValue("overrideStatus", "O");
                }

                funds.putPageBean(key, fundRelationshipPageBean);
            }
        }
    }
    }
    /**
     * Loads history information to the beans for display on the screen
     * @param appReqBlock
     * @param segmentVO
     * @throws Exception
     */
    private void loadHistory(AppReqBlock appReqBlock, SegmentVO segmentVO) throws Exception
    {
        // Loops for Financial History VO
        event.business.Event eventComponent = new event.component.EventComponent();
        List voInclusionList = new ArrayList();
        voInclusionList.add(EDITTrxCorrespondenceVO.class);
        voInclusionList.add(EDITTrxHistoryVO.class);
        voInclusionList.add(WithholdingHistoryVO.class);
        voInclusionList.add(ChargeHistoryVO.class);
        voInclusionList.add(FinancialHistoryVO.class);
        voInclusionList.add(GroupSetupVO.class);
        voInclusionList.add(ContractSetupVO.class);
        voInclusionList.add(ClientSetupVO.class);
        voInclusionList.add(BucketHistoryVO.class);
        voInclusionList.add(BucketVO.class);
        voInclusionList.add(InvestmentVO.class);
        voInclusionList.add(FilteredFundVO.class);
        voInclusionList.add(FundVO.class);
        voInclusionList.add(OverdueChargeRemainingVO.class);

        String[] pendingStatuses = new String[]
        {
            "H", "L", "C", "B", "F", "S", "O"
        };

        EDITTrxVO[] editTrxVOs = eventComponent.composeEDITTrxVOBySegmentPK_AND_PendingStatus(segmentVO.getSegmentPK(), pendingStatuses, voInclusionList);

        if (editTrxVOs != null)
        {
            for (int k = 0; k < editTrxVOs.length; k++)
            {
                loadFinancialHistory(appReqBlock, segmentVO, editTrxVOs[k]);
            }
             // end for (EDIT Trx loop)

            appReqBlock.getHttpSession().setAttribute("editTrxVOs", editTrxVOs);
        }
         // end if (EDIT Trx)
    }

    protected void loadChangeHistory(AppReqBlock appReqBlock, ChangeHistoryVO[] changeHistoryVOs, SegmentVO segmentVO, String optionId) throws Exception
    {
        for (int j = 0; j < changeHistoryVOs.length; j++)
        {
            String fieldName = changeHistoryVOs[j].getFieldName();
            String tableName = changeHistoryVOs[j].getTableName();
//            long modifiedTableKey = changeHistoryVOs[j].getModifiedRecordFK();

            //              String idName = "";
            String afterValue = changeHistoryVOs[j].getAfterValue();
            String beforeValue = changeHistoryVOs[j].getBeforeValue();
            String changeHistoryId = changeHistoryVOs[j].getChangeHistoryPK() + "";

            String changeHistoryEffDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(changeHistoryVOs[j].getEffectiveDate());

            String maintDate = changeHistoryVOs[j].getMaintDateTime();
            String operator = changeHistoryVOs[j].getOperator();

            String processDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(changeHistoryVOs[j].getProcessDate());

            PageBean changeHistoryBean = new PageBean();

            changeHistoryBean.putValue("afterValue", afterValue);
            changeHistoryBean.putValue("beforeValue", beforeValue);
            changeHistoryBean.putValue("changeHistoryId", changeHistoryId);
            changeHistoryBean.putValue("effectiveDate", changeHistoryEffDate);
            changeHistoryBean.putValue("fieldName", fieldName);
            changeHistoryBean.putValue("maintDate", maintDate);
            changeHistoryBean.putValue("operator", operator);
            changeHistoryBean.putValue("processDate", processDate);
            changeHistoryBean.putValue("transactionType", "Non Financial");
            changeHistoryBean.putValue("optionId", optionId);
            changeHistoryBean.putValue("idName", tableName);
            changeHistoryBean.putValue("key", "ch_" + changeHistoryId);

            SessionBean histories = appReqBlock.getSessionBean("contractHistories");
            histories.putPageBean("ch_" + changeHistoryId, changeHistoryBean);
        }
         // ends loop of change History VO
    }

     private String loadHistory(AppReqBlock appReqBlock, EDITTrxHistory editTrxHistory) throws Exception
    {

        List voExclusionList = new ArrayList();
        voExclusionList.add(BucketVO.class);
        voExclusionList.add(InvestmentAllocationOverrideVO.class);
        voExclusionList.add(ContractRequirementVO.class);
        voExclusionList.add(RequiredMinDistributionVO.class);
        voExclusionList.add(CommissionInvestmentHistoryVO.class);
        voExclusionList.add(DepositsVO.class);
        voExclusionList.add(NoteReminderVO.class);
        voExclusionList.add(InherentRiderVO.class);
        voExclusionList.add(RealTimeActivityVO.class);
        voExclusionList.add(AgentHierarchyVO.class);
        voExclusionList.add(SegmentBackupVO.class);
        voExclusionList.add(ContractTreatyVO.class);
        voExclusionList.add(ContractSetupVO.class);
        voExclusionList.add(ContractClientAllocationVO.class);
        voExclusionList.add(WithholdingVO.class);
        voExclusionList.add(ClientSetupVO.class);
        voExclusionList.add(ClientRoleVO.class);

        EDITTrx editTrx = editTrxHistory.getEDITTrx();
        long segmentPK = editTrx.getClientSetup().getContractSetup().getSegmentFK().longValue();
        Segment segment = Segment.findByPK_UsingCRUD(segmentPK, voExclusionList);
        SegmentVO segmentVO = (SegmentVO)segment.getVO();

        event.business.Event eventComponent = new event.component.EventComponent();
        List voInclusionList = new ArrayList();
        voInclusionList.add(EDITTrxCorrespondenceVO.class);
        voInclusionList.add(EDITTrxHistoryVO.class);
        voInclusionList.add(WithholdingHistoryVO.class);
        voInclusionList.add(ChargeHistoryVO.class);
        voInclusionList.add(FinancialHistoryVO.class);
        voInclusionList.add(GroupSetupVO.class);
        voInclusionList.add(ContractSetupVO.class);
        voInclusionList.add(ClientSetupVO.class);
        voInclusionList.add(BucketHistoryVO.class);
        voInclusionList.add(BucketVO.class);
        voInclusionList.add(InvestmentVO.class);
        voInclusionList.add(FilteredFundVO.class);
        voInclusionList.add(FundVO.class);
        voInclusionList.add(OverdueChargeVO.class);
        voInclusionList.add(OverdueChargeSettledVO.class);
        EDITTrxVO editTrxVO = eventComponent.composeEDITTrxVOByEDITTrxPK(editTrxHistory.getEDITTrxFK().longValue(), voInclusionList);

        String id = loadFinancialHistory(appReqBlock, segmentVO, editTrxVO);

        return id;
    }

    /**
     * Loads history information to the beans for display on the screen
     * @param appReqBlock
     * @param segmentVO
     * @throws Exception
     */
    private String loadFinancialHistory(AppReqBlock appReqBlock, SegmentVO segmentVO, EDITTrxVO editTrxVO) throws Exception
    {
        SessionBean contractHistoryChargesSessionBean = appReqBlock.getSessionBean("contractHistoryChargesSessionBean");
        SessionBean fundActivities = appReqBlock.getSessionBean("contractFundActivities");

        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        String segmentPK = segmentVO.getSegmentPK() + "";
        String contractId = segmentVO.getContractNumber();
        String optionId = segmentVO.getOptionCodeCT();
        String freeAmount = Util.formatDecimal("##########0.00", segmentVO.getFreeAmount());
        String id = "";

        SessionBean histories = appReqBlock.getSessionBean("contractHistories");
        fundActivities.clearState();

        String transactionTypeCT = editTrxVO.getTransactionTypeCT();

//        if (editTrxVOs != null)
//        {
//            for (int k = 0; k < editTrxVOs.length; k++)
//            {
                ClientSetupVO clientSetupVO = (ClientSetupVO) editTrxVO.getParentVO(ClientSetupVO.class);
                ContractSetupVO contractSetupVO = (ContractSetupVO) clientSetupVO.getParentVO(ContractSetupVO.class);
                GroupSetupVO groupSetupVO = (GroupSetupVO) contractSetupVO.getParentVO(GroupSetupVO.class);

                String amountReceived = contractSetupVO.getAmountReceived() + "";

                EDITTrxHistoryVO[] editTrxHistoryVOs = editTrxVO.getEDITTrxHistoryVO();

//                if (editTrxHistoryVOs != null)
//                {
                    for (int h = 0; h < editTrxHistoryVOs.length; h++)
                    {
                        FinancialHistoryVO[] financialHistoryVOs = editTrxHistoryVOs[h].getFinancialHistoryVO();

                        WithholdingHistoryVO[] withholdingHistoryVOs = editTrxHistoryVOs[h].getWithholdingHistoryVO();
                        ChargeHistoryVO[] chargeHistoryVOs = editTrxHistoryVOs[h].getChargeHistoryVO();
                        String premiumTaxes = "";
                        String calculatedDistCode = "";

                        EDITBigDecimal sumLoads = new EDITBigDecimal();

                        EDITBigDecimal totalCharges = new EDITBigDecimal();

                        if (chargeHistoryVOs.length > 0)
                        {
                            PageBean chargeBean = new PageBean();

                            contractHistoryChargesSessionBean.putPageBean(editTrxHistoryVOs[h].getEDITTrxHistoryPK() + "", chargeBean);

                            for (int z = 0; z < chargeHistoryVOs.length; z++)
                            {
                                String chargeName = Util.initString(chargeHistoryVOs[z].getChargeTypeCT(), "");

                                EDITBigDecimal chargeAmount = new EDITBigDecimal(chargeHistoryVOs[z].getChargeAmount());

                                chargeBean.putValue(chargeName, chargeAmount.toString());

                                if (chargeName.equalsIgnoreCase("PremiumTax"))
                                {
                                    totalCharges = totalCharges.addEditBigDecimal(chargeAmount);

                                    premiumTaxes = Util.roundDoubleToString(chargeAmount.toString() + "");
                                }
                                else if (chargeName.equalsIgnoreCase("TransactionFee"))
                                {
                                    totalCharges = totalCharges.addEditBigDecimal(chargeAmount);
                                }
                                else
                                {
                                    if (chargeName.equalsIgnoreCase("MVA"))
                                    {
                                        chargeAmount = chargeAmount.negate();
                                    }

                                    totalCharges = totalCharges.addEditBigDecimal(chargeAmount);

                                    sumLoads = sumLoads.addEditBigDecimal(chargeAmount);
                                }
                            }
                        }

                        String charges = Util.roundDoubleToString(totalCharges + "");

                        String historyPK = editTrxHistoryVOs[h].getEDITTrxHistoryPK() + "";
                        EDITBigDecimal historyCheckAmt = new EDITBigDecimal();
                        String checkAmount = "";
                        String grossAmount = "";
                        String netAmount = "";
                        String taxableBenefit = "";
                        String historyCostBasis = "";
                        String accumulatedValue = "";
                        String surrenderValue = "";
                        String interestProceeds = "";

                        String priorDeathBenefitOption = "";
                        String unnecessaryPremiumInd = "";
                        String prevMAPEndDate = "";
                        String prevTamraInitAdjValue = "";
                        String currentDeathBenefit = "";
                        String currentCorridorPercent = "";
                        String surrenderCharge = "";
                        String currIntRate = "";

                        if ((financialHistoryVOs != null) && (financialHistoryVOs.length > 0))
                        {
                            historyCostBasis = Util.formatDecimal("#########0.00", EDITBigDecimal.round(financialHistoryVOs[0].getCostBasis(), 2));
                            historyCheckAmt = EDITBigDecimal.round(financialHistoryVOs[0].getCheckAmount(), 2);
                            checkAmount = Util.formatDecimal("#########0.00", historyCheckAmt);
                            grossAmount = Util.formatDecimal("#########0.00", EDITBigDecimal.round(financialHistoryVOs[0].getGrossAmount(), 2));
                            netAmount = Util.formatDecimal("#########0.00", EDITBigDecimal.round(financialHistoryVOs[0].getNetAmount(), 2));
                            taxableBenefit = Util.formatDecimal("#########0.00", EDITBigDecimal.round(financialHistoryVOs[0].getTaxableBenefit(), 2));
                            calculatedDistCode = Util.initString(financialHistoryVOs[0].getDistributionCodeCT(), "");

                            priorDeathBenefitOption = Util.initString(financialHistoryVOs[0].getPriorDeathBenefitOption(), "");
                            unnecessaryPremiumInd = Util.initString(financialHistoryVOs[0].getUnnecessaryPremiumInd(), "");
                            prevMAPEndDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(financialHistoryVOs[0].getPrevMAPEndDate());
                            
                            if (financialHistoryVOs[0].getPrevTamraInitAdjValue() != null) {
                            	prevTamraInitAdjValue = Util.formatDecimal("#########0.00", EDITBigDecimal.round(financialHistoryVOs[0].getPrevTamraInitAdjValue(), 2));
                            }
                            
                            if (financialHistoryVOs[0].getCurrentDeathBenefit() != null) {
                            	currentDeathBenefit = Util.formatDecimal("#########0.00", EDITBigDecimal.round(financialHistoryVOs[0].getCurrentDeathBenefit(), 2));
                            }
                            
                            if (financialHistoryVOs[0].getCurrentCorridorPercent() != null) {
                            	currentCorridorPercent = Util.formatDecimal("#########0.000000", EDITBigDecimal.round(financialHistoryVOs[0].getCurrentCorridorPercent(), 6));
                            }
                            
                            if (financialHistoryVOs[0].getSurrenderCharge() != null) {
                            	surrenderCharge = Util.formatDecimal("#########0.00", EDITBigDecimal.round(financialHistoryVOs[0].getSurrenderCharge(), 2));
                            }
                            
                            if (financialHistoryVOs[0].getCurrIntRate() != null) {
                            	currIntRate = Util.formatDecimal("#########0.0000000000", EDITBigDecimal.round(financialHistoryVOs[0].getCurrIntRate(), 10));
                            }
                            
                            if (financialHistoryVOs[0].getAccumulatedValue() != null) {
                                accumulatedValue = Util.formatDecimal("########0.00", EDITBigDecimal.round(financialHistoryVOs[0].getAccumulatedValue(), 2));
                            }
                            
                            if (financialHistoryVOs[0].getSurrenderValue() != null) {
                                surrenderValue = Util.formatDecimal("########0.00", EDITBigDecimal.round(financialHistoryVOs[0].getSurrenderValue(), 2));
                            }

                            if (financialHistoryVOs[0].getInterestProceeds() != null) {
                                interestProceeds = Util.formatDecimal("########0.00", EDITBigDecimal.round(financialHistoryVOs[0].getInterestProceeds(), 2));
                            }
                        }

                        String cityWithholding = "";
                        String countyWithholding = "";
                        String stateWithholding = "";
                        String federalWithholding = "";
                        String financialClientId = "";

                        if ((withholdingHistoryVOs != null) && (withholdingHistoryVOs.length > 0))
                        {
                            cityWithholding = Util.formatDecimal("########0.00", EDITBigDecimal.round(withholdingHistoryVOs[0].getCityWithholdingAmount(), 2));
                            countyWithholding = Util.formatDecimal("########0.00", EDITBigDecimal.round(withholdingHistoryVOs[0].getCountyWithholdingAmount(), 2));
                            stateWithholding = Util.formatDecimal("########0.00", EDITBigDecimal.round(withholdingHistoryVOs[0].getStateWithholdingAmount(), 2));
                            federalWithholding = Util.formatDecimal("########0.00", EDITBigDecimal.round(withholdingHistoryVOs[0].getFederalWithholdingAmount(), 2));
                        }

                        String financialHistoryEffDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(editTrxVO.getEffectiveDate());

                        String transactionType = null;
                        transactionType = codeTableWrapper.getCodeDescByCodeTableNameAndCode("TRXTYPE", transactionTypeCT);
                        if (transactionType == null)
                        {
                            transactionType = codeTableWrapper.getCodeDescByCodeTableNameAndCode("DEATHTRXTYPE", transactionTypeCT);
                        }

                        String financialProcessDateTime = editTrxHistoryVOs[h].getProcessDateTime();
                        String financialProcessDate = "";

                        if (financialProcessDateTime != null)
                        {
                            EDITDate editfinancialProcessDate = new EDITDateTime(financialProcessDateTime).getEDITDate();

                            financialProcessDate = editfinancialProcessDate.getFormattedDate();
                        }

                        String releaseDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(editTrxHistoryVOs[h].getReleaseDate());

                        String returnedDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(editTrxHistoryVOs[h].getReturnDate());

                        String origProcessDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(editTrxHistoryVOs[h].getOriginalProcessDateTime());

                        int correspondenceCount = editTrxVO.getEDITTrxCorrespondenceVOCount();
                        String correspondenceExistsStatus = "unchecked";

                        if (correspondenceCount > 0)
                        {
                            correspondenceExistsStatus = "checked";
                        }

                        String overdueChargeExists = checkForOverdueCharges(editTrxVO);

                        String reversalReasonCode = Util.initString(editTrxVO.getReversalReasonCodeCT(), "");

                        // Loops The Fund Activity History VOs
                        PageBean financialHistory = new PageBean();

                        financialHistory.putValue("editTrxPK", editTrxVO.getEDITTrxPK() + "");
                        financialHistory.putValue("clientSetupPK", clientSetupVO.getClientSetupPK() + "");
                        financialHistory.putValue("contractSetupPK", contractSetupVO.getContractSetupPK() + "");
                        financialHistory.putValue("groupSetupPK", groupSetupVO.getGroupSetupPK() + "");
                        financialHistory.putValue("editTrxHistoryPK", historyPK);
                        financialHistory.putValue("segmentFK", segmentPK);
                        financialHistory.putValue("contractId", contractId);
                        financialHistory.putValue("accountingPendingInd", Util.initString(editTrxHistoryVOs[h].getAccountingPendingStatus(), ""));
                        financialHistory.putValue("checkAmount", checkAmount);
                        financialHistory.putValue("cityWithholding", cityWithholding);
                        financialHistory.putValue("financialClientId", financialClientId);
                        financialHistory.putValue("controlNumber", Util.initString(editTrxHistoryVOs[h].getControlNumber(), ""));
                        financialHistory.putValue("countyWithholding", countyWithholding);
                        financialHistory.putValue("calculatedDistCode", calculatedDistCode);
                        financialHistory.putValue("effectiveDate", financialHistoryEffDate);
                        financialHistory.putValue("transactionType", transactionType);
                        financialHistory.putValue("federalWithholding", federalWithholding);
                        financialHistory.putValue("freeAmount", freeAmount);
                        financialHistory.putValue("grossAmount", grossAmount);
                        financialHistory.putValue("charges", charges);
                        financialHistory.putValue("financialMaintDate", editTrxVO.getMaintDateTime());
                        financialHistory.putValue("netAmount", netAmount);
                        financialHistory.putValue("financialOperator", editTrxVO.getOperator());
                        financialHistory.putValue("premiumTaxes", premiumTaxes);
                        financialHistory.putValue("processDate", financialProcessDate);
                        financialHistory.putValue("releasedDate", releaseDate);
                        financialHistory.putValue("returnedDate", returnedDate);
                        financialHistory.putValue("origProcessDate", origProcessDate);
                        financialHistory.putValue("complexChangeType", Util.initString(contractSetupVO.getComplexChangeTypeCT(), ""));
                        financialHistory.putValue("complexChangeNewValue", Util.initString(contractSetupVO.getComplexChangeNewValue(), ""));
                        financialHistory.putValue("interestProceeds", interestProceeds);
                        financialHistory.putValue("priorDeathBenefitOption", priorDeathBenefitOption);
                        financialHistory.putValue("unnecessaryPremiumInd", unnecessaryPremiumInd);
                        financialHistory.putValue("prevMAPEndDate", prevMAPEndDate);
                        financialHistory.putValue("prevTamraInitAdjValue", prevTamraInitAdjValue);
                        financialHistory.putValue("currentDeathBenefit", currentDeathBenefit);
                        financialHistory.putValue("currentCorridorPercent", currentCorridorPercent);
                        financialHistory.putValue("surrenderCharge", surrenderCharge);
                        financialHistory.putValue("currIntRate", currIntRate);

                        if (editTrxVO.getStatus().equalsIgnoreCase("R"))
                        {
                            financialHistory.putValue("reversalInd", "checked");
                        }
                        else
                        {
                            financialHistory.putValue("reversalInd", "unchecked");
                        }

                        financialHistory.putValue("sequenceNumber", editTrxVO.getSequenceNumber() + "");
                        financialHistory.putValue("stateWithholding", stateWithholding);
                        financialHistory.putValue("statusInd", Util.initString(editTrxVO.getStatus(), ""));
                        financialHistory.putValue("pendingStatus", Util.initString(editTrxVO.getPendingStatus(), "P"));
                        financialHistory.putValue("taxableBenefit", taxableBenefit);
                        financialHistory.putValue("taxYear", editTrxVO.getTaxYear() + "");
                        financialHistory.putValue("deathStatus", Util.initString(contractSetupVO.getDeathStatusCT(), ""));
                        financialHistory.putValue("claimStatus", Util.initString(contractSetupVO.getClaimStatusCT(), ""));

                        String key = "EDITTrxHistory:" + historyPK;

                        if (transactionTypeCT.equalsIgnoreCase("CY") || transactionTypeCT.equalsIgnoreCase("PE") ||
                                transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_STATEMENT))
                        {
                            id = "ye";
                        }
                        //the NT trx needs the removal page
                        else if (getDisbursementTrx(transactionTypeCT))
                        {
                            id = "dh";
                        }
                        else
                        {
                            id = "fh";
                        }


                        financialHistory.putValue("key", key);
                        financialHistory.putValue("optionId", optionId);
                        financialHistory.putValue("memoCode", Util.initString(groupSetupVO.getMemoCode(), ""));
                        financialHistory.putValue("premiumType", Util.initString(groupSetupVO.getPremiumTypeCT(), ""));
                        financialHistory.putValue("grossNetInd", Util.initString(groupSetupVO.getGrossNetStatusCT(), ""));
                        financialHistory.putValue("distributionCode", Util.initString(groupSetupVO.getDistributionCodeCT(), ""));
                        financialHistory.putValue("groupAmount", (new EDITBigDecimal(groupSetupVO.getGroupAmount())).toString());
                        financialHistory.putValue("groupPercent", (new EDITBigDecimal(groupSetupVO.getGroupPercent())).toString());
                        financialHistory.putValue("costBasis", historyCostBasis);
                        financialHistory.putValue("amountReceived", amountReceived);
                        financialHistory.putValue("correspondenceExistsStatus", correspondenceExistsStatus);
                        financialHistory.putValue("accumulatedValue", accumulatedValue);
                        financialHistory.putValue("surrenderValue", surrenderValue);
                        financialHistory.putValue("overdueChargeExistsStatus", overdueChargeExists);
                        financialHistory.putValue("originatingTrxFK", editTrxVO.getOriginatingTrxFK() + "");
                        financialHistory.putValue("reversalReasonCode", reversalReasonCode);

                        histories.putPageBean(id, financialHistory);

                        BucketHistoryVO[] bucketHistoryVOs = editTrxHistoryVOs[h].getBucketHistoryVO();

                        if (bucketHistoryVOs != null)
                        {
                            Hashtable bucketHT = new Hashtable();

                            for (int i = 0; i < bucketHistoryVOs.length; i++)
                            {
                                BucketVO bucketVO = (BucketVO) bucketHistoryVOs[i].getParentVO(BucketVO.class);
                                InvestmentVO investmentVO = null;
                                FilteredFundVO filteredFundVO = null;
                                FundVO fundVO = null;

                                if (bucketVO != null)
                                {
                                    investmentVO = (InvestmentVO) bucketVO.getParentVO(InvestmentVO.class);
                                    filteredFundVO = (FilteredFundVO) investmentVO.getParentVO(FilteredFundVO.class);
                                    fundVO = (FundVO) filteredFundVO.getParentVO(FundVO.class);
                                }

                                String editTrxHistoryFK = bucketHistoryVOs[i].getEDITTrxHistoryFK() + "";
                                String allocationPercent = "";
                                String fundDescription = "";

                                // this field is only populated for 'LO' transactions
                                // assumption is 'LO' trx will  have only one Investment and only one BucketHistory
                                if (transactionTypeCT.equals("LO"))
                                {
                                    EDITBigDecimal loanInterestDollars = new EDITBigDecimal(bucketHistoryVOs[i].getLoanInterestDollars());
                                    financialHistory.putValue("loanInterestDollars", loanInterestDollars.toString());
                                }

                                if (fundVO != null)
                                {
                                    fundDescription = fundVO.getName();

                                    if (bucketHT.containsKey(fundDescription))
                                    {
                                        PageBean fundActivityBean = (PageBean) bucketHT.get(fundDescription);

                                        EDITBigDecimal dollars = new EDITBigDecimal(fundActivityBean.getValue("dollars"));
                                        EDITBigDecimal bonusAmount = new EDITBigDecimal(fundActivityBean.getValue("bonusAmount"));
                                        EDITBigDecimal units = new EDITBigDecimal(fundActivityBean.getValue("units"));

                                        String toFromStatus = bucketHistoryVOs[i].getToFromStatus();
                                        if (toFromStatus != null && toFromStatus.equalsIgnoreCase("F"))
                                        {
                                            dollars = Util.roundToNearestCent(dollars.subtractEditBigDecimal(bucketHistoryVOs[i].getDollars()));
                                            bonusAmount = Util.roundToNearestCent(bonusAmount.subtractEditBigDecimal(bucketHistoryVOs[i].getBonusAmount()));
                                            units = units.subtractEditBigDecimal(bucketHistoryVOs[i].getUnits());

                                            boolean toFundFound = checkForToFundOnBucketHistories(bucketHistoryVOs, fundDescription);

                                            if (!toFundFound)
                                            {
                                                EDITBigDecimal cumDollars = new EDITBigDecimal(fundActivityBean.getValue("cumulativeDollars"));
                                                cumDollars = cumDollars.addEditBigDecimal(bucketHistoryVOs[i].getCumDollars());
                                                fundActivityBean.putValue("cumulativeDollars", cumDollars.toString());

                                                EDITBigDecimal cumUnits = new EDITBigDecimal(fundActivityBean.getValue("cumulativeUnits"));
                                                cumUnits = cumUnits.addEditBigDecimal(bucketHistoryVOs[i].getCumUnits());
                                                fundActivityBean.putValue("cumulativeUnits", cumUnits.toString());
                                            }
                                        }
                                        else
                                        {
                                            dollars = Util.roundToNearestCent(dollars.addEditBigDecimal(bucketHistoryVOs[i].getDollars()));
                                            bonusAmount = Util.roundToNearestCent(bonusAmount.addEditBigDecimal(bucketHistoryVOs[i].getBonusAmount()));
                                            units = units.addEditBigDecimal(bucketHistoryVOs[i].getUnits());

                                            EDITBigDecimal cumDollars = new EDITBigDecimal(fundActivityBean.getValue("cumulativeDollars"));
                                            cumDollars = cumDollars.addEditBigDecimal(bucketHistoryVOs[i].getCumDollars());
                                            fundActivityBean.putValue("cumulativeDollars", cumDollars.toString());

                                            EDITBigDecimal cumUnits = new EDITBigDecimal(fundActivityBean.getValue("cumulativeUnits"));
                                            cumUnits = cumUnits.addEditBigDecimal(bucketHistoryVOs[i].getCumUnits());
                                            fundActivityBean.putValue("cumulativeUnits", cumUnits.toString());
                                        }

                                        fundActivityBean.putValue("bonusAmount", bonusAmount.toString());
                                        fundActivityBean.putValue("dollars", dollars.toString());
                                        fundActivityBean.putValue("units", units.toString());

                                        bucketHT.put(fundDescription, fundActivityBean);
                                    }
                                    else
                                    {
                                        PageBean fundActivityBean = new PageBean();

                                        fundActivityBean.putValue("editTrxHistoryFK", editTrxHistoryFK);
                                        fundActivityBean.putValue("investmentFK", bucketVO.getInvestmentFK() + "");
                                        fundActivityBean.putValue("allocationPercent", allocationPercent);

                                        String toFromStatus = bucketHistoryVOs[i].getToFromStatus();
                                        if (toFromStatus != null && toFromStatus.equalsIgnoreCase("F"))
                                        {
                                            if (new EDITBigDecimal(bucketHistoryVOs[i].getDollars()).isGT(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
                                            {
                                                fundActivityBean.putValue("dollars", new EDITBigDecimal(bucketHistoryVOs[i].getDollars()).negate().toString());
                                            }
                                            else
                                            {
                                                fundActivityBean.putValue("dollars", new EDITBigDecimal(bucketHistoryVOs[i].getDollars()).toString());
                                            }

                                            if (new EDITBigDecimal(bucketHistoryVOs[i].getBonusAmount()).isGT(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
                                            {
                                                fundActivityBean.putValue("bonusAmount", new EDITBigDecimal(bucketHistoryVOs[i].getBonusAmount()).negate().toString());
                                            }
                                            else
                                            {
                                                fundActivityBean.putValue("bonusAmount", new EDITBigDecimal(bucketHistoryVOs[i].getBonusAmount()).toString());
                                            }

                                            if (new EDITBigDecimal(bucketHistoryVOs[i].getUnits()).isGT(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
                                            {
                                                fundActivityBean.putValue("units", new EDITBigDecimal(bucketHistoryVOs[i].getUnits()).negate().toString());
                                            }
                                            else
                                            {
                                                fundActivityBean.putValue("units", new EDITBigDecimal(bucketHistoryVOs[i].getUnits()).toString());
                                            }

                                            boolean toFundFound = checkForToFundOnBucketHistories(bucketHistoryVOs, fundDescription);

                                            if (!toFundFound)
                                            {
                                                fundActivityBean.putValue("cumulativeDollars", new EDITBigDecimal(bucketHistoryVOs[i].getCumDollars()).toString());
                                                fundActivityBean.putValue("cumulativeUnits", new EDITBigDecimal(bucketHistoryVOs[i].getCumUnits()).toString());
                                            }
                                            else
                                            {
                                                fundActivityBean.putValue("cumulativeDollars", new EDITBigDecimal().toString());
                                                fundActivityBean.putValue("cumulativeUnits", new EDITBigDecimal().toString());
                                            }
                                        }
                                        else
                                        {
                                            fundActivityBean.putValue("dollars", new EDITBigDecimal(bucketHistoryVOs[i].getDollars()).toString());
                                            fundActivityBean.putValue("bonusAmount", new EDITBigDecimal(bucketHistoryVOs[i].getBonusAmount()).toString());
                                            fundActivityBean.putValue("units", new EDITBigDecimal(bucketHistoryVOs[i].getUnits()).toString());
                                            fundActivityBean.putValue("cumulativeDollars", new EDITBigDecimal(bucketHistoryVOs[i].getCumDollars()).toString());
                                            fundActivityBean.putValue("cumulativeUnits", new EDITBigDecimal(bucketHistoryVOs[i].getCumUnits()).toString());
                                        }

                                        fundActivityBean.putValue("fundDescription", fundDescription);

                                        bucketHT.put(fundDescription, fundActivityBean);
                                    }

                                    //check for loan fund get settled amount fo terminating transactions
                                    if (fundVO.getLoanQualifierCT() != null)
                                    {
                                        if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_DEATH) ||
                                            transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_FULLSURRENDER))
                                        {
                                            Hashtable loanSettlement = new Hashtable();
                                            loanSettlement.put("loanSettlementPK", Util.initString(bucketHistoryVOs[i].getBucketHistoryPK() + "", "0"));
                                            loanSettlement.put("loanPrincipalPayoff", Util.initString(bucketHistoryVOs[i].getLoanPrincipalDollars() + "", "0"));
                                            loanSettlement.put("loanInterestPayoff", Util.initString(bucketHistoryVOs[i].getLoanInterestDollars() + "", "0"));
                                            appReqBlock.getHttpSession().setAttribute("loanSettlement",loanSettlement);
                                        }
                                        else
                                        {
                                            appReqBlock.getHttpSession().removeAttribute("loanSettlement");
                                        }
                                    }
                                }
                                 // end for (bucket history loop)
                            }

                            if (bucketHT.size() > 0)
                            {
                                Enumeration bucketEnum = bucketHT.elements();

                                while (bucketEnum.hasMoreElements())
                                {
                                    PageBean fundActivityPageBean = (PageBean) bucketEnum.nextElement();
                                    String editTrxHistoryFK = fundActivityPageBean.getValue("editTrxHistoryFK");
                                    String fundDescription = fundActivityPageBean.getValue("fundDescription");
                                    String cumulativeDollars = fundActivityPageBean.getValue("cumulativeDollars");

                                    if (cumulativeDollars.equals(""))
                                    {
                                        String investmentFK = fundActivityPageBean.getValue("investmentFK");

                                        for (int i = 0;
                                                i < bucketHistoryVOs.length;
                                                i++)
                                        {
                                            BucketVO bucketVO = (BucketVO) bucketHistoryVOs[i].getParentVO(BucketVO.class);

                                            if (bucketVO.getInvestmentFK() == Long.parseLong(investmentFK))
                                            {
                                                fundActivityPageBean.putValue("cumulativeDollars", new EDITBigDecimal(bucketHistoryVOs[i].getCumDollars()).toString());
                                                fundActivityPageBean.putValue("cumulativeUnits", new EDITBigDecimal(bucketHistoryVOs[i].getCumUnits()).toString());

                                                i = bucketHistoryVOs.length;
                                            }
                                        }
                                    }

                                    fundActivities.putPageBean(editTrxHistoryFK + fundDescription, fundActivityPageBean);
                                }
                            }
                        } // end if (bucket History)
                    } // end for (EDIT Trx History loop)

            appReqBlock.getHttpSession().setAttribute("editTrxVOs", editTrxVO);

        return id;
    }

    private boolean getDisbursementTrx(String transactionTypeCT)
    {
        boolean disbursmentTrxFound = false;
        for (int i = 0; i < EDITTrx.disbursementDisplayTrxTypes.length; i++)
        {
            String disbursementDisplayTrxType = EDITTrx.disbursementDisplayTrxTypes[i];
            if (disbursementDisplayTrxType.equalsIgnoreCase(transactionTypeCT))
            {
                disbursmentTrxFound = true;
                break;
            }
        }

        return disbursmentTrxFound;
    }

    private String checkForOverdueCharges(EDITTrxVO editTrxVO) throws Exception
    {
        String overdueChargesExist = "unchecked";

        if (editTrxVO.getOverdueChargeVOCount() > 0)
        {
            OverdueChargeVO[] overdueCharges = editTrxVO.getOverdueChargeVO();
            for (int i = 0; i < overdueCharges.length; i++)
            {
                if (overdueCharges[i].getOverdueChargeSettledVOCount() > 0)
                {
                    Hashtable overdueHT = calculateOverdueAmounts(overdueCharges[i]);

                    EDITBigDecimal overdueAdmin = (EDITBigDecimal) overdueHT.get("overdueAdmin");
                    EDITBigDecimal overdueCoi = (EDITBigDecimal) overdueHT.get("overdueCoi");
                    EDITBigDecimal overdueExpense = (EDITBigDecimal) overdueHT.get("overdueExpense");

                    if (overdueAdmin.isGT("0") || overdueCoi.isGT("0") || overdueExpense.isGT("0"))
                    {
                        overdueChargesExist = "checked";
                    }
                }
                else
                {
                    overdueChargesExist = "checked";
                }
            }
        }

        return overdueChargesExist;
    }

    private Hashtable calculateOverdueAmounts(OverdueChargeVO overdueChargeVO) throws Exception
    {
        EDITBigDecimal overdueAdmin = new EDITBigDecimal(overdueChargeVO.getOverdueAdmin());
        EDITBigDecimal overdueCoi = new EDITBigDecimal(overdueChargeVO.getOverdueCoi());
        EDITBigDecimal overdueExpense = new EDITBigDecimal(overdueChargeVO.getOverdueExpense());
        EDITBigDecimal overdueCollateralization = new EDITBigDecimal((overdueChargeVO.getOverdueCollateralization()));

        OverdueChargeSettledVO[] overdueChargesSettled = overdueChargeVO.getOverdueChargeSettledVO();

        Event eventComponent = new EventComponent();

        for (int i = 0; i < overdueChargesSettled.length; i++)
        {
            EDITTrxVO editTrxVO = eventComponent.composeEDITTrxVOByEDITTrxPK(overdueChargesSettled[i].getEDITTrxFK(), new ArrayList());

            if (editTrxVO.getStatus().equalsIgnoreCase("A") ||
                editTrxVO.getStatus().equalsIgnoreCase("N"))
            {
                overdueAdmin = overdueAdmin.subtractEditBigDecimal(overdueChargesSettled[i].getSettledAdmin());
                overdueCoi = overdueCoi.subtractEditBigDecimal(overdueChargesSettled[i].getSettledCoi());
                overdueExpense = overdueExpense.subtractEditBigDecimal(overdueChargesSettled[i].getSettledExpense());
                overdueCollateralization = overdueCollateralization.subtractEditBigDecimal(new EDITBigDecimal(overdueChargesSettled[i].getSettledCollateralization()));
            }
        }

        Hashtable overdueHT = new Hashtable();
        overdueHT.put("overdueAdmin", overdueAdmin);
        overdueHT.put("overdueCoi", overdueCoi);
        overdueHT.put("overdueExpense", overdueExpense);
        overdueHT.put("overdueColl", overdueCollateralization);

        return overdueHT;
    }

    /**
     * show pop up of the Originating Trx Info
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String showOriginatingTrxInfo(AppReqBlock appReqBlock) throws Exception
       {
           String originatingTrxFK = appReqBlock.getReqParm("originatingTrxPK");
           String productStructureId = appReqBlock.getReqParm("companyStructureId");
           String errorMessage = "";
           if (!originatingTrxFK.equals("0")  && !originatingTrxFK.equals(""))
           {
               event.business.Event eventComponent = new event.component.EventComponent();
               List voInclusionList = new ArrayList();
               EDITTrxVO editTrxVO = eventComponent.composeEDITTrxVOByEDITTrxPK(Long.parseLong(originatingTrxFK), voInclusionList);

               if (editTrxVO != null)
               {
                   appReqBlock.getHttpServletRequest().setAttribute("OriginatingTrxType", editTrxVO.getTransactionTypeCT());
                   appReqBlock.getHttpServletRequest().setAttribute("OriginatingTrxEffDate", editTrxVO.getEffectiveDate());
                   appReqBlock.getHttpServletRequest().setAttribute("OriginatingTrxAmount", editTrxVO.getTrxAmount().toString());
               }

               InvestmentAllocationOverrideVO[] investmentAllocationOvrdVOs = eventComponent.getInvestmentAllocationOvrds(Long.parseLong(originatingTrxFK));
               if (investmentAllocationOvrdVOs != null)
               {
                   appReqBlock.getHttpServletRequest().setAttribute("OriginatingInvestmentInfoVOs", investmentAllocationOvrdVOs);
               }

               SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
               String mainProductStructureId = contractMainSessionBean.getValue("companyStructureId");

               if ((productStructureId != null) && !productStructureId.equals(""))
               {
                   UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
                   appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
               }
               else if ((mainProductStructureId != null) && !mainProductStructureId.equals(""))
               {
                   UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, mainProductStructureId);
                   appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
               }
           }
           else
           {
               errorMessage = "History record does not have an originating transaction";
               appReqBlock.getHttpServletRequest().setAttribute("ErrorMessage", errorMessage);
           }

           return ORIGINATING_TRX_DIALOG;
       }


    protected boolean checkForToFundOnBucketHistories(BucketHistoryVO[] bucketHistoryVOs, String fundDescriptionToMatch)
    {
        boolean toFundFound = false;

        for (int i = 0; i < bucketHistoryVOs.length; i++)
        {
            BucketVO bucketVO = (BucketVO) bucketHistoryVOs[i].getParentVO(BucketVO.class);
            InvestmentVO investmentVO = null;
            FilteredFundVO filteredFundVO = null;
            FundVO fundVO = null;

            if (bucketVO != null)
            {
                investmentVO = (InvestmentVO) bucketVO.getParentVO(InvestmentVO.class);
                filteredFundVO = (FilteredFundVO) investmentVO.getParentVO(FilteredFundVO.class);
                fundVO = (FundVO) filteredFundVO.getParentVO(FundVO.class);
            }

//            String editTrxHistoryFK = bucketHistoryVOs[i].getEDITTrxHistoryFK() + "";
//            String allocationPercent = "";
            String fundDescription = "";

            if (fundVO != null)
            {
                fundDescription = fundVO.getName();
            }

            if (fundDescription.equals(fundDescriptionToMatch) && bucketHistoryVOs[i].getToFromStatus().equals("T"))
            {
                toFundFound = true;
            }
        }

        return toFundFound;
    }

    protected void loadChangeHistory(AppReqBlock appReqBlock, ChangeHistory changeHistory) throws Exception
    {
        PageBean contractMain = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        String optionId = contractMain.getValue("optionId");

        String maintDate = changeHistory.getMaintDateTime().toString();
        String changeHistoryId = changeHistory.getChangeHistoryPK().toString();

        PageBean changeHistoryBean = new PageBean();

        changeHistoryBean.putValue("afterValue", changeHistory.getAfterValue());
        changeHistoryBean.putValue("beforeValue", changeHistory.getBeforeValue());
        changeHistoryBean.putValue("changeHistoryId", changeHistoryId);
        changeHistoryBean.putValue("effectiveDate", DateTimeUtil.formatYYYYMMDDToMMDDYYYY(changeHistory.getEffectiveDate().getFormattedDate()));
        changeHistoryBean.putValue("fieldName", changeHistory.getFieldName());
        changeHistoryBean.putValue("maintDate", maintDate);
        changeHistoryBean.putValue("operator", changeHistory.getOperator());
        changeHistoryBean.putValue("processDate", DateTimeUtil.formatYYYYMMDDToMMDDYYYY(changeHistory.getProcessDate().getFormattedDate()));
        changeHistoryBean.putValue("transactionType", "Non Financial");
        changeHistoryBean.putValue("optionId", optionId);
        changeHistoryBean.putValue("idName", changeHistory.getTableName());
        changeHistoryBean.putValue("key", "ChangeHistory:" + changeHistoryId);

        SessionBean histories = appReqBlock.getSessionBean("contractHistories");
        histories.putPageBean("ch", changeHistoryBean);
    }

//    private String getRiderName(long modifiedTableKey) throws Exception
//    {
//        contract.business.Lookup contractLookup = new contract.component.LookupComponent();
//
//        SegmentVO[] segmentVO = contractLookup.findBySegmentPK(modifiedTableKey, false, null);
//
//        String riderName = null;
//
//        if (segmentVO != null)
//        {
//            riderName = segmentVO[0].getSegmentNameCT();
//        }
//
//        return riderName;
//    }

    private void populateClientPageBean(ContractClientVO[] contractClientVOs, PageBean clientPageBean, AppReqBlock appReqBlock, int riderNumber) throws Exception
    {
        client.business.Lookup clientLookup = new client.component.LookupComponent();
        role.business.Lookup roleLookup = new role.component.LookupComponent();

        for (int x = 0; x < contractClientVOs.length; x++)
        {
            SegmentVO riderSegmentVO = (SegmentVO) contractClientVOs[x].getParentVO(SegmentVO.class);

            long contractClientPK = contractClientVOs[x].getContractClientPK();
            long clientRoleFK = contractClientVOs[x].getClientRoleFK();
            String firstName = "";
            String middleName = "";
            String lastName = "";
            String dob = "";
            String genderId = "";
            String prefix = "";
            String suffix = "";
            String operatorContractClient = "";
            String maintDateTime = "";
            String usCitizenIndStatus = "unchecked";
            String taxId = "";
            String employeeId = "";
            String namePrefix = "";
            String nameSuffix = "";
            String corporateName = "";
            String trustType = "";
            String taxFilingStatus = "";
            String taxIdType = "";
            String proofOfAgeInd = "";
            String maritalStatus = "";
            String mothersMaidenName = "";
            String dateOfDeath = "";
            String stateOfBirth = "";
            String countryOfBirth = "";
            String maintDate = "";
            String maintOperator = "";
            String disbursementSource = "";
            String exemptions = "";
            String printAs = "";
            String printAs2 = "";
            String newIssuesEligibilityStatus = "";
            String newIssuesStartDate = "";

            if (clientRoleFK > 0)
            {
                ClientRoleVO[] clientRoleVOs = roleLookup.getRoleByClientRolePK(clientRoleFK);
                long clientDetailFK = clientRoleVOs[0].getClientDetailFK();

                List voExclusionList = new ArrayList();
                voExclusionList.add(ClientAddressVO.class);
                voExclusionList.add(ClientRoleVO.class);
                voExclusionList.add(Reinsurer.class);

                ClientDetailVO[] clientDetailVO = clientLookup.findClientDetailByClientPK(clientDetailFK, true, voExclusionList);

                long preferenceFK = clientRoleVOs[0].getPreferenceFK();
                long taxProfileFK = clientRoleVOs[0].getTaxProfileFK();

                String segmentFK = contractClientVOs[x].getSegmentFK() + "";
                String relationToIns = Util.initString(contractClientVOs[x].getRelationshipToInsuredCT(), "");
                String relationToEmp = Util.initString(contractClientVOs[x].getRelationshipToEmployeeCT(), "");
                String phoneAuth = Util.initString(contractClientVOs[x].getTelephoneAuthorizationCT(), "");
                String classType = Util.initString(contractClientVOs[x].getClassCT(), "");
                String flatExtra = Util.initString(contractClientVOs[x].getFlatExtra() + "", "");
                String flatExtraAge = Util.initString(contractClientVOs[x].getFlatExtraAge() + "", "");
                String flatExtraDur = Util.initString(contractClientVOs[x].getFlatExtraDur() + "", "");
                String percentExtra = Util.initString(new EDITBigDecimal(contractClientVOs[x].getPercentExtra()).toString(), "0.00");
                String percentExtraAge = Util.initString(contractClientVOs[x].getPercentExtraAge() + "", "");
                String percentExtraDur = Util.initString(contractClientVOs[x].getPercentExtraDur() + "", "");
                String tableRating = Util.initString(contractClientVOs[x].getTableRatingCT(), "");
                String payorOf = Util.initString(contractClientVOs[x].getPayorOfCT(), "");
                String disbAddressType = Util.initString(contractClientVOs[x].getDisbursementAddressTypeCT(), "");
                String corrAddressType = Util.initString(contractClientVOs[x].getCorrespondenceAddressTypeCT(), "");
                String pendingClassChangeIndStatus = Util.initString(contractClientVOs[x].getPendingClassChangeInd(), "");
                String authorizedSignatureCT = Util.initString(contractClientVOs[x].getAuthorizedSignatureCT(), "");
                String employeeIdentification = Util.initString(contractClientVOs[x].getEmployeeIdentification(), "");
                String originalClassCT = Util.initString(contractClientVOs[x].getOriginalClassCT(), "");

                if (pendingClassChangeIndStatus.equalsIgnoreCase("Y"))
                {
                    pendingClassChangeIndStatus = "checked";
                }

                String ratedGender = Util.initString(contractClientVOs[x].getRatedGenderCT(), "");
                String underwritingClass = Util.initString(contractClientVOs[x].getUnderwritingClassCT(), "");
                String terminationReason = Util.initString(contractClientVOs[x].getTerminationReasonCT(), "");
                String terminationDate = Util.initString(contractClientVOs[x].getTerminationDate(), "");
                operatorContractClient  = Util.initString(contractClientVOs[x].getOperator(), "");
                maintDateTime = Util.initString(contractClientVOs[x].getMaintDateTime(), "");
                String clientRelationship = Util.initString(clientRoleVOs[0].getRoleTypeCT(), "");
                String clientOption = riderSegmentVO.getOptionCodeCT();

                firstName = Util.initString(clientDetailVO[0].getFirstName(), "");
                lastName = Util.initString(clientDetailVO[0].getLastName(), "");
                middleName = Util.initString(clientDetailVO[0].getMiddleName(), "");
                prefix = Util.initString(clientDetailVO[0].getNamePrefix(), "");
                suffix = Util.initString(clientDetailVO[0].getNameSuffix(), "");
                dob = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(clientDetailVO[0].getBirthDate());

                genderId = clientDetailVO[0].getGenderCT();
                taxId = Util.initString(clientDetailVO[0].getTaxIdentification(), "");
                namePrefix = clientDetailVO[0].getNamePrefix();
                nameSuffix = clientDetailVO[0].getNameSuffix();
                corporateName = clientDetailVO[0].getCorporateName();
                trustType = clientDetailVO[0].getTrustTypeCT();
                mothersMaidenName = clientDetailVO[0].getMothersMaidenName();
                dateOfDeath = clientDetailVO[0].getDateOfDeath();
                maintDate = clientDetailVO[0].getMaintDateTime();
                maintOperator = clientDetailVO[0].getOperator();
                newIssuesEligibilityStatus = Util.initString(clientRoleVOs[0].getNewIssuesEligibilityStatusCT(), "");
                newIssuesStartDate = Util.initString(clientRoleVOs[0].getNewIssuesEligibilityStartDate(), "");

                TaxInformationVO[] taxInformationVO = clientDetailVO[0].getTaxInformationVO();

                if ((taxInformationVO != null) && (taxInformationVO.length > 0))
                {
                    taxIdType = taxInformationVO[0].getTaxIdTypeCT();
                    proofOfAgeInd = taxInformationVO[0].getProofOfAgeIndCT();
                    maritalStatus = taxInformationVO[0].getMaritalStatusCT();
                    usCitizenIndStatus = taxInformationVO[0].getCitizenshipIndCT();
                    stateOfBirth = taxInformationVO[0].getStateOfBirthCT();
                    countryOfBirth = taxInformationVO[0].getCountryOfBirthCT();

                    if (usCitizenIndStatus != null)
                    {
                        if (usCitizenIndStatus.equalsIgnoreCase("Y"))
                        {
                            usCitizenIndStatus = "checked";
                        }
                    }

                    TaxProfileVO[] taxProfileVO = taxInformationVO[0].getTaxProfileVO();

                    if (taxProfileVO != null)
                    {
                        for (int t = 0; t < taxProfileVO.length; t++)
                        {
                            if (taxProfileVO[t].getTaxProfilePK() == taxProfileFK)
                            {
                                taxFilingStatus = taxProfileVO[t].getTaxFilingStatusCT();
                                exemptions = taxProfileVO[t].getExemptions();
                            }
                        }
                    }
                }

                PreferenceVO[] preferenceVO = clientDetailVO[0].getPreferenceVO();

                if (preferenceVO != null)
                {
                    for (int p = 0; p < preferenceVO.length; p++)
                    {
                        if (preferenceVO[p].getPreferencePK() == preferenceFK)
                        {
                            disbursementSource = preferenceVO[p].getDisbursementSourceCT();
                            printAs = preferenceVO[0].getPrintAs();
                            printAs2 = preferenceVO[0].getPrintAs2();
                        }

                        break;
                    }
                }

                String contractClientOverrideStatus = contractClientVOs[x].getOverrideStatus();

                String payeeEffectiveDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(contractClientVOs[x].getEffectiveDate());

                String terminateDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(contractClientVOs[x].getTerminationDate());

                String clientIdKey = taxId + (riderNumber + "") + clientOption + clientRelationship + clientRoleFK + contractClientPK;

                String clientIssueAge = contractClientVOs[x].getIssueAge() + "";

                SessionBean clients = appReqBlock.getSessionBean("contractClients");

                if (clients.pageBeanExists(clientIdKey))
                {
                    clientPageBean = clients.getPageBean(clientIdKey);
                }
                else
                {
                    clientPageBean = new PageBean();

                    clients.putPageBean(clientIdKey, clientPageBean);
                }

                clientPageBean.putValue("contractClientPK", contractClientPK + "");
                clientPageBean.putValue("clientRoleFK", clientRoleFK + "");
                clientPageBean.putValue("segmentFK", segmentFK);
                clientPageBean.putValue("contractId", segmentFK);
                clientPageBean.putValue("issueAge", clientIssueAge);
                clientPageBean.putValue("relationshipInd", clientRelationship);
                clientPageBean.putValue("optionId", clientOption);
                clientPageBean.putValue("contractClientOverrideStatus", contractClientOverrideStatus);
                clientPageBean.putValue("relationToIns", relationToIns);
                clientPageBean.putValue("relationToEmp", relationToEmp);
                clientPageBean.putValue("phoneAuth", phoneAuth);
                clientPageBean.putValue("classType", classType);
                clientPageBean.putValue("flatExtra", flatExtra);
                clientPageBean.putValue("flatExtraAge", flatExtraAge);
                clientPageBean.putValue("flatExtraDur", flatExtraDur);
                clientPageBean.putValue("percentExtra", percentExtra);
                clientPageBean.putValue("percentExtraAge", percentExtraAge);
                clientPageBean.putValue("percentExtraDur", percentExtraDur);
                clientPageBean.putValue("tableRating", tableRating);
                clientPageBean.putValue("payorOf", payorOf);
                clientPageBean.putValue("disbAddressType", disbAddressType);
                clientPageBean.putValue("corrAddressType", corrAddressType);
                clientPageBean.putValue("terminationReason", terminationReason);
                clientPageBean.putValue("terminationDate", terminationDate);
                clientPageBean.putValue("pendingClassChangeIndStatus", pendingClassChangeIndStatus);
                clientPageBean.putValue("ratedGender", ratedGender);
                clientPageBean.putValue("operator", operatorContractClient);
                clientPageBean.putValue("maintDateTime", maintDateTime);
                clientPageBean.putValue("underwritingClass", underwritingClass);
                clientPageBean.putValue("authorizedSignatureCT", authorizedSignatureCT);
                clientPageBean.putValue("employeeIdentification", employeeIdentification);
                clientPageBean.putValue("beneRelationshipToIns", Util.initString(contractClientVOs[x].getBeneRelationshipToInsured(), ""));
                clientPageBean.putValue("riderNumber", riderNumber + "");
                clientPageBean.putValue("originalClassCT", originalClassCT);

                ContractClientAllocationVO[] contractClientAllocationVOs = contractClientVOs[x].getContractClientAllocationVO();

                if (contractClientAllocationVOs != null)
                {
                    for (int a = 0; a < contractClientAllocationVOs.length;
                            a++)
                    {
                        String contractClientAllocPK = contractClientAllocationVOs[a].getContractClientAllocationPK() + "";
                        String allocationPct = (new EDITBigDecimal(contractClientAllocationVOs[a].getAllocationPercent())).toString();
                        String ccAllocOverrideStatus = contractClientAllocationVOs[a].getOverrideStatus();
                        String splitEqualInd = Util.initString(contractClientAllocationVOs[a].getSplitEqual(), "N");
                        String allocationAmount = (new EDITBigDecimal(contractClientAllocationVOs[a].getAllocationDollars())).toString();

                        clientPageBean.addToValues("contractClientAllocationPKs", contractClientAllocPK);
                        clientPageBean.addToValues("allocationPercents", allocationPct);
                        clientPageBean.addToValues("ccAllocOverrideStatuses", ccAllocOverrideStatus);
                        clientPageBean.addToValues("splitEquals", splitEqualInd);
                        clientPageBean.addToValues("allocationDollars", allocationAmount);
                    }
                }

                WithholdingVO[] withholdingVOs = contractClientVOs[x].getWithholdingVO();

                if (withholdingVOs != null)
                {
                    for (int w = 0; w < withholdingVOs.length; w++)
                    {
                    }
                }

                clientPageBean.putValue("firstName", firstName);
                clientPageBean.putValue("lastName", lastName);
                clientPageBean.putValue("middleName", middleName);
                clientPageBean.putValue("prefix", prefix);
                clientPageBean.putValue("suffix", suffix);
                clientPageBean.putValue("corporateName", corporateName);
                clientPageBean.putValue("dob", dob);
                clientPageBean.putValue("genderId", genderId);
                clientPageBean.putValue("usCitizenIndStatus", usCitizenIndStatus);
                clientPageBean.putValue("taxId", taxId);
                clientPageBean.putValue("employeeId", employeeId);
                clientPageBean.putValue("namePrefix", namePrefix);
                clientPageBean.putValue("nameSuffix", nameSuffix);
                clientPageBean.putValue("corporateName", corporateName);
                clientPageBean.putValue("trustType", trustType);
                clientPageBean.putValue("taxFilingStatus", taxFilingStatus);
                clientPageBean.putValue("taxIdType", taxIdType);
                clientPageBean.putValue("proofOfAgeInd", proofOfAgeInd);
                clientPageBean.putValue("maritalStatus", maritalStatus);
                clientPageBean.putValue("mothersMaidenName", mothersMaidenName);
                clientPageBean.putValue("dateOfDeath", dateOfDeath);
                clientPageBean.putValue("stateOfBirth", stateOfBirth);
                clientPageBean.putValue("countryOfBirth", countryOfBirth);
                clientPageBean.putValue("maintDate", maintDate);
                clientPageBean.putValue("maintOper", maintOperator);
                clientPageBean.putValue("disbursementSource", disbursementSource);
                clientPageBean.putValue("exemptions", exemptions);
                clientPageBean.putValue("printAs", printAs);
                clientPageBean.putValue("printAs2", printAs2);
                clientPageBean.putValue("effectiveDate", payeeEffectiveDate);
                clientPageBean.putValue("terminationDate", terminateDate);
                clientPageBean.putValue("newIssuesEligibilityStatus", newIssuesEligibilityStatus);
                clientPageBean.putValue("newIssuesStartDate", newIssuesStartDate);

                if (clientRelationship.equalsIgnoreCase("insured"))
                {
                    String selectedClientName = null;
                    if (!lastName.equals(""))
                    {
                        selectedClientName = lastName + ", " + firstName;
                        if (!middleName.equals(""))
                        {
                            selectedClientName = selectedClientName + ", " + middleName;
                        }
                    }
                    appReqBlock.getSessionBean("contractMainSessionBean").
                            putValue("selectedClientName", selectedClientName);

                    appReqBlock.getSessionBean("contractMainSessionBean").
                            putValue("insuredRelationToEmp", relationToEmp);
                }
            }
        }
    }

    /**
     * Loads rider information to the beans for display on the screen
     * @param appReqBlock
     * @param segmentVO
     */
    private void loadRiders(AppReqBlock appReqBlock, SegmentVO segmentVO)
    {
        SessionBean riders = appReqBlock.getSessionBean("contractRiders");

        SegmentVO[] riderVOs = segmentVO.getSegmentVO();
        List riderVOsArray = new ArrayList();

        if (riderVOs != null)
        {
            for (int i = 0; i < riderVOs.length; i++)
            {
                PremiumDueVO[] riderPremiumDueVOs = riderVOs[i].getPremiumDueVO();
                if (riderPremiumDueVOs != null)
                {
                    appReqBlock.getHttpSession().setAttribute("riderPremiumDueVOs_" + riderVOs[i].getOptionCodeCT(), riderPremiumDueVOs);
                }

                //  Get info from the riderVO
                String segmentNameCT = riderVOs[i].getSegmentNameCT();
                String optionCodeCT = riderVOs[i].getOptionCodeCT();
                int sequenceNumber = riderVOs[i].getRiderNumber();
                String effectiveDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(riderVOs[i].getEffectiveDate());
                String terminationDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(riderVOs[i].getTerminationDate());
                String unitsChangeEffectiveDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(riderVOs[i].getSegmentChangeEffectiveDate());
                String riderSegmentPK = riderVOs[i].getSegmentPK() + "";
                String riderStatus = riderVOs[i].getSegmentStatusCT();
                String units = Util.initBigDecimal(riderVOs[i], "Units", new BigDecimal("0")).toString();
                String originalUnits = Util.initBigDecimal(riderVOs[i], "originalUnits", new BigDecimal("0")).toString();
                String commissionPhaseID  = Util.initInt(new Segment(riderVOs[i]), "CommissionPhaseID", 1) + "";
                String commissionPhaseOverride = Util.initString(riderVOs[i].getCommissionPhaseOverride(), "");
                String authorizedSignatureCT = Util.initString(riderVOs[i].getAuthorizedSignatureCT(), "");
                String ageAtIssue = riderVOs[i].getAgeAtIssue() + "";
                String originalStateCT = riderVOs[i].getOriginalStateCT() + "";
                String ratedGenderCT = riderVOs[i].getRatedGenderCT() + "";
                String underwritingClass = riderVOs[i].getUnderwritingClassCT() + "";
                String groupPlan = riderVOs[i].getGroupPlan() + "";
                String segmentAmount = riderVOs[i].getAmount().toString();
                String claimStopDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(riderVOs[i].getClaimStopDate());
                String segmentChangeEffectiveDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(riderVOs[i].getSegmentChangeEffectiveDate());
                String expiryDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(riderVOs[i].getExpiryDate());
                String sequence = riderVOs[i].getSequence() + "";
                String location = riderVOs[i].getLocation() + "";
                String indivAnnPremium = Util.initBigDecimal(riderVOs[i], "indivAnnPremium", new BigDecimal("0")).toString();

                //  Change into expected "format"
                String segmentNamePK = CodeTableWrapper.getSingleton().getCodeTablePKByCodeTableNameAndCode("SEGMENTNAME", segmentNameCT) + "";
                String optionCodePK = CodeTableWrapper.getSingleton().getCodeTablePKByCodeTableNameAndCode("OPTIONCODE", optionCodeCT) + "";
                if (optionCodePK == null || optionCodePK.equals("") || optionCodePK.equals("0"))
                {
                    optionCodePK = CodeTableWrapper.getSingleton().getCodeTablePKByCodeTableNameAndCode("RIDERNAME", optionCodeCT) + "";
                }

                 String issueDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(riderVOs[i].getIssueDate());//chnage date format for JSP display

                String appSignedDate = riderVOs[i].getApplicationSignedDate();
                String appReceivedDate = riderVOs[i].getApplicationReceivedDate();

                //Get rider child, the contractclient to get the clientdetail and the insured attached to the rider
                String insuredName = null;
                ContractClientVO[] contractClientVOs = riderVOs[i].getContractClientVO();
                if (contractClientVOs != null && contractClientVOs.length > 0)
                {
                    ClientDetail clientDetail = ClientDetail.findBy_SegmentPK_ClientRoleFK(new Long(riderSegmentPK), new Long(contractClientVOs[0].getClientRoleFK()));
                    if (clientDetail != null)
                    {
                        if (clientDetail.getLastName() !=  null)
                        {
                            insuredName = clientDetail.getLastName() + ", " + clientDetail.getFirstName();
                            if (clientDetail.getMiddleName() != null)
                            {
                                insuredName = insuredName + ", " + clientDetail.getMiddleName();
                            }
                        }
                    }
                }


                //  Place into page bean
                PageBean riderPageBean = new PageBean();
                riderPageBean.putValue("segmentNamePK", segmentNamePK);
                riderPageBean.putValue("coverage", optionCodeCT);
                riderPageBean.putValue("optionCodePK", optionCodePK);
                riderPageBean.putValue("effectiveDate", effectiveDate);
                riderPageBean.putValue("terminateDate", terminationDate);
                riderPageBean.putValue("appSignedDate", appSignedDate);
                riderPageBean.putValue("appReceivedDate", appReceivedDate);
                riderPageBean.putValue("issueDate", issueDate);
                riderPageBean.putValue("riderSegmentPK", riderSegmentPK);
                riderPageBean.putValue("riderStatus", riderStatus);
                riderPageBean.putValue("units", units);
                riderPageBean.putValue("unitsChangeEffectiveDate", unitsChangeEffectiveDate);
                riderPageBean.putValue("originalUnits", originalUnits);
                riderPageBean.putValue("commissionPhaseID", commissionPhaseID);
                riderPageBean.putValue("commissionPhaseOverride", commissionPhaseOverride);
                riderPageBean.putValue("authorizedSignatureCT", authorizedSignatureCT);
                riderPageBean.putValue("ageAtIssue", ageAtIssue);
                riderPageBean.putValue("originalStateCT", originalStateCT);
                riderPageBean.putValue("ratedGenderCT", ratedGenderCT);
                riderPageBean.putValue("underwritingClass", underwritingClass);
                riderPageBean.putValue("groupPlan", groupPlan);
                riderPageBean.putValue("segmentAmount", segmentAmount);
                riderPageBean.putValue("claimStopDate", claimStopDate);
                riderPageBean.putValue("creationOperator", riderVOs[i].getCreationOperator());
                riderPageBean.putValue("creationDate", DateTimeUtil.formatYYYYMMDDToMMDDYYYY(riderVOs[i].getCreationDate()));
                riderPageBean.putValue("waiveFreeLookInd", "N");
                riderPageBean.putValue("postIssueStatus", Util.initString(riderVOs[i].getPostIssueStatusCT(), ""));
                riderPageBean.putValue("exchangeInd", riderVOs[i].getExchangeInd());
                riderPageBean.putValue("annualPremium", Util.initString(riderVOs[i].getAnnualPremium() + "", ""));
                riderPageBean.putValue("quoteDate", Util.initString(riderVOs[i].getQuoteDate(), ""));
                riderPageBean.putValue("dateInEffect", riderVOs[i].getDateInEffect());
                riderPageBean.putValue("issueStateOrInd", Util.initString(riderVOs[i].getIssueStateORInd(), ""));
                riderPageBean.putValue("riderNumber", sequenceNumber + "");
                riderPageBean.putValue("multiple", (riderVOs[i].getEOBMultiple() + ""));
                riderPageBean.putValue("gioOption", Util.initString(riderVOs[i].getGIOOption(), ""));
                riderPageBean.putValue("insuredName", Util.initString(insuredName, ""));
                riderPageBean.putValue("expiryDate", expiryDate);
                riderPageBean.putValue("sequence", sequence);
                riderPageBean.putValue("location", location);
                riderPageBean.putValue("indivAnnPremium", indivAnnPremium);

                LifeVO riderLifeVO = null;
                String faceAmount = "";
                String startNew7PayIndicator = "";
                String startNew7PayIndicatorStatus = "unchecked";
                String lifePK = "";

                if (riderVOs[i].getLifeVOCount() > 0)
                {
                    riderLifeVO = riderVOs[i].getLifeVO(0);
                    lifePK = riderLifeVO.getLifePK() + "";
                    faceAmount = riderLifeVO.getFaceAmount().toString();
                    startNew7PayIndicator = Util.initString(riderLifeVO.getStartNew7PayIndicator(), "");

                    if (startNew7PayIndicator.equals("Y"))
                    {
                        startNew7PayIndicatorStatus = "checked";
                    }
                }

                riderPageBean.putValue("faceAmount", faceAmount);
                riderPageBean.putValue("startNew7PayIndicatorStatus", startNew7PayIndicatorStatus);
                riderPageBean.putValue("lifePK", lifePK);

                if (riderLifeVO != null)
                {
                    riderVOsArray.add(riderLifeVO);
                }

                if (riderVOs[i].getValueAtIssueVOCount() > 0)
                {
                    riderPageBean.putValue("valueAtIssue", "checked");
                }
                String riderBeanKey = (sequenceNumber + "") + "_" + optionCodeCT;
                riderPageBean.putValue("riderBeanKey", riderBeanKey);

                riders.putPageBean(riderBeanKey, riderPageBean);
            }

            appReqBlock.getHttpSession().setAttribute("riderLifeVO", riderVOsArray);
        }
    }


    protected String loadTransactionProcess(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        clearAllTransactionSessions(appReqBlock);

        SessionBean transactions = appReqBlock.getSessionBean("contractTransactions");
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String contractNumber = contractMainSessionBean.getValue("contractId");
        String filterContractNumber = appReqBlock.getFormBean().getValue("filterContractNumber");

        if (((filterContractNumber == null) || filterContractNumber.equals("")) && (contractNumber != null))
        {
            filterContractNumber = contractNumber;
        }

        if (filterContractNumber != null)
        {
            appReqBlock.getHttpSession().setAttribute("filterContractNumber", filterContractNumber);
        }

        if (true)
        {
            contract.business.Lookup contractLookup = new contract.component.LookupComponent();

            engine.business.Lookup engineLookup = new engine.component.LookupComponent();

            Event eventComponent = new EventComponent();

            String beginScrollingTrxPK = "0";
            String endScrollingTrxPK = "0";
            int scrollDirection = 1;
            long scrollingTrxPK = Long.parseLong(endScrollingTrxPK);
            String noScrollingValue = null;

            EDITTrxVO[] editTrxVOs = null;

            List voInclusionVector = new ArrayList();
            voInclusionVector.add(ClientSetupVO.class);
            voInclusionVector.add(ContractSetupVO.class);

            if (appReqBlock.getFormBean().getValue("filtered").equalsIgnoreCase("true") || (!filterContractNumber.equals("") && (filterContractNumber != null)))
            {
                SegmentVO[] segmentVO = contractLookup.findSegmentVOByContractNumber(filterContractNumber, false, null);

                if ((segmentVO != null) && (segmentVO.length > 0))
                {
                    List segmentPKList = new ArrayList();

                    long segmentPK = segmentVO[0].getSegmentPK();

                    segmentPKList.add(new Long(segmentPK));

                    SegmentVO[] riderSegmentVOs = contractLookup.findRiderSegmentsBy_SegmentPK(segmentPK);
                    if (riderSegmentVOs != null && riderSegmentVOs.length > 0)
                    {
                        for (int i = 0; i < riderSegmentVOs.length; i++)
                        {
                            segmentPKList.add(new Long(riderSegmentVOs[i].getSegmentPK()));
                        }
                    }

                    // Get Transactions from the EVENT DB
                    editTrxVOs = eventComponent.composeEDITTrxVOBySegmentPKs_AND_PendingStatus(segmentPKList,
                                                                    new String[] {"P", "M", "X"}, voInclusionVector);
                }
            }

            else
            {
                if (filterContractNumber == null)
                {
                    filterContractNumber = "";
                    appReqBlock.getHttpSession().setAttribute("filterContractNumber", filterContractNumber);
                }

                // Transaction scrolling logic
                beginScrollingTrxPK = (String) appReqBlock.getFormBean().getValue("beginScrollingTrxPK");

                if ((beginScrollingTrxPK == null) || beginScrollingTrxPK.equals(""))
                {
                    beginScrollingTrxPK = "0";
                }

                endScrollingTrxPK = (String) appReqBlock.getFormBean().getValue("endScrollingTrxPK");

                if ((endScrollingTrxPK == null) || endScrollingTrxPK.equals(""))
                {
                    endScrollingTrxPK = "0";
                }

                String direction = appReqBlock.getFormBean().getValue("scrollDirection");

                if ((direction == null) || direction.equals(""))
                {
                    scrollDirection = 1;
                }
                else if (direction.equalsIgnoreCase("FORWARD"))
                {
                    scrollDirection = 1;
                }
                else if (direction.equalsIgnoreCase("BACKWARD"))
                {
                    scrollDirection = -1;
                }

                noScrollingValue = Util.initString((String) appReqBlock.getFormBean().getValue("noScrolling"), "false");

                scrollingTrxPK = 0;

                if ((scrollDirection == 1) && noScrollingValue.equalsIgnoreCase("false"))
                {
                    scrollingTrxPK = Long.parseLong(endScrollingTrxPK);
                }
                else if ((scrollDirection < 0) && noScrollingValue.equalsIgnoreCase("false"))
                {
                    scrollingTrxPK = Long.parseLong(beginScrollingTrxPK);
                }

                if (noScrollingValue.equalsIgnoreCase("true"))
                {
                    scrollingTrxPK = Long.parseLong(beginScrollingTrxPK);
                    scrollDirection = 1;
                }

                // Get transactions from EVENT DB by range - no contract number supplied.
                editTrxVOs = eventComponent.composeEDITTrxVOByRange_AND_PendingStatus(scrollingTrxPK,
                                    new String[] {"P", "M", "X"}, 25, scrollDirection, voInclusionVector);
            }

            if (editTrxVOs != null)
            {
                // Update the begin/end TrxPKs with NEW values
                appReqBlock.getHttpServletRequest().setAttribute("beginScrollingTrxPK", editTrxVOs[0].getEDITTrxPK() + "");
                appReqBlock.getHttpServletRequest().setAttribute("endScrollingTrxPK", editTrxVOs[editTrxVOs.length - 1].getEDITTrxPK() + "");
                appReqBlock.getHttpServletRequest().setAttribute("noScrolling", noScrollingValue);

                String trxMessage = "";

                trxMessage = appReqBlock.getSessionBean("contractTransactionSessionBean").getValue("transactionMessage");

                if (trxMessage != null)
                {
                    if (trxMessage.equals(""))
                    {
                        clearAllTransactionSessions(appReqBlock);
                    }
                }

                else
                {
                    clearAllTransactionSessions(appReqBlock);
                }
            }
            else
            {
                // Update the begin/end TrxPKs with OLD values
                appReqBlock.getHttpServletRequest().setAttribute("beginScrollingTrxPK", beginScrollingTrxPK);
                appReqBlock.getHttpServletRequest().setAttribute("endScrollingTrxPK", endScrollingTrxPK);
                appReqBlock.getHttpServletRequest().setAttribute("noScrolling", noScrollingValue);

                String transactionType = (String) appReqBlock.getHttpSession().getAttribute("lastDisplayedTrxType");

                if (transactionType == null)
                {
                    transactionType = "payout";
                }

                appReqBlock.getHttpSession().setAttribute("lastDisplayedTrxType", transactionType);

                if ((filterContractNumber != null) && !filterContractNumber.equals("") && ((appReqBlock.getHttpServletRequest().getAttribute("analyzerMode") == null) || !appReqBlock.getHttpServletRequest().getAttribute("analyzerMode").equals("true")))
                {
                    appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("transactionMessage", "Contract Not Found or No Transactions Exist.");
                }

                String productStructureId = Util.initString(contractMainSessionBean.getValue("companyStructureId"), "");

                String transactionTypeCode = getTrxCTFromDescription(transactionType, productStructureId);

                return getTransactionReturnPage(transactionTypeCode);
            }

            ProductStructureVO[] productStructureVOs = engineLookup.getProductStructuresByTypeCode("Product");

            Map productStructures = new HashMap();

            for (int j = 0; j < productStructureVOs.length; j++)
            {
                String productStructureId = productStructureVOs[j].getProductStructurePK() + "";
                productStructures.put(productStructureId, productStructureVOs[j]);
            }

            if (editTrxVOs != null) {

                for (int i = 0; i < editTrxVOs.length; i++)
                {
                    ClientSetupVO clientSetupVO = (ClientSetupVO) editTrxVOs[i].getParentVO(ClientSetupVO.class);
                    ContractSetupVO contractSetupVO = (ContractSetupVO) clientSetupVO.getParentVO(ContractSetupVO.class);

                    PageBean transactionBean = new PageBean();

                    String editTrxPK = editTrxVOs[i].getEDITTrxPK() + "";
                    String trxTypeCode = editTrxVOs[i].getTransactionTypeCT();

                    String effectiveDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(editTrxVOs[i].getEffectiveDate());

                    String sequenceNumber = editTrxVOs[i].getSequenceNumber() + "";
                    String status = editTrxVOs[i].getStatus();

                    String pendingStatus = editTrxVOs[i].getPendingStatus();

                    // double amountDbl = editTrxVOs[i].getTrxAmount();
                    EDITBigDecimal amountDbl = new EDITBigDecimal(editTrxVOs[i].getTrxAmount());
                    String amount = Util.formatDecimal("########0.00", amountDbl);

                    String percent = Util.formatDecimal("0.0##", new EDITBigDecimal(editTrxVOs[i].getTrxPercent()));
                    long segmentFK = contractSetupVO.getSegmentFK();
                    String productStructureId = "";
                    String companyName = "";
                    String optionId = "";
                    String contractId = "";

                    if (segmentFK > 0)
                    {
                        SegmentVO[] segmentVO = contractLookup.getSegmentBySegmentPK(segmentFK, false, null);
                        productStructureId = segmentVO[0].getProductStructureFK() + "";

                        ProductStructure productStructure = (ProductStructure) ProductStructure.findByPK(Long.parseLong(productStructureId));
                        Company company = Company.findByPK(productStructure.getCompanyFK());
                        companyName = company.getCompanyName();

                        optionId = segmentVO[0].getOptionCodeCT();
                        contractId = segmentVO[0].getContractNumber();
                    }

                    String transactionType = codeTableWrapper.getCodeDescByCodeTableNameAndCode("TRXTYPE", trxTypeCode, Long.parseLong(productStructureId));

                    transactionBean.putValue("segmentFK", segmentFK + "");
                    transactionBean.putValue("transactionId", editTrxPK);
                    transactionBean.putValue("contractId", contractId);
                    transactionBean.putValue("transactionType", transactionType);

                    transactionBean.putValue("effectiveDate", effectiveDate);
                    transactionBean.putValue("sequenceNumber", sequenceNumber);
                    transactionBean.putValue("statusInd", status);
                    transactionBean.putValue("pendingStatus", pendingStatus);
                    transactionBean.putValue("amount", amount);
                    transactionBean.putValue("percent", percent);
                    transactionBean.putValue("companyName", companyName);
                    transactionBean.putValue("companyStructureId", productStructureId);
                    transactionBean.putValue("optionId", optionId);
                    transactionBean.putValue("premiumDueCreateInd", editTrxVOs[i].getPremiumDueCreatedIndicator());
                    transactions.putPageBean(editTrxVOs[i].getEDITTrxPK() + "", transactionBean);
                }
                 // end for
            }
             // end if
        }
         // end if

        appReqBlock.getHttpSession().setAttribute("filterContractNumber", filterContractNumber);

        String transactionType = (String) appReqBlock.getHttpSession().getAttribute("lastDisplayedTrxType");

        if (transactionType == null)
        {
            transactionType = "payout";
        }

        appReqBlock.getHttpSession().setAttribute("lastDisplayedTrxType", transactionType);

        String productStructureId = Util.initString(contractMainSessionBean.getValue("companyStructureId"), "");

        String transactionTypeCode = getTrxCTFromDescription(transactionType, productStructureId);

        return getTransactionReturnPage(transactionTypeCode);
    }

    private String getTransactionReturnPage(String transactionTypeCT)
    {
        if (EDITTrx.checkForScheduledEventTrxType(transactionTypeCT))
        {
            return CONTRACT_TRANS_SCHEDULED_EVENT;
        }

        else if ("PY".equalsIgnoreCase(transactionTypeCT) ||
                 "PI".equalsIgnoreCase(transactionTypeCT) ||
                 "VT".equalsIgnoreCase(transactionTypeCT) ||
                 EDITTrx.TRANSACTIONTYPECT_LOAN_REPAYMENT.equalsIgnoreCase(transactionTypeCT) ||
                 EDITTrx.TRANSACTIONTYPECT_PREMIUM_LOAN.equalsIgnoreCase(transactionTypeCT))
        {
            return CONTRACT_TRANS_PAYMENT;
        }

        else if ("TF".equalsIgnoreCase(transactionTypeCT) ||
                "AA".equalsIgnoreCase(transactionTypeCT) ||
                "PR".equalsIgnoreCase(transactionTypeCT) ||
                "FT".equalsIgnoreCase(transactionTypeCT) ||
                EDITTrx.TRANSACTIONTYPECT_SERIES_TRANSFER.equalsIgnoreCase(transactionTypeCT) ||
                "HFTA".equalsIgnoreCase(transactionTypeCT) ||
                "HFTP".equalsIgnoreCase(transactionTypeCT) ||
                EDITTrx.TRANSACTIONTYPECT_HF_SERIES_AMT.equalsIgnoreCase(transactionTypeCT) ||
                EDITTrx.TRANSACTIONTYPECT_HF_SERIES_PCT.equalsIgnoreCase(transactionTypeCT))
        {
            return CONTRACT_TRANSFER;
        }

        else
        {
            return CONTRACT_TRANS_WITHDRAWAL;
        }                     
    }

    protected String updateClientInfo(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

        String issueAgeMessage = null;

        PageBean formBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("clientFormBean");
        PageBean contractFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        SessionBean clients = appReqBlock.getSessionBean("contractClients");

        String taxId = formBean.getValue("taxId");
        String optionId = formBean.getValue("optionId");
        String relationship = formBean.getValue("relationship");
        String clientRoleFK = formBean.getValue("clientRoleFK");
        String contractClientPK = formBean.getValue("contractClientPK");
        String riderNumber = Util.initString(formBean.getValue("riderNumber"), "0");

        String relationToIns = formBean.getValue("relationToIns");
        String relationToEmp = formBean.getValue("relationToEmp");
        String phoneAuth = formBean.getValue("phoneAuth");
        String classType = formBean.getValue("classType");
        String flatExtra = formBean.getValue("flatExtra");
        String flatExtraAge = formBean.getValue("flatExtraAge");
        String flatExtraDur = formBean.getValue("flatExtraDur");
        String percentExtra = formBean.getValue("percentExtra");
        String percentExtraAge = formBean.getValue("percentExtraAge");
        String percentExtraDur = formBean.getValue("percentExtraDur");
        String tableRating = Util.initString(formBean.getValue("tableRating"), "");
        String payorOf = formBean.getValue("payorOf");
        String disbAddressType = formBean.getValue("disbAddressType");
        String corrAddressType = formBean.getValue("corrAddressType");
        String effectiveDate = formBean.getValue("effectiveDate");
        String terminateDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("terminateDate"));
        String terminationReason = formBean.getValue("terminationReason");
        String ratedGender = formBean.getValue("ratedGender");
        String underwritingClass = formBean.getValue("underwritingClass");
        String authorizedSignatureCT = formBean.getValue("authorizedSignatureCT");
        String originalClassCT = formBean.getValue("originalClassCT");

        if (terminateDate == null)
        {
            terminateDate = EDITDate.DEFAULT_MAX_DATE;
        }

        boolean optionExistsOnContract = true;

        if (!optionExistsOnContract)
        {
            appReqBlock.getHttpServletRequest().setAttribute("payeeMessage", "Coverage Selected Must Exist On Contract");
        }

        else
        {
            String clientIdKey = taxId + riderNumber  + optionId + relationship + clientRoleFK + contractClientPK;

            PageBean clientPageBean = clients.getPageBean(clientIdKey);

            ClientRole clientRole = new ClientRole();
            clientRole.setRoleTypeCT(relationship);
            if (relationship.equalsIgnoreCase("PAY") || relationship.equalsIgnoreCase("POR") ||
                clientRole.isBeneficiary())
            {
                String ccAllocPK = formBean.getValue("contractClientAllocationPK");
                String allocationPercent = formBean.getValue("allocationPercent");
                String splitEqualInd = Util.initString(formBean.getValue("splitEqualInd"), "N");
                String allocationAmount = Util.initString(formBean.getValue("allocationDollar"), "0");

                clientPageBean.putValue("allocationPercent", allocationPercent);
                clientPageBean.putValue("splitEqualInd", splitEqualInd);
                clientPageBean.putValue("allocationDollar", allocationAmount);

                if (!Util.isANumber(allocationPercent) && !splitEqualInd.equalsIgnoreCase("Y"))
                {
                    appReqBlock.getHttpServletRequest().setAttribute("clientMessage", "Allocation Percent is Invalid - Please Re-enter.");
                }
                else
                {
                    String[] ccAllocPKs = clientPageBean.getValues("contractClientAllocationPKs");
                    String[] allocPcnts = clientPageBean.getValues("allocationPercents");
                    String[] splitEquals = clientPageBean.getValues("splitEquals");
                    String[] allocationAmounts = clientPageBean.getValues("allocationDollars");

                    for (int s = 0; s < ccAllocPKs.length; s++)
                    {
                        if (ccAllocPKs[s].equals(ccAllocPK))
                        {
                            allocPcnts[s] = allocationPercent;
                            splitEquals[s] = splitEqualInd;
                            allocationAmounts[s] = allocationAmount;
                            break;
                        }
                    }
                }
            }

            if (relationship.equalsIgnoreCase("PAY"))
            {
                clientPageBean.putValue("effectiveDate", formBean.getValue("effectiveDate"));
            }
            else
            {
                clientPageBean.putValue("effectiveDate", effectiveDate);
            }

            clientPageBean.putValue("relationshipInd", relationship);
            clientPageBean.putValue("relationToIns", relationToIns);
            clientPageBean.putValue("relationToEmp", relationToEmp);
            clientPageBean.putValue("phoneAuth", phoneAuth);
            clientPageBean.putValue("classType", classType);
            clientPageBean.putValue("payorOf", payorOf);
            clientPageBean.putValue("disbAddressType", disbAddressType);
            clientPageBean.putValue("corrAddressType", corrAddressType);
            clientPageBean.putValue("terminationDate", DateTimeUtil.formatYYYYMMDDToMMDDYYYY(terminateDate));
            clientPageBean.putValue("terminationReason", terminationReason);
            clientPageBean.putValue("ratedGender", ratedGender);
            clientPageBean.putValue("underwritingClass", underwritingClass);
            clientPageBean.putValue("authorizedSignatureCT", authorizedSignatureCT);
            clientPageBean.putValue("flatExtra", flatExtra);
            clientPageBean.putValue("flatExtraAge", flatExtraAge);
            clientPageBean.putValue("flatExtraDur", flatExtraDur);
            clientPageBean.putValue("percentExtra", percentExtra);
            clientPageBean.putValue("percentExtraAge", percentExtraAge);
            clientPageBean.putValue("percentExtraDur", percentExtraDur);
            clientPageBean.putValue("tableRating", tableRating);
            clientPageBean.putValue("beneRelationshipToIns", formBean.getValue("beneRelationshipToIns"));
            clientPageBean.putValue("employeeIdentification", formBean.getValue("employeeIdentification"));
            clientPageBean.putValue("relationToEmp", formBean.getValue("relationToEmp"));
            clientPageBean.putValue("riderNumber", riderNumber);
            clientPageBean.putValue("originalClassCT", originalClassCT);

            String segmentName = contractFormBean.getValue("segmentName");
            issueAgeMessage = calculateIssueAge(clientPageBean, segmentName);

            if ((String) appReqBlock.getHttpServletRequest().getAttribute("clientMessage") == null)
            {
                clients.putPageBean(clientIdKey, clientPageBean);

                if (!issueAgeMessage.equals(""))
                {
                    setOwnerIssueAge(clients);
                }
            }

            if (relationship.equalsIgnoreCase("TermInsured"))
            {
                PageBean baseFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");

                String batchContractSetupFK = Util.initString(baseFormBean.getValue("batchContractSetupFK"), "0");
                getCaseUnderwritingForClient(appReqBlock, batchContractSetupFK);
            }

            appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("clientFormBean", clientPageBean);
        }

        return currentPage;
    }

//    protected void loadBillingLapseDateToBean(PageBean clientPageBean, PageBean formBean, String Month, String Date, String Year, String arrayName)
//    {
//        String month = formBean.getValue(Month);
//        String date = formBean.getValue(Date);
//        String year = formBean.getValue(Year);
//
//        String[] dates = clientPageBean.getValues(arrayName);
//
//        if (dates != null)
//        {
//            //            dates[0] = year+month+date;
//            clientPageBean.putValue(Month, month);
//            clientPageBean.putValue(Year, year);
//            clientPageBean.putValue(Date, date);
//            clientPageBean.removeValue(arrayName);
//
//            if ((year != null) && !year.trim().equals("") && (month != null) && !month.trim().equals("") && (date != null) && !date.trim().equals(""))
//            {
//                EDITDate editDate = new EDITDate(year, month, date);
//                clientPageBean.addToValues(arrayName, editDate.getFormattedDate());
//                clientPageBean.putValue(arrayName.substring(0, arrayName.length() - 1), editDate.getFormattedDate());
//            }
//            else
//            {
//                clientPageBean.addToValues(arrayName, "");
//                clientPageBean.putValue(arrayName.substring(0, arrayName.length() - 1), "");
//            }
//        }
//    }

    /**
     * Saves an AgentHierarchyAllocation to the summary.  Allocations have history, therefore, any change requires
     * the inactivating of the current allocation (by changing the stopDate) and creating a new allocation with the
     * entered values.
     * <P>
     * Hoaky UI stuff: if the allocation was recently added to the allocation page but has not been "saved" yet (i.e.
     * the user has not hit the Save button on the allocation page), the allocation should be able to be changed without
     * it becoming history (for example, an agent was added and the default allocationPercent is 1 but now user wants
     * to change the percent).  These types of allocations will have negative pks.
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    protected String saveAllocationToSummary(AppReqBlock appReqBlock) throws Exception
    {
        String selectedAgentHierarchyAllocationPK = appReqBlock.getFormBean().getValue("selectedAgentHierarchyAllocationPK");
        String allocationPercentString = appReqBlock.getFormBean().getValue("selectedAllocationPercent");
        String startDateString =  appReqBlock.getFormBean().getValue("startDate");

        UIAgentHierarchyVO[] tempUIAgentHierarchyVOs = (UIAgentHierarchyVO[]) appReqBlock.getHttpSession().getAttribute("tempUIAgentHierarchyVOs");

        List updatedUIAgentHierarchyVOs = new ArrayList();

        for (int i = 0; i < tempUIAgentHierarchyVOs.length; i++)
    {
            AgentHierarchyAllocationVO agentHierarchyAllocationVO = tempUIAgentHierarchyVOs[i].getAgentHierarchyAllocationVO();
            AgentHierarchyVO agentHierarchyVO = tempUIAgentHierarchyVOs[i].getAgentHierarchyVO();
            Segment segment = Segment.findByPK(agentHierarchyVO.getSegmentFK());
            AgentVO agentVO = tempUIAgentHierarchyVOs[i].getAgentVO();

            String agentHierarchyAllocationPK = agentHierarchyAllocationVO.getAgentHierarchyAllocationPK() + "";

            Long pkLong = new Long(agentHierarchyAllocationPK);

            UtilitiesForTran util = new UtilitiesForTran();

            if ((agentHierarchyAllocationVO.getAgentHierarchyAllocationPK() + "").equals(selectedAgentHierarchyAllocationPK))
            {
                if (pkLong.longValue() >= 0)
        {
                    //  It is NOT a negative pk, create the new allocation, inactivate the old, update the hierarchy,
                    //  and add new allocation to the ui objects

                    //  Create a new allocation with the newly entered values (becomes the 'active' allocation)
                    AgentHierarchyAllocation activeAgentHierarchyAllocation = util.createAgentHierarchyAllocation(
                    		DateTimeUtil.formatMMDDYYYYToYYYYMMDD(startDateString), allocationPercentString);

                    // Update the agentHierarchy with new settings and new allocation
                    util.updateAgentHierarchyVO(agentHierarchyVO, activeAgentHierarchyAllocation);

                    //  Inactivate the old allocation
                    util.inactivateAgentHierarchyAllocation(agentHierarchyAllocationVO, DateTimeUtil.formatMMDDYYYYToYYYYMMDD(startDateString));

                    //  Create a new UIAgentHierarchyVO for the newly created allocation and add to the updated list of UIAgentHierarchyVOs
                    UIAgentHierarchyVO uiAgentHierarchyVO = util.createUIAgentHierarchyVO(activeAgentHierarchyAllocation.getAsVO(), 
                    		agentHierarchyVO, agentVO, segment.getRiderNumber(), segment.getOptionCodeCT(), segment.getEffectiveDate().getFormattedDate(), 
                    		segment.getSegmentPK());
                    
                    updatedUIAgentHierarchyVOs.add(uiAgentHierarchyVO);
                }
                else
            {
                    // It IS a negative pk, just update the allocation percent and the servicingAgent indicator
                    agentHierarchyAllocationVO.setAllocationPercent(new EDITBigDecimal(allocationPercentString).getBigDecimal());
                }
            }

            updatedUIAgentHierarchyVOs.add(tempUIAgentHierarchyVOs[i]);
            }

        UIAgentHierarchyVO[] updateUIVOs = (UIAgentHierarchyVO[]) updatedUIAgentHierarchyVOs.toArray(new UIAgentHierarchyVO[updatedUIAgentHierarchyVOs.size()]);

        appReqBlock.getHttpSession().setAttribute("tempUIAgentHierarchyVOs", updateUIVOs);
        appReqBlock.getHttpServletRequest().setAttribute("startDate", startDateString);
        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentHierarchyAllocationPK", selectedAgentHierarchyAllocationPK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedAllocationPercent", allocationPercentString);
        appReqBlock.getHttpServletRequest().setAttribute("shouldLockStartDate", "true");  // lock the start date from further changes
        
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String newRiderBeanKey = contractMainSessionBean.getValue("newRiderBeanKey");

        if (newRiderBeanKey == null || newRiderBeanKey.equals("")) {
            return AGENT_HIERARCHY_ALLOCATION_DIALOG;
        } else {
        	return CONTRACT_AGENT_HIERARCHY_ALLOCATION_DIALOG;
        }
    }

    /**
     * User hit 'Save' on allocation dialog.  "Copies" the array of temporary ui objects to the regular ui objects by
     * setting them in session.
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    protected String saveAllocationChanges(AppReqBlock appReqBlock) throws Exception
    {
        UIAgentHierarchyVO[] tempUIAgentHierarchyVOs = (UIAgentHierarchyVO[]) appReqBlock.getHttpSession().getAttribute("tempUIAgentHierarchyVOs");

        Map<Long, EDITBigDecimal> totalAllocationPercentMap = new HashMap<Long, EDITBigDecimal>();

        for (int i = 0; i < tempUIAgentHierarchyVOs.length; i++)
        {
            AgentHierarchyAllocationVO agentHierarchyAllocationVO = tempUIAgentHierarchyVOs[i].getAgentHierarchyAllocationVO();

        	EDITBigDecimal allocationPercent = new EDITBigDecimal(agentHierarchyAllocationVO.getAllocationPercent());
            EDITDate stopDate = new EDITDate(agentHierarchyAllocationVO.getStopDate());

	        if (new EDITDate(EDITDate.DEFAULT_MAX_DATE).equals(stopDate))
	        {
	        	if (totalAllocationPercentMap.get(tempUIAgentHierarchyVOs[i].getSegmentFK()) != null) {
		            EDITBigDecimal sum = totalAllocationPercentMap.get(tempUIAgentHierarchyVOs[i].getSegmentFK()).addEditBigDecimal(allocationPercent);
		            totalAllocationPercentMap.put(tempUIAgentHierarchyVOs[i].getSegmentFK(), sum);
	        	
	        	} else {
		            totalAllocationPercentMap.put(tempUIAgentHierarchyVOs[i].getSegmentFK(), allocationPercent);
	        	}
	        }
        }
        
		boolean totalAllocationPercentsFail = false;

		String agentMessage = "";
        for (Long key : totalAllocationPercentMap.keySet()) {
			if (!totalAllocationPercentMap.get(key).isEQ(new EDITBigDecimal("1"))) {
					totalAllocationPercentsFail = true;
					
			        Segment segment = Segment.findByPK(key);
			        agentMessage = segment.getOptionCodeCT() + " Coverage (Effective " + segment.getEffectiveDate() + ")";
			}
		}
                
        if (totalAllocationPercentsFail) {
            appReqBlock.getHttpServletRequest().setAttribute("agentMessage", "Allocation Percent Does Not Equal 1 For " + agentMessage);
            appReqBlock.getHttpSession().setAttribute("tempUIAgentHierarchyVOs", tempUIAgentHierarchyVOs);
            appReqBlock.getHttpServletRequest().setAttribute("shouldLockStartDate", "false");  // no lock on start date (i.e. is editable)
                        
        } else {
            appReqBlock.getHttpServletRequest().setAttribute("agentMessage", "");
            appReqBlock.getHttpServletRequest().setAttribute("shouldLockStartDate", "false");  
            appReqBlock.getHttpSession().setAttribute("uiAgentHierarchyVOs", tempUIAgentHierarchyVOs);

            //  Remove the temp ui objects from session to avoid problems
            appReqBlock.getHttpSession().removeAttribute("tempUIAgentHierarchyVOs");
        }
                
        return CONTRACT_AGENT;

    }

    /**
     * User hit 'Cancel' on the allocation dialog.  Removes the temp ui objects from session.
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    protected String cancelAllocationChanges(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("tempUIAgentHierarchyVOs");

        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String newRiderBeanKey = contractMainSessionBean.getValue("newRiderBeanKey");

        if (newRiderBeanKey == null || newRiderBeanKey.equals("")) {
            return CONTRACT_AGENT;
        } else {
        	PageBean contractFormBean = contractMainSessionBean.getPageBean("formBean");
            String optionId = contractFormBean.getValue("optionId");

            String productType = checkProductType(optionId);
            
        	return getLifeRiderReturnPage(productType);        
        }
    }

    protected String saveFundToSummary(AppReqBlock appReqBlock) throws Exception
    {
        String investmentMessage = "";

        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        PageBean formBean = appReqBlock.getFormBean();
        SessionBean funds = appReqBlock.getSessionBean("contractFunds");
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");

        String optionId = formBean.getValue("optionId");

        if (!optionId.equalsIgnoreCase("Please Select"))
        {
            if (Util.isANumber(optionId))
            {
                CodeTableVO codeTableVO = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionId));
                optionId = codeTableVO.getCode();
            }
        }

        formBean.putValue("optionId", optionId);

        String fundId = formBean.getValue("filteredFundFK");
        String allocationPercent = formBean.getValue("allocationPercent");

        PageBean fundPageBean = null;

        if (!Util.isANumber(allocationPercent))
        {
            investmentMessage = "Invalid Allocation Percent - Please Re-enter.";
        }
        else if(new EDITBigDecimal(allocationPercent).isLT(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
        {
            investmentMessage = "Negative Allocation Percent - Please Re-enter.";
        }
        else
        {	
            boolean optionExistsOnContract = true;

            PageBean baseRiderBean = contractMainSessionBean.getPageBean("formBean");

            String baseOptionId = baseRiderBean.getValue("optionId");

            if (!optionId.equals(baseOptionId))
            {
                SessionBean riders = appReqBlock.getSessionBean("contractRiders");
                Map riderPageBeans = riders.getPageBeans();

                if (riderPageBeans != null)
                {
                    if (!riderPageBeans.containsKey(optionId))
                    {
                        optionExistsOnContract = false;
                    }
                }
            }

            if (!optionExistsOnContract)
            {
                String currentPage = stateBean.getValue("currentPage");

                savePreviousPageFormBean(appReqBlock, currentPage);

                appReqBlock.getHttpServletRequest().setAttribute("investmentMessage", "Coverage Selected Must Exist On Contract");
            }
            else
            {
                String key = optionId + fundId;

                String fundName = null;
                String fundType =  null;

                if (!funds.pageBeanExists(key))
                {
                    engine.business.Lookup engineLookup = new engine.component.LookupComponent();
                    FundVO[] fundVO = engineLookup.getFundByFilteredFundFK(Long.parseLong(fundId),
                            false,
                            null);
                    fundName = fundVO[0].getName();
                    fundType = fundVO[0].getFundType();

                    if (!fundType.equalsIgnoreCase("LOAN") && !fundType.equalsIgnoreCase("LoanCollateral"))
                    {
                        fundPageBean = setInvestmentBean(fundPageBean, optionId, fundId, fundName, fundType, allocationPercent);

                        funds.putPageBean(key, fundPageBean);
                    }
                    else
                    {
                        investmentMessage = "Cannot Select Loan Fund for Contract";
                    }
                }
                else
                {
                    fundPageBean = funds.getPageBean(key);
                    String overrideStatus = fundPageBean.getValue("overrideStatus");
                    fundName = fundPageBean.getValue("fundName");
                    fundType = fundPageBean.getValue("fundType");
                    if (overrideStatus.equalsIgnoreCase("O"))
                    {
                        //create new investment allocation for same investment
                        fundPageBean.putValue("invAllocPK", "0");
                        fundPageBean.putValue("overrideStatus", "P");
                        fundPageBean.putValue("allocationPercent", allocationPercent);
                        fundPageBean.putValue("dollars", "0");
                        fundPageBean.putValue("units", "0");
                        funds.putPageBean(key, fundPageBean);
                    }
                    else
                    {
                        fundPageBean.putValue("allocationPercent", allocationPercent);
                    }
                }
            }
        }

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("investmentFormBean", formBean);
        appReqBlock.getHttpServletRequest().setAttribute("investmentMessage", investmentMessage);

//        PageBean contractFormBean = contractMainSessionBean.getPageBean("formBean");

        return CONTRACT_INVESTMENTS;
    }

    private PageBean setInvestmentBean(PageBean fundPageBean, String optionId, String fundId, String fundName,
                                    String fundType, String allocationPercent)
    {
        fundPageBean = new PageBean();


        fundPageBean.putValue("investmentPK", "0");
        fundPageBean.putValue("optionId", optionId);
        fundPageBean.putValue("filteredFundFK", fundId);
        fundPageBean.putValue("fundName", fundName);
        fundPageBean.putValue("fundType", fundType);
        fundPageBean.putValue("invAllocPK", "0");
        fundPageBean.putValue("allocationPercent", allocationPercent);
        fundPageBean.putValue("dollars", "0");
        fundPageBean.putValue("units", "0");
        fundPageBean.putValue("overrideStatus", "P");
        fundPageBean.putValue("cumUnits", "0");
        fundPageBean.putValue("cumDollars", "0");

        return fundPageBean;
    }
    private String showSelectCoverageDialog(AppReqBlock appReqBlock)
    {
        // Check for authorization
        //        new ContractUseCaseComponent().
        return SELECT_COVERAGE_DIALOG;
    }

    protected String showContractMainContent(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        PageBean formBean = contractMainSessionBean.getPageBean("formBean");
        String optionId = formBean.getValue("optionId");

        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");

        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

        String productType = checkProductType(optionId);
        String mainReturnPage = getMainReturnPage(productType);

        return mainReturnPage;
        }

    protected String showContractRiders(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");

        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

        return CONTRACT_MAIN;
    }

    protected String showContractInvestments(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

        String productStructureId = appReqBlock.getSessionBean("contractMainSessionBean").getValue("companyStructureId");

        if (!productStructureId.equals("") && !productStructureId.equalsIgnoreCase("Please Select"))
        {
            UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
            appReqBlock.getHttpSession().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
        }

        PageBean fundFormBean = new PageBean();

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("investmentFormBean", fundFormBean);

        return CONTRACT_INVESTMENTS;
    }

    protected String showLoanPayoffQuoteDialog(AppReqBlock appReqBlock) throws Exception
    {
        return LOAN_PAYOFF_QUOTE_DIALOG;
    }

    protected String clearInvestmentsForAddOrCancel(AppReqBlock appReqBlock) throws Exception
    {
        String productStructureId = appReqBlock.getSessionBean("contractMainSessionBean").getValue("companyStructureId");

        if (!productStructureId.equals("") && !productStructureId.equalsIgnoreCase("Please Select"))
        {
            UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
            appReqBlock.getHttpSession().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
        }

        PageBean fundFormBean = new PageBean();

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("investmentFormBean", fundFormBean);

        return CONTRACT_INVESTMENTS;
    }

    private String clearNotesForAddOrCancel(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getSessionBean("contractNotesSessionBean").putPageBean("formBean", new PageBean());

        return CONTRACT_NOTES_DIALOG;
    }

//    private UIFilteredFundVO[] buildUIFilteredFundVO(AppReqBlock appReqBlock, String companyStructureId) throws Exception
//    {
//        engine.business.Lookup engineLookup = new engine.component.LookupComponent();
//
//        FilteredFundVO[] filteredFundVO = engineLookup.findFilteredFundByCompanyStructure(Long.parseLong(companyStructureId), false, null);
//
//        List uiFFVector = new ArrayList();
//
//        if (filteredFundVO != null)
//        {
//            for (int f = 0; f < filteredFundVO.length; f++)
//            {
//                UIFilteredFundVO uiFFVO = new UIFilteredFundVO();
//
//                uiFFVO.addFilteredFundVO(filteredFundVO[f]);
//
//                FundVO[] fundVO = engineLookup.getFundByFilteredFundFK(filteredFundVO[f].getFilteredFundPK(), false, null);
//
//                uiFFVO.addFundVO(fundVO[0]);
//
//                uiFFVector.add(uiFFVO);
//            }
//        }
//
//        if (uiFFVector.size() > 0)
//        {
//            return (UIFilteredFundVO[]) uiFFVector.toArray(new UIFilteredFundVO[uiFFVector.size()]);
//        }
//
//        else
//        {
//            return null;
//        }
//    }

    private UIInvestmentOverrideVO[] buildUIInvestmentOverrideVO(String contractNumber) throws Exception
    {
        List uiIOVector = new ArrayList();

        contract.business.Lookup contractLookup = new contract.component.LookupComponent();

        List voExclusionList = new ArrayList();
        voExclusionList.add(ContractClientVO.class);
        voExclusionList.add(PayoutVO.class);
        voExclusionList.add(NoteReminderVO.class);
        voExclusionList.add(BucketVO.class);

        //        voExclusionList.add(ChangeHistoryVO.class);
        voExclusionList.add(ContractSetupVO.class);
        voExclusionList.add(InherentRiderVO.class);
        voExclusionList.add(BucketHistoryVO.class);
        voExclusionList.add(ContractRequirementVO.class);
        voExclusionList.add(SegmentBackupVO.class);
        voExclusionList.add(AgentHierarchyVO.class);

        SegmentVO[] segmentVO = contractLookup.getSegmentByContractNumber(contractNumber, true, voExclusionList);

        if ((segmentVO != null) && (segmentVO.length > 0))
        {
            InvestmentVO[] investmentVOs = segmentVO[0].getInvestmentVO();

            if (investmentVOs != null)
            {
                for (int i = 0; i < investmentVOs.length; i++)
                {
                    InvestmentAllocationVO[] investmentAllocVOs = investmentVOs[i].getInvestmentAllocationVO();

                    if (investmentAllocVOs != null)
                    {
                        for (int a = 0; a < investmentAllocVOs.length; a++)
                        {
                            String overrideStatus = investmentAllocVOs[a].getOverrideStatus();

                            if (overrideStatus.equalsIgnoreCase("O"))
                            {
                                UIInvestmentOverrideVO uiIOVO = new UIInvestmentOverrideVO();

                                uiIOVO.setFilteredFundFK(investmentVOs[i].getFilteredFundFK());

                                uiIOVO.addInvestmentAllocationVO(investmentAllocVOs[a]);

                                uiIOVector.add(uiIOVO);
                            }
                        }
                    }
                }
            }
        }

        if (uiIOVector.size() > 0)
        {
            return (UIInvestmentOverrideVO[]) uiIOVector.toArray(new UIInvestmentOverrideVO[uiIOVector.size()]);
        }

        else
        {
            return null;
        }
    }

    protected String showContractNonPayeeOrPayee(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");

        PageBean formBean = new PageBean();

        String currentPage = stateBean.getValue("currentPage");

        // Saves formBean in the appropriate SessionBean
        savePreviousPageFormBean(appReqBlock, currentPage);

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("clientFormBean", formBean);

        return CONTRACT_NON_PAYEE;
    }

    protected String showContractAgents(AppReqBlock appReqBlock) throws Exception
    {
        //Check for Authorization
        new InforceUseCaseComponent().accessAgent();

        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

        return CONTRACT_AGENT;
    }

    protected String showAgentSelectionDialog(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("selectedAgentVO");
        appReqBlock.getHttpSession().removeAttribute("placedAgentBranchVOs");

        //  Get the startDate and temp ui objects and put them back in request so they won't get lost
        String startDateString = appReqBlock.getFormBean().getValue("startDate");
        appReqBlock.getHttpServletRequest().setAttribute("startDate", startDateString);

        return AGENT_SELECTION_DIALOG;
    }
    
    protected String showContractRiderAgentSelectionDialog(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("selectedAgentVO");
        appReqBlock.getHttpSession().removeAttribute("placedAgentBranchVOs");

        // Get the startDate and temp ui objects and put them back in request so they won't get lost
        String effectiveDate = appReqBlock.getFormBean().getValue("effectiveDate");
        appReqBlock.getHttpServletRequest().setAttribute("startDate", effectiveDate);

        return CONTRACT_RIDER_AGENT_SELECTION_DIALOG;
    }

    protected String getAgentInfo(AppReqBlock appReqBlock) throws Exception
    {
        return AGENT_SELECTION_DIALOG;
    }

    protected String closeAgentSelectionDialog(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("selectedAgentVO");
        appReqBlock.getHttpSession().removeAttribute("placedAgentBranchVOs");
        
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String newRiderBeanKey = contractMainSessionBean.getValue("newRiderBeanKey");
        
        if (newRiderBeanKey == null || newRiderBeanKey.equals("")) {
            return CONTRACT_AGENT;
        } else {
        	
        	PageBean contractFormBean = contractMainSessionBean.getPageBean("formBean");
            String optionId = contractFormBean.getValue("optionId");

            String productType = checkProductType(optionId);
            
        	return getLifeRiderReturnPage(productType);
        }
    }

    protected String clearContractAgentForm(AppReqBlock appReqBlock) throws Exception
    {
        return CONTRACT_AGENT;
    }

    protected String clearAllocationForm(AppReqBlock appReqBlock) throws Exception
    {
    	SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String newRiderBeanKey = contractMainSessionBean.getValue("newRiderBeanKey");

        if (newRiderBeanKey == null || newRiderBeanKey.equals("")) {
            return AGENT_HIERARCHY_ALLOCATION_DIALOG;
        } else {
        	return CONTRACT_AGENT_HIERARCHY_ALLOCATION_DIALOG;
        }
    }

    protected String saveAgentSelection(AppReqBlock appReqBlock) throws Exception
    {
        String selectedPlacedAgentPK = appReqBlock.getFormBean().getValue("selectedPlacedAgentPK");
        String startDateString = appReqBlock.getFormBean().getValue("startDate");
        // ???? String coverage = appReqBlock.getFormBean().getValue("coverage");

		SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
		String newRiderBeanKey = contractMainSessionBean.getValue("newRiderBeanKey");
		
        int riderNumber = -1;
        String optionCodeCT = "";
        String effectiveDate = "";
        Long segmentPK = null;
        
        String selectedSegmentPK = appReqBlock.getFormBean().getValue("selectedSegmentPK");        
        if (selectedSegmentPK != null && !selectedSegmentPK.equals("")) {
        	Segment segment = Segment.findByPK(Long.parseLong(selectedSegmentPK));
        	riderNumber = segment.getRiderNumber();
        	optionCodeCT = segment.getOptionCodeCT();
    		effectiveDate = segment.getEffectiveDate().getFormattedDate();
    		segmentPK = segment.getSegmentPK();
        } else {
        	String newRiderSequenceNumber = contractMainSessionBean.getValue("newRiderSequenceNumber");
        	if (newRiderSequenceNumber != null && !newRiderSequenceNumber.equals("")) {
        		riderNumber = Integer.parseInt(newRiderSequenceNumber);
        	}
        	
        	optionCodeCT = contractMainSessionBean.getValue("newRiderCoverage");
    		effectiveDate = contractMainSessionBean.getValue("newRiderEffectiveDate");
    		segmentPK = 0L;
    		selectedSegmentPK = "0";
        }

        AgentVO agentVO = (AgentVO) appReqBlock.getHttpSession().getAttribute("selectedAgentVO");
        PlacedAgentBranchVO[] placedAgentBranchVOs = (PlacedAgentBranchVO[]) appReqBlock.getHttpSession().getAttribute("placedAgentBranchVOs");

        contract.business.Contract contractComponent = new contract.component.ContractComponent();

        AgentHierarchyVO agentHierarchyVO = new AgentHierarchyVO();

        agentHierarchyVO.setAgentHierarchyPK(contractComponent.getNextAvailableKey() * -1);
        agentHierarchyVO.setSegmentFK(Long.parseLong(selectedSegmentPK));
        agentHierarchyVO.setAgentFK(agentVO.getAgentPK());

        AgentHierarchyAllocationVO agentHierarchyAllocationVO = new AgentHierarchyAllocationVO();

        agentHierarchyAllocationVO.setAgentHierarchyAllocationPK(contractComponent.getNextAvailableKey() * -1);
        agentHierarchyAllocationVO.setAllocationPercent(new EDITBigDecimal("1").getBigDecimal());
        agentHierarchyAllocationVO.setStartDate(DateTimeUtil.formatMMDDYYYYToYYYYMMDD(startDateString));
        agentHierarchyAllocationVO.setStopDate(EDITDate.DEFAULT_MAX_DATE);
        agentHierarchyAllocationVO.setAgentHierarchyFK(agentHierarchyVO.getAgentHierarchyPK());

        agentHierarchyVO.addAgentHierarchyAllocationVO(agentHierarchyAllocationVO);

        UIAgentHierarchyVO[] existingUIAgentHierarchyVOs = (UIAgentHierarchyVO[]) appReqBlock.getHttpSession().getAttribute("tempUIAgentHierarchyVOs");

        UIAgentHierarchyVO uiAgentHierarchyVO = new UtilitiesForTran().createUIAgentHierarchyVO(agentHierarchyAllocationVO, agentHierarchyVO, agentVO, 
        		riderNumber, optionCodeCT, effectiveDate, segmentPK);

        for (int p = 0; p < placedAgentBranchVOs.length; p++)
        {
            int paCount = placedAgentBranchVOs[p].getPlacedAgentVOCount();

            if ((placedAgentBranchVOs[p].getPlacedAgentVO(paCount - 1).getPlacedAgentPK() + "").equals(selectedPlacedAgentPK))
            {
                PlacedAgentVO[] placedAgentVOs = placedAgentBranchVOs[p].getPlacedAgentVO();

                for (int z = 0; z < placedAgentVOs.length; z++)
                {
                    AgentSnapshotVO agentSnapshotVO = new AgentSnapshotVO();
                    agentSnapshotVO.setAgentSnapshotPK(contractComponent.getNextAvailableKey() * -1);
                    agentSnapshotVO.setAgentHierarchyFK(agentHierarchyVO.getAgentHierarchyPK());

                    long placedAgentPK = placedAgentVOs[z].getPlacedAgentPK();
                    agentSnapshotVO.setPlacedAgentFK(placedAgentPK);
                    agentSnapshotVO.setHierarchyLevel(placedAgentVOs[z].getHierarchyLevel());
                    agentSnapshotVO.setServicingAgentIndicator("N");
                    agentSnapshotVO.setParentVO(PlacedAgentVO.class, placedAgentVOs[z]);

                    agentHierarchyVO.addAgentSnapshotVO(agentSnapshotVO);
                }

                break;
            }
        }

        UIAgentHierarchyVO[] updatedUIAgentHierarchyVOs = null;

        List uiAgentHierarchyVOs = new ArrayList();

        if (existingUIAgentHierarchyVOs != null)
        {
            for (int e = 0; e < existingUIAgentHierarchyVOs.length; e++)
            {
                uiAgentHierarchyVOs.add(existingUIAgentHierarchyVOs[e]);
            }
        }

        uiAgentHierarchyVOs.add(uiAgentHierarchyVO);

        updatedUIAgentHierarchyVOs = (UIAgentHierarchyVO[]) uiAgentHierarchyVOs.toArray(new UIAgentHierarchyVO[uiAgentHierarchyVOs.size()]);

        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentHierarchyAllocationPK", agentHierarchyAllocationVO.getAgentHierarchyAllocationPK() + "");
        appReqBlock.getHttpSession().setAttribute("tempUIAgentHierarchyVOs", updatedUIAgentHierarchyVOs);
        appReqBlock.getHttpServletRequest().setAttribute("startDate", startDateString);
        appReqBlock.getHttpServletRequest().setAttribute("shouldLockStartDate", "true");  // lock the start date from further changes

        appReqBlock.getHttpSession().removeAttribute("selectedAgentVO");
        appReqBlock.getHttpSession().removeAttribute("placedAgentBranchVOs");
		
		if (newRiderBeanKey == null || newRiderBeanKey.equals("")) {
			return AGENT_HIERARCHY_ALLOCATION_DIALOG;
		} else {
			return CONTRACT_AGENT_HIERARCHY_ALLOCATION_DIALOG;
		}
    }

    /**
     * Searches for an agent based on the entered agentNumber
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    protected String showReportToAgent(AppReqBlock appReqBlock) throws Exception
    {
        String agentNumber = appReqBlock.getFormBean().getValue("agentId");

        //  Get the startDate and temp ui objects and put them back in request so they won't get lost
        String startDateString = appReqBlock.getFormBean().getValue("startDate");
        appReqBlock.getHttpServletRequest().setAttribute("startDate", startDateString);

//        UIAgentHierarchyVO[] tempUIAgentHierarchyVOs = (UIAgentHierarchyVO[]) appReqBlock.getHttpServletRequest().getAttribute("tempUIAgentHierarchyVOs");
//        appReqBlock.getHttpServletRequest().setAttribute("tempUIAgentHierarchyVOs", tempUIAgentHierarchyVOs);

//        UserSession userSession = appReqBlock.getUserSession();

//        Agent agent = Agent.findBy_AgentNumber_V1(agentNumber);
        
        ClientRole[] clientRoles = ClientRole.findBy_ReferenceID(agentNumber);

        if (clientRoles.length > 0)
        {
            // Map the Agent POJO to its corresponding AgentVO, etc.
            ClientRole clientRole = clientRoles[0]; // we don't care which one - ultimately we just want the ReferenceID, ClientDetail, Agent        
        
            ClientRoleVO clientRoleVO = (ClientRoleVO) clientRole.getVO();
            
            Agent agent = clientRole.getAgent();
            
            AgentVO agentVO = (AgentVO) agent.getVO();
            
            ClientDetail clientDetail = clientRole.getClientDetail();
            
            ClientDetailVO clientDetailVO = (ClientDetailVO) clientDetail.getVO();

            agentVO.setParentVO(ClientRoleVO.class, clientRoleVO);
            
            clientRoleVO.setParentVO(ClientDetailVO.class, clientDetailVO);

            appReqBlock.getHttpSession().setAttribute("selectedAgentVO", agentVO);

            agent.business.Agent agentComponent = new AgentComponent();

            PlacedAgentBranchVO[] placedAgentBranchVOs = agentComponent.getBranchesByAgent(agent);
            
            if (placedAgentBranchVOs != null)
            {
            
                List<PlacedAgentBranchVO> filteredPlacedAgentsBranchVOs = new ArrayList<PlacedAgentBranchVO>();
                
                // We are not interested in all PlaceAgentBranches, just those with a ClientRole.ReferenceID that matches the target Agent #
                for (PlacedAgentBranchVO placedAgentBranchVO:placedAgentBranchVOs)
                {
                    PlacedAgentVO writingPlacedAgentVO = placedAgentBranchVO.getPlacedAgentVO(placedAgentBranchVO.getPlacedAgentVOCount() - 1);
                    
                    ClientRole writingClientRole = ClientRole.findByPK(new Long(writingPlacedAgentVO.getClientRoleFK()));
                    
                    String referenceID = writingClientRole.getReferenceID();
                    
                    if (referenceID.equalsIgnoreCase(agentNumber))
                    {
                        filteredPlacedAgentsBranchVOs.add(placedAgentBranchVO);
                    }
                }
            
                placedAgentBranchVOs = filteredPlacedAgentsBranchVOs.toArray(new PlacedAgentBranchVO[filteredPlacedAgentsBranchVOs.size()]);
            }
            
            if (placedAgentBranchVOs != null)
            {
                appReqBlock.getHttpSession().setAttribute("placedAgentBranchVOs", placedAgentBranchVOs);
            }
            else
            {
                appReqBlock.getHttpServletRequest().setAttribute("agentMessage", "Selected Agent Not Available [Verify PlacedAgent?]");
            }
        }
        else
        {
            appReqBlock.getHttpServletRequest().setAttribute("agentMessage", "Writing Agent Not Found");
        }
        
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String newRiderBeanKey = contractMainSessionBean.getValue("newRiderBeanKey");

        if (newRiderBeanKey == null || newRiderBeanKey.equals("")) {
        	return AGENT_SELECTION_DIALOG;
        } else {
        	return CONTRACT_RIDER_AGENT_SELECTION_DIALOG;
        }
    }

    protected String showAgentHierarchyDialog(AppReqBlock appReqBlock) throws Exception
    {
        String selectedAgentHierarchyAllocationPK = appReqBlock.getFormBean().getValue("selectedAgentHierarchyAllocationPK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentHierarchyAllocationPK", selectedAgentHierarchyAllocationPK);

        return AGENT_HIERARCHY_DIALOG;
    }

    protected String showSelectedHierarchyRow(AppReqBlock appReqBlock) throws Exception
    {
        String contractCodeCT = Util.initString(appReqBlock.getReqParm("contractCodeCT"), null);

        String selectedAgentHierarchyAllocationPK = appReqBlock.getFormBean().getValue("selectedAgentHierarchyAllocationPK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentHierarchyAllocationPK", selectedAgentHierarchyAllocationPK);

        String selectedAgentSnapshotPK = appReqBlock.getFormBean().getValue("selectedAgentSnapshotPK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentSnapshotPK", selectedAgentSnapshotPK);

        UIAgentHierarchyVO[] uiAgentHierarchyVOs = (UIAgentHierarchyVO[]) appReqBlock.getHttpSession().getAttribute("uiAgentHierarchyVOs");

        for (int u = 0; u < uiAgentHierarchyVOs.length; u++)
        {
            AgentHierarchyVO agentHierarchyVO = uiAgentHierarchyVOs[u].getAgentHierarchyVO();

            AgentSnapshotVO[] agentSnapshotVOs = agentHierarchyVO.getAgentSnapshotVO();

            for (int s = 0; s < agentSnapshotVOs.length; s++)
            {
                if ((agentSnapshotVOs[s].getAgentSnapshotPK() + "").equals(selectedAgentSnapshotPK))
                {
//                    CommissionProfileVO commProfileVO = (CommissionProfileVO) agentSnapshotVOs[s].getParentVO(CommissionProfileVO.class);
                    List voInclusionList = new ArrayList();
                    agent.business.Agent agentComponent = new agent.component.AgentComponent();
                    CommissionProfileVO[] commissionProfileVOs = agentComponent.composeCommissionProfileVOByContractCodeCT(contractCodeCT, voInclusionList);

                    if (commissionProfileVOs != null)
                    {
                        appReqBlock.getHttpSession().setAttribute("commissionProfileVOs", commissionProfileVOs);
                    }
                }
            }
        }

        return AGENT_HIERARCHY_DIALOG;
    }

    protected String selectCommProfileForAgent(AppReqBlock appReqBlock) throws Exception
    {
        String selectedAgentHierarchyPK = appReqBlock.getFormBean().getValue("selectedAgentHierarchyPK");
        String selectedAgentSnapshotPK = appReqBlock.getFormBean().getValue("selectedAgentSnapshotPK");
        String selectedCommProfileFK = appReqBlock.getFormBean().getValue("selectedCommProfileFK");

        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentHierarchyPK", selectedAgentHierarchyPK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentSnapshotPK", selectedAgentSnapshotPK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedCommProfileFK", selectedCommProfileFK);

        return AGENT_HIERARCHY_DIALOG;
    }

    protected String saveAgentHierarchy(AppReqBlock appReqBlock) throws Exception
    {
        String selectedAgentHierarchyPK = appReqBlock.getFormBean().getValue("selectedAgentHierarchyPK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentHierarchyPK", selectedAgentHierarchyPK);

        String selectedAgentSnapshotPK = appReqBlock.getFormBean().getValue("selectedAgentSnapshotPK");
        String selectedCommProfileFK = appReqBlock.getFormBean().getValue("selectedCommProfileFK");

        CommissionProfileVO[] commProfileVOs = (CommissionProfileVO[]) appReqBlock.getHttpSession().getAttribute("commissionProfileVOs");
        UIAgentHierarchyVO[] uiAgentHierarchyVOs = (UIAgentHierarchyVO[]) appReqBlock.getHttpSession().getAttribute("uiAgentHierarchyVOs");

        for (int u = 0; u < uiAgentHierarchyVOs.length; u++)
        {
            AgentHierarchyVO agentHierarchyVO = uiAgentHierarchyVOs[u].getAgentHierarchyVO();
            AgentSnapshotVO[] agentSnapshotVOs = agentHierarchyVO.getAgentSnapshotVO();

            for (int s = 0; s < agentSnapshotVOs.length; s++)
            {
                if ((agentSnapshotVOs[s].getAgentSnapshotPK() + "").equals(selectedAgentSnapshotPK))
                {
                    for (int c = 0; c < commProfileVOs.length; c++)
                    {
                        if ((commProfileVOs[c].getCommissionProfilePK() + "").equals(selectedCommProfileFK))
                        {
                            agentSnapshotVOs[s].setParentVO(CommissionProfileVO.class, commProfileVOs[c]);

                            break;
                        }
                    }

                    break;
                }
            }
        }

        appReqBlock.getHttpSession().removeAttribute("commissionProfileVOs");

        return AGENT_HIERARCHY_DIALOG;
    }

    protected String closeAgentHierarchy(AppReqBlock appReqBlock) throws Exception
    {
        String selectedAgentHierarchyAllocationPK = appReqBlock.getFormBean().getValue("selectedAgentHierarchyAllocationPK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentHierarchyAllocationPK", selectedAgentHierarchyAllocationPK);

        appReqBlock.getHttpSession().removeAttribute("commissionProfileVOs");

        return CONTRACT_AGENT;
    }

    protected String showCommissionOverrides(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String selectedAgentHierarchyPK = formBean.getValue("selectedAgentHierarchyPK");
        String selectedAgentSnapshotPK = formBean.getValue("selectedAgentSnapshotPK");
        String selectedCommProfileFK = formBean.getValue("selectedCommProfileFK");

        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentHierarchyPK", selectedAgentHierarchyPK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentSnapshotPK", selectedAgentSnapshotPK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedCommProfileFK", selectedCommProfileFK);

        return COMMISSION_OVERRIDES_DIALOG;
    }

    protected String saveCommissionOverrides(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String selectedAgentHierarchyPK = formBean.getValue("selectedAgentHierarchyPK");
        String selectedAgentSnapshotPK = formBean.getValue("selectedAgentSnapshotPK");
        String selectedCommProfileFK = Util.initString(formBean.getValue("selectedCommProfileFK"),null);
        String servicingAgentIndicator = formBean.getValue("servicingAgentIndicator");
        String advancePercent = Util.initString(appReqBlock.getFormBean().getValue("advancePercent"), "0.0");
        String recoveryPercent = Util.initString(appReqBlock.getFormBean().getValue("recoveryPercent"), "0.0");

        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentHierarchyPK", selectedAgentHierarchyPK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentSnapshotPK", selectedAgentSnapshotPK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedCommProfileFK", selectedCommProfileFK);

        AgentHierarchyVO[] agentHierarchyVOs = new UtilitiesForTran().getUniqueAgentHierarchyVOsFromUIObjects(appReqBlock);

        for (int i = 0; i < agentHierarchyVOs.length; i++)
        {
            AgentHierarchyVO agentHierarchyVO = agentHierarchyVOs[i];

            AgentSnapshotVO[] agentSnapshotVOs = agentHierarchyVO.getAgentSnapshotVO();

            for (int s = 0; s < agentSnapshotVOs.length; s++)
            {
                if ((agentSnapshotVOs[s].getAgentSnapshotPK() + "").equals(selectedAgentSnapshotPK))
                {
                    agentSnapshotVOs[s].setServicingAgentIndicator(servicingAgentIndicator);
                    agentSnapshotVOs[s].setAdvancePercent(new EDITBigDecimal(advancePercent).getBigDecimal());
                    agentSnapshotVOs[s].setRecoveryPercent(new EDITBigDecimal(recoveryPercent).getBigDecimal());
                    break;
                        }
                    }
                    }

        appReqBlock.getHttpSession().setAttribute("tempUIAgentHierarchyVOs", agentHierarchyVOs);

        return CONTRACT_AGENT;
    }

    /**
     * Resets the commission percent and amount fields back to zero for the targeted AgentSnapshot.
     * @param appReqBlock
     * @return
     */
    protected String deleteCommissionOverrides(AppReqBlock appReqBlock)
    {
        PageBean formBean = appReqBlock.getFormBean();

        String selectedAgentHierarchyPK = formBean.getValue("selectedAgentHierarchyPK");
        String selectedAgentSnapshotPK = formBean.getValue("selectedAgentSnapshotPK");
        String selectedCommProfileFK = formBean.getValue("selectedCommProfileFK");

        AgentHierarchyVO[] agentHierarchyVOs = new UtilitiesForTran().getUniqueAgentHierarchyVOsFromUIObjects(appReqBlock);

        for (int i = 0; i < agentHierarchyVOs.length; i++)
        {
            AgentHierarchyVO agentHierarchyVO = agentHierarchyVOs[i];

            AgentSnapshotVO[] agentSnapshotVOs = agentHierarchyVO.getAgentSnapshotVO();

            for (int j = 0; j < agentSnapshotVOs.length; j++)
            {
                if ((agentSnapshotVOs[j].getAgentSnapshotPK() + "").equals(selectedAgentSnapshotPK))
                {
                    agentSnapshotVOs[j].setServicingAgentIndicator("N");
                }
            }
        }

        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentHierarchyPK", selectedAgentHierarchyPK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentSnapshotPK", selectedAgentSnapshotPK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedCommProfileFK", selectedCommProfileFK);

        return CONTRACT_AGENT;
    }

    protected String cancelCommissionOverrides(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String selectedAgentHierarchyPK = formBean.getValue("selectedAgentHierarchyPK");
        String selectedAgentSnapshotPK = formBean.getValue("selectedAgentSnapshotPK");
        String selectedCommProfileFK = formBean.getValue("selectedCommProfileFK");

        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentHierarchyPK", selectedAgentHierarchyPK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedAgentSnapshotPK", selectedAgentSnapshotPK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedCommProfileFK", selectedCommProfileFK);

        return AGENT_HIERARCHY_DIALOG;
    }

    protected String showContractHistory(AppReqBlock appReqBlock) throws Exception
    {
        EDITServicesConfig editServicesConfig = ServicesConfig.getEditServicesConfig();
        String contractHistoryDisplay = editServicesConfig.getContractHistoryDisplay();

        if (contractHistoryDisplay != null && contractHistoryDisplay.equalsIgnoreCase("Y"))
        {
            PageBean formBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("historyFormBean");

            PageBean contractMain = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
            String optionId = contractMain.getValue("optionId");
            String segmentPK = contractMain.getValue("segmentPK");

            String key = formBean.getValue("key");
            String historyType = "";

            if (!key.equals(""))
            {
                historyType = key.substring(0, 2);
            }

            contract.business.Lookup contractLookup = new contract.component.LookupComponent();
            List voInclusionList = new ArrayList();
            voInclusionList.add(LifeVO.class);
            voInclusionList.add(PayoutVO.class);
            voInclusionList.add(InvestmentVO.class);
            voInclusionList.add(InvestmentAllocationVO.class);
            voInclusionList.add(ContractClientVO.class);

            if (!segmentPK.equals(""))
            {
                SegmentVO segmentVO = contractLookup.composeSegmentVO(Long.parseLong(segmentPK), voInclusionList);

                ChangeHistoryVO[] changeHistoryVOs = contractLookup.getChangeHistoryForContract(segmentVO);

                if (changeHistoryVOs != null)
                {
                    loadChangeHistory(appReqBlock, changeHistoryVOs, segmentVO, optionId);
                }

                loadHistory(appReqBlock, segmentVO);
            }

            new ContractHistorySummaryTableModel(appReqBlock);

            if (historyType.equals("ch"))
            {
                return CONTRACT_HISTORY;
            }
            else if (historyType.equals("fh"))
            {
                return CONTRACT_FH_HISTORY;
            }
            else if (historyType.equals("dh"))
            {
                return CONTRACT_DH_HISTORY;
            }
            else if (historyType.equals("ye"))
            {
                return CONTRACT_YE_HISTORY;
            }
            else
            {
                return CONTRACT_HISTORY;
            }
        }
        else
        {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");

        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

            new ContractHistorySummaryTableModel(appReqBlock);

        return CONTRACT_HISTORY;
    }
    }

    protected String saveContractDetail(AppReqBlock appReqBlock) throws Exception
    {
        new InforceUseCaseComponent().updateInforceContract();

        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");

        String currentPage = stateBean.getValue("currentPage");

        if (currentPage.equals(""))
        {
            currentPage = stateBean.getValue("previousPage");
        }

        savePreviousPageFormBean(appReqBlock, currentPage);

        return CONTRACT_NUMBER_DIALOG;
    }

    protected String saveBaseRider(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        FormBean formBean = appReqBlock.getFormBean();
        saveMainPageFields(formBean, codeTableWrapper);

        String optionId = formBean.getValue("optionId");

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("formBean", formBean);

        String productType = checkProductType(optionId);
        String mainReturnPage = getMainReturnPage(productType);

        return mainReturnPage;
        }

    protected String saveRelationshipCoverage(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        CodeTableVO[] relationshipCTVO = codeTableWrapper.getCodeTableEntries("LIFERELATIONTYPE");
        CodeTableVO[] optionCodes = codeTableWrapper.getCodeTableEntries("OPTIONCODE");

        PageBean formBean = appReqBlock.getFormBean();

        String optionId = formBean.getValue("optionId");
        String relationship = formBean.getValue("relationship");

        String returnPage = null;

        int i = 0;

        for (i = 0; i < optionCodes.length; i++)
        {
            if ((optionCodes[i].getCodeTablePK() + "").equals(optionId))
            {
                optionId = optionCodes[i].getCode();
                formBean.putValue("optionId", optionId);

                break;
            }
        }

        for (i = 0; i < relationshipCTVO.length; i++)
        {
            if ((relationshipCTVO[i].getCodeTablePK() + "").equals(relationship))
            {
                relationship = relationshipCTVO[i].getCode();
                formBean.putValue("relationship", relationship);

                break;
            }
        }

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("clientFormBean", formBean);

        if (relationship.equalsIgnoreCase("pay"))
        {
            returnPage = CONTRACT_PAYEE;
        }
        else
        {
            if (relationship.equalsIgnoreCase("insured"))
            {
                returnPage = CONTRACT_INSURED;
            }
            else
            {
                returnPage = CONTRACT_NON_PAYEE;
            }
        }

        return returnPage;
    }

    protected String deleteContract(AppReqBlock appReqBlock) throws Exception
    {
        String contractNumber = appReqBlock.getSessionBean("contractStateBean").getValue("contractNumber");

        Contract contractComp = new contract.component.ContractComponent();
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();

        if (!contractNumber.equals(""))
        {
            SegmentVO[] segmentVO = contractLookup.getSegmentByContractNumber(contractNumber, true, new ArrayList());

            contractComp.deleteSegment(segmentVO[0]);
        }

        clearAllContractSessions(appReqBlock);

        return CONTRACT_MAIN;
    }

    protected String deleteSelectedClient(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        CodeTableVO[] optionCodes = codeTableWrapper.getCodeTableEntries("OPTIONCODE");
        CodeTableVO[] relationshipCodes = codeTableWrapper.getCodeTableEntries("LIFERELATIONTYPE");

        String selectedClientId = appReqBlock.getFormBean().getValue("selectedClientId");
        String selectedOptionId = appReqBlock.getFormBean().getValue("selectedOptionId");
        String selectedRelationship = appReqBlock.getFormBean().getValue("selectedRelationship");
        String selectedClientRoleFK = appReqBlock.getFormBean().getValue("selectedClientRoleFK");
        String selectedDisbursement = appReqBlock.getFormBean().getValue("selectedDisbursementSource");
        String riderNumber = Util.initString(appReqBlock.getFormBean().getValue("selectedRiderNumber"), "0");

        String optionIdCT = "";

        for (int i = 0; i < optionCodes.length; i++)
        {
            if (optionCodes[i].getCode().equalsIgnoreCase(selectedOptionId))
            {
                optionIdCT = optionCodes[i].getCodeTablePK() + "";
                i = optionCodes.length;
            }
        }

        String relationshipIdCT = "";

        for (int i = 0; i < relationshipCodes.length; i++)
        {
            if (relationshipCodes[i].getCode().equalsIgnoreCase(selectedRelationship))
            {
                relationshipIdCT = relationshipCodes[i].getCodeTablePK() + "";
                i = relationshipCodes.length;
            }
        }

        appReqBlock.getSessionBean("contractClients").removePageBean(selectedClientId + riderNumber  + optionIdCT + selectedRelationship + selectedClientRoleFK + selectedDisbursement);

        PageBean pageBean = appReqBlock.getSessionBean("contractClients").getPageBean(selectedClientId + riderNumber + optionIdCT + selectedRelationship + selectedClientRoleFK + selectedDisbursement);

        String[] relationships = pageBean.getValues("relationships");
        String[] optionIds = pageBean.getValues("optionIds");

        PageBean contractMainFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");

        String ownerId = contractMainFormBean.getValue("ownerId");
        String jointOwnerId = contractMainFormBean.getValue("jointOwnerId");
        String ownerRelationship = "OWN";
        String ownerOptionId = contractMainFormBean.getValue("optionId");

        if (selectedClientId.equals(ownerId) && selectedRelationship.equals(ownerRelationship) && selectedOptionId.equals(ownerOptionId))
        {
            appReqBlock.getHttpServletRequest().setAttribute("deletionWarning", "true");
        }
        else
        {
            for (int i = 0; i < relationships.length; i++)
            {
                String relationship = relationships[i];
                String optionId = optionIds[i];

                if (relationshipIdCT.equals(relationship) && optionIdCT.equals(optionId))
                {
                    pageBean.removeFromValues("relationships", i);
                    pageBean.removeFromValues("optionIds", i);

                    if (pageBean.getValues("relationships").length == 0)
                    {
                        appReqBlock.getSessionBean("contractClients").removePageBean(selectedClientId + riderNumber  + optionIdCT + selectedRelationship + selectedClientRoleFK + selectedDisbursement);
                    }
                }
            }

            PageBean formBean = appReqBlock.getSessionBean("contractClients").getPageBean(ownerId);

            for (int i = 0; i < relationshipCodes.length; i++)
            {
                if (relationshipCodes[i].getCodeDesc().equalsIgnoreCase("owner"))
                {
                    formBean.putValue("relationship", relationshipCodes[i].getCodeTablePK() + "");
                    i = relationshipCodes.length;
                }
            }

            formBean.putValue("optionId", ownerOptionId);

            appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("clientFormBean", formBean);
        }

        if (selectedClientId.equals(jointOwnerId) && selectedRelationship.equals("annuitantOwner") && selectedOptionId.equals(ownerOptionId))
        {
            appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").removeValue("jointOwnerId");
        }

        return CONTRACT_NON_PAYEE;
    }

    /**
     * "Deletes" a selected AgentHierarchyAllocation from the summary.  An allocation can not be truly deleted, it
     * becomes history (inactivated).  The stop date is changed to 1 day prior to the start date to make it inactive.
     * <P>
     * Hoaky UI stuff: if the allocation was recently added to the allocation page but has not been "saved" yet (i.e.
     * the user has not hit the Save button on the allocation page), the allocation should be able to be deleted without
     * it becoming history (basically, the user made a mistake).  These types of allocation will have negative pks.
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    protected String deleteSelectedAllocation(AppReqBlock appReqBlock) throws Exception
    {
        UIAgentHierarchyVO[] tempUIAgentHierarchyVOs = (UIAgentHierarchyVO[]) appReqBlock.getHttpSession().getAttribute("tempUIAgentHierarchyVOs");

        String selectedAgentHierarchyAllocationPK = appReqBlock.getFormBean().getValue("selectedAgentHierarchyAllocationPK");

        String startDateString = appReqBlock.getFormBean().getValue("startDate");

            List hierarchyVector = new ArrayList();

        for (int i = 0; i < tempUIAgentHierarchyVOs.length; i++)
        {
            AgentHierarchyAllocationVO agentHierarchyAllocationVO = tempUIAgentHierarchyVOs[i].getAgentHierarchyAllocationVO();

            String agentHierarchyAllocationPK = agentHierarchyAllocationVO.getAgentHierarchyAllocationPK() + "";

            Long pkLong = new Long(agentHierarchyAllocationPK);

            if (agentHierarchyAllocationPK.equals(selectedAgentHierarchyAllocationPK))
            {
                if (pkLong.longValue() >= 0)
                {
                    //  It is NOT a negative pk, inactivate the allocation and add it to the vector (negative ones get
                    //  deleted by not getting put back in the list of allocations used by the page)
                    new UtilitiesForTran().inactivateAgentHierarchyAllocation(agentHierarchyAllocationVO, startDateString);

                    hierarchyVector.add(tempUIAgentHierarchyVOs[i]);
	            }
	        }
	        else
	        {
                hierarchyVector.add(tempUIAgentHierarchyVOs[i]);
            }
        }

        UIAgentHierarchyVO[] newUIAgentHierarchyVOs = (UIAgentHierarchyVO[]) hierarchyVector.toArray(new UIAgentHierarchyVO[hierarchyVector.size()]);
        appReqBlock.getHttpSession().setAttribute("tempUIAgentHierarchyVOs", newUIAgentHierarchyVOs);

        appReqBlock.getHttpServletRequest().setAttribute("startDate", startDateString);
        appReqBlock.getHttpServletRequest().setAttribute("shouldLockStartDate", "true");  // lock the start date from further changes
        
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String newRiderBeanKey = contractMainSessionBean.getValue("newRiderBeanKey");

        if (newRiderBeanKey == null || newRiderBeanKey.equals("")) {
            return AGENT_HIERARCHY_ALLOCATION_DIALOG;
        } else {
        	return CONTRACT_AGENT_HIERARCHY_ALLOCATION_DIALOG;
        }
    }

    protected String deleteSelectedFund(AppReqBlock appReqBlock) throws Exception
    {
//        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

//        CodeTableVO[] optionCodes = codeTableWrapper.getCodeTableEntries("OPTIONCODE");

        String selectedFundId = appReqBlock.getFormBean().getValue("selectedFundId");
        String selectedOptionId = appReqBlock.getFormBean().getValue("selectedOptionId");
        String investmentPK = appReqBlock.getFormBean().getValue("investmentPK");

        boolean moneyOnFund = false;
        boolean shouldBeDeleted = true;
        boolean pendingTrxFound = false;

//        UserSession userSession = appReqBlock.getUserSession();

        if (Util.isANumber(investmentPK))
        {
            Investment investment = Investment.findByPK(new Long(investmentPK));
            if (investment != null)
            {
                EDITBigDecimal fundAmount = new EDITBigDecimal();
                EDITBigDecimal fundUnits = new EDITBigDecimal();
                Set buckets = investment.getBuckets();
                Iterator it = buckets.iterator();
                while (it.hasNext())
                {
                    Bucket bucket = (Bucket) it.next();
                    fundAmount = fundAmount.addEditBigDecimal(bucket.getCumDollars());
                    fundUnits = fundUnits.addEditBigDecimal(bucket.getCumUnits());
                }

                if (fundAmount.isGT(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR) ||
                    fundUnits.isGT(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
                {
                    moneyOnFund = true;
                }
            }

            InvestmentHistory[] investmentHistory = InvestmentHistory.findByInvestmentFK(new Long(investmentPK));
            if (investmentHistory != null)
            {
                shouldBeDeleted = false;
            }

            InvestmentAllocationOverride[] invAllocOverride = InvestmentAllocationOverride.findByInvestmentFK(new Long(investmentPK));
            if (invAllocOverride != null)
            {
                pendingTrxFound = true;
            }
        }

//        String optionIdCT = "";

//        for (int i = 0; i < optionCodes.length; i++)
//        {
//            if (optionCodes[i].getCode().equalsIgnoreCase(selectedOptionId))
//            {
//                optionIdCT = optionCodes[i].getCodeTablePK() + "";
//                i = optionCodes.length;
//            }
//        }

        String key = selectedOptionId + selectedFundId;

        SessionBean funds = appReqBlock.getSessionBean("contractFunds");

        if (shouldBeDeleted && !pendingTrxFound && !moneyOnFund)
        {
            funds.removePageBean(key);
        }
        else if (pendingTrxFound)
        {
            appReqBlock.getHttpServletRequest().setAttribute("investmentMessage", "Investment Cannot Be Deleted - Transaction Pending");
        }
        else if (moneyOnFund)
        {
            appReqBlock.getHttpServletRequest().setAttribute("investmentMessage", "Investment Cannot Be Deleted - Money Found");
        }
        else
        {
            funds.getPageBean(key).putValue("status", "D");
        }

        PageBean formBean = new PageBean();

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("investmentFormBean", formBean);

        return CONTRACT_INVESTMENTS;
    }

    protected String deleteSelectedRider(AppReqBlock appReqBlock) throws Exception
    {
        String optionCodePK = appReqBlock.getFormBean().getValue("optionCodePK");

        String optionCode = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(optionCodePK)).getCode();
        String riderNumber = appReqBlock.getFormBean().getValue("riderNumber");

        String key =  riderNumber + "_" + optionCode;

        SessionBean riders = appReqBlock.getSessionBean("contractRiders");

        SessionBean deletedRiders = appReqBlock.getSessionBean("contractDeletedRiders");
        
        if (deletedRiders == null)
        {
            deletedRiders = new SessionBean();
            appReqBlock.addSessionBean("contractDeletedRiders", deletedRiders);
        }
        
        PageBean riderPageBean = riders.getPageBean(key);

        riders.removePageBean(key);
        deletedRiders.putPageBean(key, riderPageBean);

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("riderFormBean", new PageBean());

        return CONTRACT_RIDERS;
    }

    protected String saveRider(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        PageBean contractMainFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        SessionBean riders = appReqBlock.getSessionBean("contractRiders");
        PageBean formBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("riderFormBean");

        String riderSegmentPK = "0"; // New rider

        if (!appReqBlock.getReqParm("optionCodePK").equals(""))
        {
            //  Existing rider
            riderSegmentPK = formBean.getValue("riderSegmentPK"); // this variable is not in the page, just in the bean
        }

        String segmentNamePK = appReqBlock.getReqParm("selectedPullDownSegmentNamePK");
        String segmentName = codeTableWrapper.getCodeTableEntry(Long.parseLong(segmentNamePK)).getCode();
        String optionCodePK = appReqBlock.getReqParm("optionCodePK");
        String optionCode = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionCodePK)).getCode();
        String units                = appReqBlock.getReqParm("units");
        String unitsChangeEffectiveDate = appReqBlock.getReqParm("unitsChangeEffectiveDate");
        String commissionPhaseID    = appReqBlock.getReqParm("commissionPhaseID");
        String commissionPhaseOverride = appReqBlock.getReqParm("commissionhaseOverride");
        String authorizedSignatureCT = appReqBlock.getReqParm("authorizedSignatureCT");

        if (Util.isANumber("authorizedSignatureCT"))
        {
            authorizedSignatureCT = codeTableWrapper.getCodeTableEntry(Long.parseLong(authorizedSignatureCT)).getCode();
        }
        else
        {
            authorizedSignatureCT = "";
        }

        if (segmentName.equalsIgnoreCase("Waiver") && !optionCode.equalsIgnoreCase("NursingHomeWaiver"))
        {
            appReqBlock.getHttpServletRequest().setAttribute("riderMessage", "Invalid Coverage For Rider Type");
            appReqBlock.getHttpServletRequest().setAttribute("errorRiderType", segmentNamePK);
            appReqBlock.getHttpServletRequest().setAttribute("errorCoverage", optionCodePK);
        }
        else
        {
            String effectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(appReqBlock.getReqParm("effectiveDate"));

            String maturityDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(appReqBlock.getReqParm("terminateDate"));

            if (maturityDate == null)
            {
                maturityDate = EDITDate.DEFAULT_MAX_DATE;
            }

            String riderNumber = "";
            int totalRiders = Integer.parseInt(contractMainFormBean.getValue("totalRiders"));

            if (riderSegmentPK.equals("0"))//new rider
            {
                riderNumber          = (totalRiders + 1) + "";
            }
            else
            {
                riderNumber          = appReqBlock.getReqParm("riderNumber");
            }

            String key = riderNumber + "_" + optionCode;

            PageBean riderBean = null;

            if (!riders.pageBeanExists(key))
            {
                riderBean = new PageBean();
            }
            else
            {
                riderBean = riders.getPageBean(key);
            }

            riderBean.putValue("segmentNamePK", segmentNamePK);
            riderBean.putValue("optionCodePK", optionCodePK);
            riderBean.putValue("effectiveDate", effectiveDate);
            riderBean.putValue("terminateDate", maturityDate);
            riderBean.putValue("riderSegmentPK", riderSegmentPK);
            riderBean.putValue("units", units);
            riderBean.putValue("unitsChangeEffectiveDate", unitsChangeEffectiveDate);
            riderBean.putValue("commissionPhaseID", commissionPhaseID);
            riderBean.putValue("commissionPhaseOverride", commissionPhaseOverride);
            riderBean.putValue("authorizedSignatureCT", authorizedSignatureCT);
            riderBean.putValue ("riderNumber", riderNumber);

            riders.putPageBean(key, riderBean);

            appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("riderFormBean", riderBean);
        }

        return CONTRACT_RIDERS;
    }

    protected String cancelContract(AppReqBlock appReqBlock) throws Exception
    {
        clearAllContractSessions(appReqBlock);

        UserSession userSession = appReqBlock.getUserSession();

        userSession.unlockSegment();

        appReqBlock.getFormBean().putValue("segmentPK", String.valueOf(userSession.getSegmentPK()));
        
        return loadContract(appReqBlock);
    }

//    protected String showClientQuickAddDialog(AppReqBlock appReqBlock) throws Exception
//    {
//        PageBean formBean = appReqBlock.getFormBean();
//
//        String clientId = formBean.getValue("clientId");
//        String optionId = formBean.getValue("optionId");
//        String relationship = formBean.getValue("relationship");
//        String overrideInd = formBean.getValue("overrideInd");
//
//        appReqBlock.getHttpServletRequest().setAttribute("clientId", clientId);
//        appReqBlock.getHttpServletRequest().setAttribute("optionId", optionId);
//        appReqBlock.getHttpServletRequest().setAttribute("relationship", relationship);
//        appReqBlock.getHttpServletRequest().setAttribute("overrideInd", overrideInd);
//
//        return CONTRACT_CLIENT_INFO_DIALOG;
//    }

    protected String showFinancialValues(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        PageBean formBean = contractMainSessionBean.getPageBean("formBean");
        String optionId = formBean.getValue("optionId");

        String productType = checkProductType(optionId);

        if (productType.equalsIgnoreCase(TRADITIONAL) || productType.equalsIgnoreCase(AH))
        {
            return CONTRACT_TRAD_FINANCIAL_VALUE_DIALOG;
        }
        else if (optionId.equals(UNIVERSAL_LIFE))
        {
        	return CONTRACT_UNIVERSAL_LIFE_FINANCIAL_VALUE_DIALOG;
        }
        else
        {
            return CONTRACT_FINANCIAL_VALUE_DIALOG;
        }
    }

    /**
     * Shows the PUA dialog which displays InherentRider information.  This can be called from the main page or the
     * rider page.  If it's from the main, use the base segment as the segmentFK for the InherentRider.  If it's from
     * the rider, use the rider segment as the segmentFK.  The only way we know what page it came from is to look
     * at the hidden fields.  If the riderSegmentPK was set in the hidden field, it is a rider page.
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    protected String showPUADialog(AppReqBlock appReqBlock) throws Exception
   {
       PageBean formBean = appReqBlock.getFormBean();

       String baseSegmentPK = formBean.getValue("segmentPK");
       String riderSegmentPK = formBean.getValue("riderSegmentPK");

       String segmentFKString = null;

       if (riderSegmentPK == null || riderSegmentPK.equals(""))
       {
           //   Use the base segment
           segmentFKString = baseSegmentPK;
       }
       else
       {
           //   Use the rider segment
           segmentFKString = riderSegmentPK;
       }

       Long segmentFK = new Long(segmentFKString);

       InherentRider[] inherentRiders = InherentRider.findBySegmentFK(segmentFK);

       appReqBlock.getHttpServletRequest().setAttribute("inherentRiders", inherentRiders);

       return CONTRACT_PUA_DIALOG;
   }

    protected String showDateValues(AppReqBlock appReqBlock) throws Exception
    {
        //        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        //        PageBean formBean       = contractMainSessionBean.getPageBean("formBean");
        //        formBean.putValue("terminateMonth", formBean.getValue("terminateMonth"));
        //        formBean.putValue("terminateDay", formBean.getValue("terminateDay"));
        //        formBean.putValue("terminateYear", formBean.getValue("terminateYear"));
        //        contractMainSessionBean.putPageBean("formBean", formBean);
        return CONTRACT_DATE_VALUE_DIALOG;
    }

    protected String showAccumulationDialog(AppReqBlock appReqBlock) throws Exception
    {
        return CONTRACT_ACCUMULATION_DIALOG;
    }

    protected String showContractClientAddDialog(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractClientAddSessionBean = appReqBlock.getSessionBean("contractClientAddSessionBean");

        contractClientAddSessionBean.clearState();

        return CONTRACT_CLIENT_ADD_DIALOG;
    }

    //This method should be invoked Payee and Non Payee
    protected String showClientDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        PageBean formBean = appReqBlock.getFormBean();
        String taxId = formBean.getValue("selectedTaxId");
        String optionId = formBean.getValue("selectedOptionId");
        String relationship = formBean.getValue("selectedRelationship");
        String clientRoleFK = formBean.getValue("selectedClientRoleFK");
        String contractClientPK = formBean.getValue("selectedContractClientPK");
        String riderNumber = Util.initString(formBean.getValue("selectedRiderNumber"), "0");

        String clientKey = taxId + riderNumber + optionId + relationship + clientRoleFK + contractClientPK;

        //This paramter will be used to link the contractClient selected to show client detail
        appReqBlock.getUserSession().setParameter("selectedClientRoleFK", clientRoleFK);

        SessionBean clients = (SessionBean) appReqBlock.getSessionBean("contractClients");
        PageBean clientBean = clients.getPageBean(clientKey);
        clientBean.putValue("optionId", optionId);
        clientBean.putValue("relationshipInd", relationship);
        clientBean.putValue("allocationPercent", "");
        clientBean.putValue("splitEqualInd", "N");
        clientBean.putValue("contractClientAllocationPK", "");
        clientBean.putValue("allocationDollar", "");

        String[] allocPcnts = clientBean.getValues("allocationPercents");
        String[] ccAllocPKs = clientBean.getValues("contractClientAllocationPKs");
        String[] ccAllocOverrideStatuses = clientBean.getValues("ccAllocOverrideStatuses");
        String[] splitEquals = clientBean.getValues("splitEquals");
        String[] allocationAmounts = clientBean.getValues("allocationDollars");

        for (int s = 0; s < ccAllocOverrideStatuses.length; s++)
        {
            String status = ccAllocOverrideStatuses[s];

            if (status.equalsIgnoreCase("P"))
            {
                clientBean.putValue("allocationPercent", allocPcnts[s]);
                clientBean.putValue("contractClientAllocationPK", ccAllocPKs[s]);
                clientBean.putValue("splitEqualInd", splitEquals[s]);
                clientBean.putValue("allocationDollar", allocationAmounts[s]);

                break;
            }
        }

        clientBean.putValue("riderNumber", riderNumber);
        stateBean.putValue("previousPage", stateBean.getValue("currentPage"));

        String currentPage = stateBean.getValue("currentPage");

        // Saves formBean in the appropriate SessionBean
        savePreviousPageFormBean(appReqBlock, currentPage);

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("clientFormBean", clientBean);

        if (relationship.equalsIgnoreCase("TermInsured"))
        {
            PageBean baseFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");

            String batchContractSetupFK = Util.initString(baseFormBean.getValue("batchContractSetupFK"), "0");
            getCaseUnderwritingForClient(appReqBlock, batchContractSetupFK);
        }

        if (relationship.equalsIgnoreCase("pay"))
        {
            return CONTRACT_PAYEE;
        }
        else
        {
            if (relationship.equalsIgnoreCase("insured") ||
                relationship.equalsIgnoreCase("terminsured"))
            {
                return CONTRACT_INSURED;
            }
            else
            {
                return CONTRACT_NON_PAYEE;
            }
        }
    }

    /**
     * Get the history record for the selection made in the summary
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    protected String showHistoryDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        String key = appReqBlock.getReqParm("selectedRowIds_ContractHistorySummaryTableModel");
        String historyType = HistoryFilterRow.getClassNameFromKey(key);
        Long historyPK = HistoryFilterRow.getPKFromKey(key);

        appReqBlock.getHttpServletRequest().setAttribute("shouldShowLockAlert", "true");

        new ContractHistorySummaryTableModel(appReqBlock);

        if (historyType.equalsIgnoreCase("ChangeHistory"))
        {
            ChangeHistory changeHistory = ChangeHistory.findByPK(historyPK);
            loadChangeHistory(appReqBlock, changeHistory);

            SessionHelper.evict(changeHistory, SessionHelper.EDITSOLUTIONS);
            return CONTRACT_HISTORY;
        }
        else
        {
            EDITTrxHistory editTrxHistory = EDITTrxHistory.findByPK(historyPK);
            String id = loadHistory(appReqBlock, editTrxHistory);

            SessionHelper.evict(editTrxHistory, SessionHelper.EDITSOLUTIONS);

            if (id.equals("dh"))
            {
                return CONTRACT_DH_HISTORY;
            }
            else if (id.equals("ye"))
            {
                return CONTRACT_YE_HISTORY;
            }
            else
            {
                return CONTRACT_FH_HISTORY;
            }
        }
    }

    protected String showTransactionDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        SessionBean contractInvestmentOverrides = appReqBlock.getSessionBean("contractInvestmentOverrides");
        contractInvestmentOverrides.clearState();

        SessionBean contractPayeeOverrides = appReqBlock.getSessionBean("contractPayeeOverrides");
        contractPayeeOverrides.clearState();

        SessionBean contractChargeOverrides = appReqBlock.getSessionBean("contractChargeOverrides");
        contractChargeOverrides.clearState();

        appReqBlock.getHttpSession().removeAttribute("trxDepositsVOs");

        String scrollingTrxPageSize = appReqBlock.getFormBean().getValue("scrollingTrxPageSize");
        appReqBlock.getHttpServletRequest().setAttribute("scrollingTrxPageSize", scrollingTrxPageSize);

        String beginScrollingTrxPK = (String) appReqBlock.getFormBean().getValue("beginScrollingTrxPK");

        if ((beginScrollingTrxPK == null) || beginScrollingTrxPK.equals(""))
        {
            beginScrollingTrxPK = "0";
        }

        appReqBlock.getHttpServletRequest().setAttribute("beginScrollingTrxPK", beginScrollingTrxPK);

        String endScrollingTrxPK = (String) appReqBlock.getFormBean().getValue("endScrollingTrxPK");

        if ((endScrollingTrxPK == null) || endScrollingTrxPK.equals(""))
        {
            endScrollingTrxPK = "0";
        }

        appReqBlock.getHttpServletRequest().setAttribute("endScrollingTrxPK", endScrollingTrxPK);

        FormBean formBean = appReqBlock.getFormBean();

        String key = formBean.getValue("key");

        long editTrxPK = Long.parseLong(key);

        Event eventComponent = new EventComponent();
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();
        engine.business.Lookup engineLookup = new engine.component.LookupComponent();
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        ProductStructureVO[] productStructureVOs = engineLookup.getProductStructuresByTypeCode("Product");

        Map productStructures = new HashMap();

        for (int j = 0; j < productStructureVOs.length; j++)
        {
            String productStructureId = productStructureVOs[j].getProductStructurePK() + "";
            productStructures.put(productStructureId, productStructureVOs[j]);
        }

        List voInclusionList = new ArrayList();
        voInclusionList.add(ScheduledEventVO.class);
        voInclusionList.add(ChargeVO.class);
        voInclusionList.add(OutSuspenseVO.class);
        voInclusionList.add(SuspenseVO.class);
        voInclusionList.add(ContractSetupVO.class);
        voInclusionList.add(InvestmentAllocationOverrideVO.class);
        voInclusionList.add(ClientSetupVO.class);
        voInclusionList.add(WithholdingOverrideVO.class);
        voInclusionList.add(ContractClientAllocationOvrdVO.class);
        voInclusionList.add(EDITTrxVO.class);
        voInclusionList.add(EDITTrxCorrespondenceVO.class);

        GroupSetupVO groupSetupVO = eventComponent.composeGroupSetupVOByEDITTrxPK(editTrxPK, voInclusionList);
        ContractSetupVO[] contractSetupVO = groupSetupVO.getContractSetupVO();
        ClientSetupVO[] clientSetupVO = contractSetupVO[0].getClientSetupVO();
        EDITTrxVO[] editTrxVO = clientSetupVO[0].getEDITTrxVO();
        ScheduledEventVO[] scheduledEventVO = groupSetupVO.getScheduledEventVO();

        PageBean transactionBean = new PageBean();

        long segmentFK = contractSetupVO[0].getSegmentFK();

        List voExclusionVector = new ArrayList();
        voExclusionVector.add(PayoutVO.class);
        voExclusionVector.add(NoteReminderVO.class);

        //        voExclusionVector.add(ChangeHistoryVO.class);
        SegmentVO[] segmentVO = contractLookup.getSegmentBySegmentPK(segmentFK, false, voExclusionVector);

        String groupSetupPK = groupSetupVO.getGroupSetupPK() + "";
        String contractSetupPK = contractSetupVO[0].getContractSetupPK() + "";
        String clientSetupPK = clientSetupVO[0].getClientSetupPK() + "";
        String contractClientFK = clientSetupVO[0].getContractClientFK() + "";
        String clientRoleFK = clientSetupVO[0].getClientRoleFK() + "";
        String contractId = segmentVO[0].getContractNumber();
        String trxTypeCode = editTrxVO[0].getTransactionTypeCT();
        String transactionType = codeTableWrapper.getCodeDescByCodeTableNameAndCode("TRXTYPE", trxTypeCode, segmentVO[0].getProductStructureFK());

        String effectiveDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(editTrxVO[0].getEffectiveDate());

        String sequenceNumber = editTrxVO[0].getSequenceNumber() + "";
        String status = editTrxVO[0].getStatus();
        String pendingStatus = editTrxVO[0].getPendingStatus();
        String amount = Util.formatDecimal("########0.00", contractSetupVO[0].getPolicyAmount());
        String percent = Util.formatDecimal("0.0##", editTrxVO[0].getTrxPercent());
        String amountReceived = Util.formatDecimal("########0.00", contractSetupVO[0].getAmountReceived());
        String complexChangeType = Util.initString(contractSetupVO[0].getComplexChangeTypeCT(), "");
        String complexChangeValue = Util.initString(contractSetupVO[0].getComplexChangeNewValue(), "");
        String suppressDecreaseFaceInd = Util.initString(contractSetupVO[0].getSuppressDecreaseFaceInd(), "unchecked");

        if (suppressDecreaseFaceInd.equalsIgnoreCase("Y"))
        {
            suppressDecreaseFaceInd = "checked";
        }

        String grossNetInd = groupSetupVO.getGrossNetStatusCT();
        String memoCode = groupSetupVO.getMemoCode();
        String premiumType = groupSetupVO.getPremiumTypeCT();
        String taxYear = editTrxVO[0].getTaxYear() + "";
        String costBasis = Util.formatDecimal("########0.00", contractSetupVO[0].getCostBasis());
        String distributionCode = groupSetupVO.getDistributionCodeCT();
        String trxIsRescheduledInd = editTrxVO[0].getTrxIsRescheduledInd() + "";
        String reapplyEDITTrxFK = editTrxVO[0].getReapplyEDITTrxFK() + "";
        String lookBackInd = editTrxVO[0].getLookBackInd() + "";

        if (lookBackInd == null)
        {
            lookBackInd = "N";
        }

        String commissionStatus = editTrxVO[0].getCommissionStatus();
        String originatingTrxFK = editTrxVO[0].getOriginatingTrxFK() + "";
        String employerContribution = (new EDITBigDecimal(groupSetupVO.getEmployerContribution())).toString();
        String employeeContribution = (new EDITBigDecimal(groupSetupVO.getEmployeeContribution())).toString();
        String groupPercent = (new EDITBigDecimal(groupSetupVO.getGroupPercent())).toString();
        String withdrawalType = groupSetupVO.getWithdrawalTypeCT();
        String notificationAmount = (new EDITBigDecimal(editTrxVO[0].getNotificationAmount())).toString();
        String notificationAmountReceived = (new EDITBigDecimal(editTrxVO[0].getNotificationAmountReceived())).toString();
        String accountingPeriod = editTrxVO[0].getAccountingPeriod();
        String reinsuranceStatus = editTrxVO[0].getReinsuranceStatus();
        String noCorrespondenceIndStatus = Util.initString(editTrxVO[0].getNoCorrespondenceInd(), "N");
        String transferTypeCT = Util.initString(editTrxVO[0].getTransferTypeCT(), "");
        String authorizedSignatureCT = Util.initString(editTrxVO[0].getAuthorizedSignatureCT(), "N");
        String billAmtEditOverrideIndStatus = Util.initString(editTrxVO[0].getBillAmtEditOverrideInd(), "N");

        if (noCorrespondenceIndStatus.equalsIgnoreCase("Y"))
        {
            noCorrespondenceIndStatus = "checked";
        }
        else
        {
            noCorrespondenceIndStatus = "unchecked";
        }

        String noAccountingIndStatus = Util.initString(editTrxVO[0].getNoAccountingInd(), "N");

        if (noAccountingIndStatus.equalsIgnoreCase("Y"))
        {
            noAccountingIndStatus = "checked";
        }
        else
        {
            noAccountingIndStatus = "unchecked";
        }

        String correspondenceExistsStatus = (editTrxVO[0].getEDITTrxCorrespondenceVOCount() > 0) ? "checked" : "unchecked";

        String noCommissionIndStatus = Util.initString(editTrxVO[0].getNoCommissionInd(), "N");

        if (noCommissionIndStatus.equalsIgnoreCase("Y"))
        {
            noCommissionIndStatus = "checked";
        }
        else
        {
            noCommissionIndStatus = "unchecked";
        }

        String zeroLoadIndStatus = (Util.initString(editTrxVO[0].getZeroLoadInd(), "N").equalsIgnoreCase("Y") ? "checked" : "unchecked");

        String noCheckEFTStatus = Util.initString(editTrxVO[0].getNoCheckEFT(), "N");
        if (noCheckEFTStatus.equalsIgnoreCase("Y"))
        {
            noCheckEFTStatus = "checked";
        }
        else
        {
            noCheckEFTStatus = "unchecked";
        }

        if (billAmtEditOverrideIndStatus.equalsIgnoreCase("Y"))
        {
            billAmtEditOverrideIndStatus = "checked";
        }
        else
        {
            billAmtEditOverrideIndStatus = "unchecked";
        }

        String contributionExcessDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(editTrxVO[0].getDateContributionExcess());

        String investmentIndStatus = "unchecked";
        InvestmentAllocationOverrideVO[] invAllocOverrideVOs = contractSetupVO[0].getInvestmentAllocationOverrideVO();

        if ((invAllocOverrideVOs != null) && (invAllocOverrideVOs.length > 0))
        {
            investmentIndStatus = "checked";

            for (int o = 0; o < invAllocOverrideVOs.length; o++)
            {
                PageBean iaOverridePB = new PageBean();
                String invAllocOvrdPK = invAllocOverrideVOs[o].getInvestmentAllocationOverridePK() + "";
                long investmentFK = invAllocOverrideVOs[o].getInvestmentFK();
                long invAllocFK = invAllocOverrideVOs[o].getInvestmentAllocationFK();
                InvestmentVO[] investmentVO = contractLookup.getInvestmentByPK(investmentFK);
                InvestmentAllocationVO[] investmentAllocationVO = contractLookup.findInvestmentAllocationByInvestmentAllocationPK(invAllocFK, false, null);
                iaOverridePB.putValue("editTrxPK", editTrxPK + "");
                iaOverridePB.putValue("segmentFK", segmentFK + "");
                iaOverridePB.putValue("investmentAllocationOverridePK", invAllocOvrdPK);
                iaOverridePB.putValue("investmentFK", investmentFK + "");
                iaOverridePB.putValue("investmentAllocationFK", invAllocFK + "");
                iaOverridePB.putValue("fromToIndicator", invAllocOverrideVOs[o].getToFromStatus());
                iaOverridePB.putValue("hfStatus", invAllocOverrideVOs[o].getHFStatus());
                iaOverridePB.putValue("hfiaIndicator", invAllocOverrideVOs[o].getHFIAIndicator());
                iaOverridePB.putValue("holdingAccountIndicator", invAllocOverrideVOs[o].getHoldingAccountIndicator());
                iaOverridePB.putValue("bucketFK", invAllocOverrideVOs[o].getBucketFK() + "");
                iaOverridePB.putValue("hfInvestmentFK", invAllocOverrideVOs[o].getHedgeFundInvestmentFK() + "");
                String filteredFundFK = "";
                if (investmentVO != null)
                {
                    filteredFundFK = investmentVO[0].getFilteredFundFK() + "";
                    iaOverridePB.putValue("fundId", filteredFundFK);
                    if (investmentAllocationVO != null)
                    {
                        iaOverridePB.putValue("allocationPercent", (new EDITBigDecimal(investmentAllocationVO[0].getAllocationPercent())).toString());
                        iaOverridePB.putValue("allocationDollars", investmentAllocationVO[0].getDollars() + "");
                        iaOverridePB.putValue("allocationUnits", (new EDITBigDecimal(investmentAllocationVO[0].getUnits())).toString());
                    }
                }

                String fundKey = invAllocOvrdPK + "_" + filteredFundFK;

                contractInvestmentOverrides.putPageBean(fundKey, iaOverridePB);
            }
        }

        String eventIndStatus = "unchecked";
        ChargeVO[] chargeVOs = groupSetupVO.getChargeVO();

        if ((chargeVOs != null) && (chargeVOs.length > 0))
        {
            for (int c = 0; c < chargeVOs.length; c++)
            {
                if (chargeVOs[c].getOneTimeOnlyInd() == null ||
                    (new EDITDate(chargeVOs[c].getOneTimeOnlyDate()).equals(new EDITDate(effectiveDate))))
                {
                    eventIndStatus = "checked";
                }

                PageBean chargeOverridePB = new PageBean();
                chargeOverridePB.putValue("chargeType", chargeVOs[c].getChargeTypeCT());
                chargeOverridePB.putValue("chargeAmount", Util.formatDecimal("########0.00", chargeVOs[c].getChargeAmount()));
                chargeOverridePB.putValue("chargePK", chargeVOs[c].getChargePK() + "");
                chargeOverridePB.putValue("oneTimeOnlyInd", Util.initString(chargeVOs[c].getOneTimeOnlyInd(), "N"));
                chargeOverridePB.putValue("oneTimeOnlyDate", Util.initString(chargeVOs[c].getOneTimeOnlyDate(), ""));
                chargeOverridePB.putValue("trxEffDate", effectiveDate);

                String chargeKey = chargeVOs[c].getChargeTypeCT() + chargeVOs[c].getChargePK();
                chargeOverridePB.putValue("key", chargeKey);
                contractChargeOverrides.putPageBean(chargeKey, chargeOverridePB);
            }
        }

        String payeeIndStatus = "unchecked";

        ContractClientAllocationOvrdVO[] ccAllocOverrideVOs = clientSetupVO[0].getContractClientAllocationOvrdVO();
        WithholdingOverrideVO[] withholdingOverrideVOs = clientSetupVO[0].getWithholdingOverrideVO();

        if (((ccAllocOverrideVOs != null) && (ccAllocOverrideVOs.length > 0)) || ((withholdingOverrideVOs != null) && (withholdingOverrideVOs.length > 0)))
        {
            payeeIndStatus = "checked";
        }

        if ((ccAllocOverrideVOs != null) && (ccAllocOverrideVOs.length > 0))
        {
            PageBean payeeOverridePB = new PageBean();
            String ccAllocFK = ccAllocOverrideVOs[0].getContractClientAllocationFK() + "";
            payeeOverridePB.putValue("contractClientAllocationOverridePK", ccAllocOverrideVOs[0].getContractClientAllocationOvrdPK() + "");
            payeeOverridePB.putValue("contractClientAllocationFK", ccAllocFK);
            payeeOverridePB.putValue("contractClientFK", clientSetupVO[0].getContractClientFK() + "");
            payeeOverridePB.putValue("clientSetupPK", clientSetupVO[0].getClientSetupPK() + "");
            payeeOverridePB.putValue("editTrxPK", editTrxVO[0].getEDITTrxPK() + "");

            voInclusionList.add(ContractClientAllocationVO.class);
            voInclusionList.add(WithholdingVO.class);
            voInclusionList.add(ClientRoleVO.class);
            voInclusionList.add(ClientDetailVO.class);

            ContractClientVO[] uiContractClientVOs = contractLookup.composeContractClientVOBySegmentFK(segmentFK, voInclusionList);

            appReqBlock.getHttpSession().setAttribute("contractClientVOs", uiContractClientVOs);

            if (uiContractClientVOs != null)
            {
                for (int c = 0; c < uiContractClientVOs.length; c++)
                {
                    String contractClientPK = uiContractClientVOs[c].getContractClientPK() + "";

                    if (contractClientPK.equals(contractClientFK))
                    {
                        ClientRoleVO clientRole = (ClientRoleVO) uiContractClientVOs[c].getParentVO(ClientRoleVO.class);

                        ClientDetailVO clientDetail = (ClientDetailVO) clientRole.getParentVO(ClientDetailVO.class);

                        String clientDetailPK = clientDetail.getClientDetailPK() + "";
                        payeeOverridePB.putValue("lastName", clientDetail.getLastName());
                        payeeOverridePB.putValue("firstName", clientDetail.getFirstName());
                        payeeOverridePB.putValue("middleName", clientDetail.getMiddleName());
                        payeeOverridePB.putValue("corporateName", clientDetail.getCorporateName());
                        payeeOverridePB.putValue("taxId", clientDetail.getTaxIdentification());
                        payeeOverridePB.putValue("clientDetailPK", clientDetailPK);

                        payeeOverridePB.putValue("preferencePK", clientRole.getPreferenceFK() + "");
                        payeeOverridePB.putValue("segmentFK", segmentFK + "");
                        payeeOverridePB.putValue("segmentName", segmentVO[0].getSegmentNameCT());
                        payeeOverridePB.putValue("companyStructureId", segmentVO[0].getProductStructureFK() + "");
                        payeeOverridePB.putValue("filter", contractId);

                        String payeeKey = segmentFK + clientDetailPK;

                        ContractClientAllocationVO[] ccAllocVOs = uiContractClientVOs[c].getContractClientAllocationVO();

                        for (int a = 0; a < ccAllocVOs.length; a++)
                        {
                            String ccAllocPK = ccAllocVOs[a].getContractClientAllocationPK() + "";

                            if (ccAllocPK.equals(ccAllocFK))
                            {
                                payeeOverridePB.putValue("allocationPercent", (new EDITBigDecimal(ccAllocVOs[a].getAllocationPercent())).toString());

                                break;
                            }
                        }

                        if ((withholdingOverrideVOs != null) && (withholdingOverrideVOs.length > 0))
                        {
                            String withholdingOverridePK = withholdingOverrideVOs[0].getWithholdingOverridePK() + "";
                            String withholdingFK = withholdingOverrideVOs[0].getWithholdingFK() + "";

                            WithholdingVO[] withholdingVOs = uiContractClientVOs[c].getWithholdingVO();

                            for (int w = 0; w < withholdingVOs.length; w++)
                            {
                                String withholdingPK = withholdingVOs[w].getWithholdingPK() + "";

                                if (withholdingPK.equals(withholdingFK))
                                {
                                    payeeOverridePB.putValue("fedWithholdingType", withholdingVOs[w].getFederalWithholdingTypeCT());
                                    payeeOverridePB.putValue("fedWithholdingAmt", Util.formatDecimal("########0.00", withholdingVOs[w].getFederalWithholdingAmount()));
                                    payeeOverridePB.putValue("fedWithholdingPct", new EDITBigDecimal(withholdingVOs[w].getFederalWithholdingPercent()).toString());
                                    payeeOverridePB.putValue("stateWithholdingType", withholdingVOs[w].getStateWithholdingTypeCT());
                                    payeeOverridePB.putValue("stateWithholdingAmt", Util.formatDecimal("########0.00", withholdingVOs[w].getStateWithholdingAmount()));
                                    payeeOverridePB.putValue("stateWithholdingPct", new EDITBigDecimal(withholdingVOs[w].getStateWithholdingPercent()).toString());
                                    payeeOverridePB.putValue("cityWithholdingType", withholdingVOs[w].getCityWithholdingTypeCT());
                                    payeeOverridePB.putValue("cityWithholdingAmt", Util.formatDecimal("########0.00", withholdingVOs[w].getCityWithholdingAmount()));
                                    payeeOverridePB.putValue("cityWithholdingPct", new EDITBigDecimal(withholdingVOs[w].getCityWithholdingPercent()).toString());
                                    payeeOverridePB.putValue("countyWithholdingType", withholdingVOs[w].getCountyWithholdingTypeCT());
                                    payeeOverridePB.putValue("countyWithholdingAmt", Util.formatDecimal("########0.00", withholdingVOs[w].getCountyWithholdingAmount()));
                                    payeeOverridePB.putValue("countyWithholdingPct", new EDITBigDecimal(withholdingVOs[w].getCountyWithholdingPercent()).toString());
                                    payeeOverridePB.putValue("withholdingFK", withholdingFK);
                                    payeeOverridePB.putValue("withholdingOverridePK", withholdingOverridePK);

                                    break;
                                }
                            }
                        }

                        contractPayeeOverrides.putPageBean(payeeKey, payeeOverridePB);

                        break;
                    }
                }
            }
        }

        String operator = editTrxVO[0].getOperator();
        String maintDate = editTrxVO[0].getMaintDateTime();
        String productStructureId = segmentVO[0].getProductStructureFK() + "";
        ProductStructureVO csVO = (ProductStructureVO) productStructures.get(productStructureId);
        Company company = Company.findByPK(csVO.getCompanyFK());

        String companyName = company.getCompanyName();
        String optionId = segmentVO[0].getOptionCodeCT();
        String deathStatus = Util.initString(contractSetupVO[0].getDeathStatusCT(), null);
        String claimStatus = Util.initString(contractSetupVO[0].getClaimStatusCT(), null);
        String scheduledEventPK = "";

        String frequency = "";
        String lifeContingent = "";
        String lastDayOfMonthIndStatus = "unchecked";
        String costOfLivingIndStatus = "unchecked";
        String incDecPercent = "";

        String startDate = "";
        String stopDate = "";
        String dueDate = "";

        if ((scheduledEventVO != null) && (scheduledEventVO.length > 0))
        {
            scheduledEventPK = scheduledEventVO[0].getScheduledEventPK() + "";

            startDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(scheduledEventVO[0].getStartDate());

            stopDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(scheduledEventVO[0].getStopDate());

            dueDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(editTrxVO[0].getDueDate());

            frequency = scheduledEventVO[0].getFrequencyCT();
            lifeContingent = scheduledEventVO[0].getLifeContingentCT();

            String lastDayOfMonthInd = Util.initString(scheduledEventVO[0].getLastDayOfMonthInd(), "");

            if (lastDayOfMonthInd.equalsIgnoreCase("Y"))
            {
                lastDayOfMonthIndStatus = "checked";
            }

            String costOfLivingInd = Util.initString(scheduledEventVO[0].getCostOfLivingInd(), "N");
            if (costOfLivingInd.equalsIgnoreCase("Y"))
            {
                costOfLivingIndStatus = "checked";
            }
        }

        String lookBackIndStatus = "unchecked";

        if (lookBackInd.equalsIgnoreCase("Y"))
        {
            lookBackIndStatus = "checked";
        }

        PageBean selectedContracts = new PageBean();
        selectedContracts.putValues("contracts", segmentVO, new String[]
            {
                "getContractNumber", "getSegmentPK", "getProductStructureFK",
                "getSegmentNameCT", "getSegmentFK", "getOptionCodeCT"
            }, ",");

        DepositsVO[] trxDepositsVOs = contractLookup.composeDepositsBySegmentPKAndEDITTrxPK(segmentFK, editTrxPK + "");

        //long totalDeposits = 0;
        EDITBigDecimal totalDeposits = new EDITBigDecimal();

        if (trxDepositsVOs != null)
        {
            appReqBlock.getHttpSession().setAttribute("trxDepositsVOs", trxDepositsVOs);

            for (int i = 0; i < trxDepositsVOs.length; i++)
            {
                //totalDeposits += Util.roundToNearestCent(trxDepositsVOs[i].getAmountReceived());
                totalDeposits = totalDeposits.addEditBigDecimal(trxDepositsVOs[i].getAmountReceived());
            }
        }

        String[] contracts = selectedContracts.getValues("contracts");

        for (int s = 0; s < contracts.length; s++)
        {
            String[] tokenizedContract = Util.fastTokenizer(contracts[s], ",");

            if (tokenizedContract[4].equals("0"))
            {
                contracts[s] = contracts[s] + "," + 0 + "," + amount + "," + amountReceived + "," + totalDeposits + "," + costBasis + "," + deathStatus + "," + payeeIndStatus + "," + investmentIndStatus + "," + claimStatus;
            }
            else
            {
                contracts[s] = contracts[s] + "," + 0 + "," + 0 + "," + amountReceived + "," + totalDeposits + "," + costBasis + "," + deathStatus + "," + payeeIndStatus + "," + investmentIndStatus + "," + claimStatus;
            }
        }

        contractTransactionSessionBean.putPageBean("selectedContracts", selectedContracts);

        transactionBean.putValue("filter", contractId);
        transactionBean.putValue("filterType", "Contract Number");
        transactionBean.putValue("segmentFK", segmentFK + "");
        transactionBean.putValue("groupSetupPK", groupSetupPK);
        transactionBean.putValue("contractSetupPK", contractSetupPK);
        transactionBean.putValue("clientSetupPK", clientSetupPK);
        transactionBean.putValue("contractClientFK", contractClientFK);
        transactionBean.putValue("clientRoleFK", clientRoleFK);
        transactionBean.putValue("editTrxPK", editTrxPK + "");
        transactionBean.putValue("scheduledEventPK", scheduledEventPK);
        transactionBean.putValue("transactionId", key);
        transactionBean.putValue("contractId", contractId);
        transactionBean.putValue("transactionType", transactionType);
        transactionBean.putValue("effectiveDate", effectiveDate);
        transactionBean.putValue("sequenceNumber", sequenceNumber);
        transactionBean.putValue("statusInd", status);
        transactionBean.putValue("pendingStatus", pendingStatus);
        transactionBean.putValue("amount", amount);
        transactionBean.putValue("percent", percent);
        transactionBean.putValue("amountUsed", totalDeposits + "");
        transactionBean.putValue("complexChangeType", complexChangeType);
        transactionBean.putValue("complexChangeValue", complexChangeValue);
        transactionBean.putValue("suppressDecreaseFaceInd", suppressDecreaseFaceInd);
        transactionBean.putValue("grossNetInd", grossNetInd);
        transactionBean.putValue("memoCode", memoCode);
        transactionBean.putValue("premiumType", premiumType);
        transactionBean.putValue("taxYear", taxYear);
        transactionBean.putValue("distributionId", distributionCode);
        transactionBean.putValue("investmentIndStatus", investmentIndStatus);
        transactionBean.putValue("eventIndStatus", eventIndStatus);
        transactionBean.putValue("lookBackIndStatus", lookBackIndStatus);
        transactionBean.putValue("trxIsRescheduledInd", trxIsRescheduledInd);
        transactionBean.putValue("reapplyEDITTrxFK", reapplyEDITTrxFK);
        transactionBean.putValue("commissionStatus", commissionStatus);
        transactionBean.putValue("originatingTrxFK", originatingTrxFK);
        transactionBean.putValue("withdrawalType", withdrawalType);
        transactionBean.putValue("groupPercent", groupPercent);
        transactionBean.putValue("transferTypeCT", transferTypeCT);

        transactionBean.putValue("operator", operator);
        transactionBean.putValue("maintDate", maintDate);
        transactionBean.putValue("companyName", companyName);
        transactionBean.putValue("companyStructureId", productStructureId);
        transactionBean.putValue("optionId", optionId);

        transactionBean.putValue("startDate", startDate);

        transactionBean.putValue("stopDate", stopDate);

        transactionBean.putValue("dueDate", dueDate);

        transactionBean.putValue("frequencyId", frequency);
        transactionBean.putValue("lifeContingentId", lifeContingent);
        transactionBean.putValue("lastDayOfMonthIndStatus", lastDayOfMonthIndStatus);
        transactionBean.putValue("costOfLivingIndStatus", costOfLivingIndStatus);
        transactionBean.putValue("incDecPercent", incDecPercent);
        transactionBean.putValue("reinsuranceStatus", reinsuranceStatus);

        transactionBean.putValue("employerContribution", employerContribution);
        transactionBean.putValue("employeeContribution", employeeContribution);

        if ((Double.parseDouble(employerContribution) > 0) || (Double.parseDouble(employeeContribution) > 0))
        {
            transactionBean.putValue("employerEmployeeIndStatus", "checked");
        }

        transactionBean.putValue("noCorrespondenceIndStatus", noCorrespondenceIndStatus);
        transactionBean.putValue("noAccountingIndStatus", noAccountingIndStatus);
        transactionBean.putValue("noCommissionIndStatus", noCommissionIndStatus);
        transactionBean.putValue("zeroLoadIndStatus", zeroLoadIndStatus);
        transactionBean.putValue("noCheckEFTStatus", noCheckEFTStatus);
        transactionBean.putValue("correspondenceExistsStatus", correspondenceExistsStatus);
        transactionBean.putValue("billAmtEditOverrideIndStatus", billAmtEditOverrideIndStatus);
        transactionBean.putValue("authorizedSignatureCT", authorizedSignatureCT);
        transactionBean.putValue("premiumDueCreateInd", Util.initString(editTrxVO[0].getPremiumDueCreatedIndicator(), "N"));

        if (noCorrespondenceIndStatus.equalsIgnoreCase("checked") ||
            noAccountingIndStatus.equalsIgnoreCase("checked") ||
            noCommissionIndStatus.equalsIgnoreCase("checked") ||
            zeroLoadIndStatus.equalsIgnoreCase("checked") ||
            noCheckEFTStatus.equalsIgnoreCase("checked"))
        {
            transactionBean.putValue("processIndStatus", "checked");
        }

        if (billAmtEditOverrideIndStatus.equalsIgnoreCase("checked"))
        {
            transactionBean.putValue("billAmtEditOverrideIndStatus", "checked");
        }

        transactionBean.putValue("notificationAmount", notificationAmount);
        transactionBean.putValue("notificationAmountReceived", notificationAmountReceived);
        transactionBean.putValue("accountingPeriod", accountingPeriod);

        transactionBean.putValue("contributionExcessDate", contributionExcessDate);
        transactionBean.putValue("interestOverride", Util.initString((editTrxVO[0].getInterestProceedsOverride() + ""), "0"));
        transactionBean.putValue("newPolicyNumber", Util.initString(editTrxVO[0].getNewPolicyNumber(), ""));
        transactionBean.putValue("premiumDueCreateInd", editTrxVO[0].getPremiumDueCreatedIndicator());

        contractTransactionSessionBean.putPageBean("formBean", transactionBean);
        appReqBlock.getHttpSession().removeAttribute("suspenseVOs");

        UIInvestmentOverrideVO[] uiInvestmentOverrideVOs = new UIInvestmentOverrideVO[0];
        appReqBlock.getHttpSession().setAttribute("uiInvestmentOverrideVOs", uiInvestmentOverrideVOs);

        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String mainProductStructureId = contractMainSessionBean.getValue("companyStructureId");

        if ((productStructureId != null) && !productStructureId.equals(""))
        {
            UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
            appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
        }
        else if ((mainProductStructureId != null) && !mainProductStructureId.equals(""))
        {
            UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, mainProductStructureId);
            appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
        }

        return getTransactionReturnPage(trxTypeCode);
    }
    
    private String showQuickPayDialog(AppReqBlock appReqBlock) throws Exception
    {
        
    	String transactionMessage = appReqBlock.getSessionBean("contractTransactionSessionBean").getValue("transactionMessage");

    	appReqBlock.getHttpSession().removeAttribute("trxDepositsVOs");

    	// get selected suspense if there is one
    	String key = appReqBlock.getReqParm("selectedRowIds_TransactionSuspenseTableModel");
    	String memoCode = null;
    	String premType = null;
    	EDITDate effDate = null;
    	EDITBigDecimal totalAmount = new EDITBigDecimal();
    	List<DepositsVO> depositsVOs = new ArrayList<>();
    	
    	if (key != null && !key.equals("")) {
    		String[] selectedPKs = Util.fastTokenizer(key, ",");
    		if (selectedPKs != null && selectedPKs.length > 0) {
    			
    			for (String selectedPK : selectedPKs) {
    				Long suspensePK = Long.parseLong(selectedPK);
    			
	    	        Suspense suspense = Suspense.findByPK(new Long(suspensePK));
	    	        suspense.setPendingSuspenseAmount(suspense.getSuspenseAmount());
	
	    	        totalAmount = totalAmount.addEditBigDecimal(suspense.getSuspenseAmount());
	    	        
	    	        if (effDate == null || suspense.getEffectiveDate().after(effDate)) {
	    	        	effDate = suspense.getEffectiveDate();
	    	        }
	    	        
	    	        if (suspense.getMemoCode() != null && !suspense.getMemoCode().equals("")) {
	    	        	memoCode = suspense.getMemoCode();
	    	        }
	    	        
	    	        if (premType == null && suspense.getPremiumTypeCT() != null && !suspense.getPremiumTypeCT().equals("")) {
	    	        	premType = suspense.getPremiumTypeCT();
	                }
	    	        
	    	        DepositsVO depositsVO = new DepositsVO();
	
	                contract.business.Contract contractComponent = new contract.component.ContractComponent();
	                depositsVO.setDepositsPK(contractComponent.getNextAvailableKey() * -1);
	                depositsVO.setDepositTypeCT("Cash");
		            depositsVO.setAmountReceived(suspense.getSuspenseAmount().getBigDecimal());
		            depositsVO.setDateReceived(suspense.getEffectiveDate().getFormattedDate());
		            depositsVO.setSuspenseFK(suspensePK);
	
		            String taxYear = suspense.getEffectiveDate().getFormattedYear();
		            depositsVO.setTaxYear(Integer.parseInt(taxYear)); 
		            
		            depositsVOs.add(depositsVO);
    			}
    		}
    	}
    	
    	appReqBlock.getSessionBean("contractTransactionSessionBean").clearState();
        appReqBlock.getSessionBean("contractChargeOverrides").clearState();

        appReqBlock.getHttpSession().removeAttribute("currentTrxDepositVO");

        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        contractTransactionSessionBean.removePageBean("availableContracts");
        contractTransactionSessionBean.removePageBean("selectedContracts");

        FormBean formBean = appReqBlock.getFormBean();
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = Util.initString(contractMainSessionBean.getValue("companyStructureId"), "");

        String transactionTypeCode = null;

        long productStructurePK = 0;

        if (!productStructureId.equals(""))
        {
            productStructurePK = Long.parseLong(productStructureId);
        }
        
        String contractNumber = contractMainSessionBean.getValue("contractId");
        contract.business.Lookup contractLookup = new contract.component.LookupComponent();
        SegmentVO[] segmentVOs = contractLookup.getSegmentByContractNumber(contractNumber, false, null);

        SegmentVO baseSegment = null;
        if (segmentVOs != null) {
        	for (SegmentVO segmentVO : segmentVOs) {
        		if (segmentVO.getSegmentFK() == 0) {
        			baseSegment = segmentVO;
        			break;
        		}
        	}
        }

        if (depositsVOs != null && depositsVOs.size() > 0) {
        	for (DepositsVO depositsVO : depositsVOs) {
	        	if (baseSegment != null) {
	        		depositsVO.setSegmentFK(baseSegment.getSegmentPK());
	        	}
        	}

            appReqBlock.getHttpSession().setAttribute("trxDepositsVOs", depositsVOs.toArray(new DepositsVO[depositsVOs.size()]));
        }

        if (productStructureId.equals("")) {

            if (segmentVOs != null) {
                productStructurePK = segmentVOs[0].getProductStructureFK();
                productStructureId = productStructurePK + "";
            }
        }

        if ((productStructureId != null) && !productStructureId.equals(""))
        {
            UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
            appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
        }
        
        if (transactionMessage != null && !transactionMessage.equals("")) {
            appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("transactionMessage", transactionMessage);
        }

        transactionTypeCode = "PY"; 
        
        PageBean pageBean = new PageBean();

        pageBean.putValue("contractId", contractNumber);
        pageBean.putValue("companyStructureId", productStructureId);
        pageBean.putValue("deathStatusEnabled", "false");
        
        if (depositsVOs != null && depositsVOs.size() > 0) {
    		pageBean.putValue("trxSource", "QuickPay");
            pageBean.putValue("amount", totalAmount.toString());
            pageBean.putValue("memoCode", memoCode);

            String effectiveDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(effDate.getFormattedDate());
            pageBean.putValue("effectiveDate", effectiveDate);
            
            if (premType != null && !premType.equals("")) {
                CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();
                CodeTableVO[] codeTableVOs  = codeTableWrapper.getCodeTableEntries("PREMIUMTYPE", Long.parseLong(productStructureId));

                if (codeTableVOs != null & codeTableVOs.length > 0) {
                	for (CodeTableVO codeTableVO : codeTableVOs) {
                		if (codeTableVO.getCodeDesc().equalsIgnoreCase(premType)) {
                			pageBean.putValue("premiumType", codeTableVO.getCodeTablePK()+"");
                            break;
                		}
                	}
                }
            }
        }
        
        appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", pageBean);
        appReqBlock.getSessionBean("contractInvestmentOverrides").clearState();
        appReqBlock.getSessionBean("contractPayeeOverrides").clearState();
        appReqBlock.getSessionBean("contractTransSuspense").clearState();
        appReqBlock.getHttpSession().removeAttribute("suspenseVOs");
        
        SessionBean transactions = appReqBlock.getSessionBean("contractTransactions");

        Event eventComponent = new EventComponent();

        String scrollingTrxPageSize = appReqBlock.getFormBean().getValue("scrollingTrxPageSize");
        appReqBlock.getHttpServletRequest().setAttribute("scrollingTrxPageSize", scrollingTrxPageSize);

        String beginScrollingTrxPK = (String) appReqBlock.getFormBean().getValue("beginScrollingTrxPK");

        if ((beginScrollingTrxPK == null) || beginScrollingTrxPK.equals(""))
        {
            beginScrollingTrxPK = "0";
        }

        appReqBlock.getHttpServletRequest().setAttribute("beginScrollingTrxPK", beginScrollingTrxPK);

        String endScrollingTrxPK = (String) appReqBlock.getFormBean().getValue("endScrollingTrxPK");

        if ((endScrollingTrxPK == null) || endScrollingTrxPK.equals(""))
        {
            endScrollingTrxPK = "0";
        }

        appReqBlock.getHttpServletRequest().setAttribute("endScrollingTrxPK", endScrollingTrxPK);

        int scrollDirection = 1;
        long scrollingTrxPK = Long.parseLong(endScrollingTrxPK);
        String noScrollingValue = null;

        List voInclusionVector = new ArrayList();
        voInclusionVector.add(ClientSetupVO.class);
        voInclusionVector.add(ContractSetupVO.class);

        EDITTrxVO[] editTrxVOs = null;
        Long segmentPK = null;
        if (baseSegment != null) {
        	segmentPK = baseSegment.getSegmentPK();        	
            editTrxVOs = eventComponent.composeEDITTrxVOByPendingStatusAndTransactionType(segmentPK, "P", "PY", voInclusionVector);
        }
        
        if (editTrxVOs != null)
        {
            CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

            for (int i = 0; i < editTrxVOs.length; i++)
            {
                ClientSetupVO clientSetupVO = (ClientSetupVO) editTrxVOs[i].getParentVO(ClientSetupVO.class);
                ContractSetupVO contractSetupVO = (ContractSetupVO) clientSetupVO.getParentVO(ContractSetupVO.class);

                PageBean transactionBean = new PageBean();

                String editTrxPK = editTrxVOs[i].getEDITTrxPK() + "";
                String trxTypeCode = editTrxVOs[i].getTransactionTypeCT();

                String effectiveDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(editTrxVOs[i].getEffectiveDate());

                String sequenceNumber = editTrxVOs[i].getSequenceNumber() + "";
                String status = editTrxVOs[i].getStatus();

                String pendingStatus = editTrxVOs[i].getPendingStatus();

                EDITBigDecimal amountDbl = new EDITBigDecimal(editTrxVOs[i].getTrxAmount());
                String amount = Util.formatDecimal("########0.00", amountDbl);

                String percent = Util.formatDecimal("0.0##", new EDITBigDecimal(editTrxVOs[i].getTrxPercent()));
                long segmentFK = contractSetupVO.getSegmentFK();
                String companyName = "";
                String optionId = "";
                String contractId = "";

                if (segmentFK > 0)
                {
                    SegmentVO[] segmentVO = contractLookup.getSegmentBySegmentPK(segmentFK, false, null);
                    productStructureId = segmentVO[0].getProductStructureFK() + "";

                    ProductStructure productStructure = (ProductStructure) ProductStructure.findByPK(Long.parseLong(productStructureId));
                    Company company = Company.findByPK(productStructure.getCompanyFK());
                    companyName = company.getCompanyName();

                    optionId = segmentVO[0].getOptionCodeCT();
                    contractId = segmentVO[0].getContractNumber();
                }

                String transactionType = codeTableWrapper.getCodeDescByCodeTableNameAndCode("TRXTYPE", trxTypeCode, Long.parseLong(productStructureId));

                transactionBean.putValue("segmentFK", segmentFK + "");
                transactionBean.putValue("transactionId", editTrxPK);
                transactionBean.putValue("contractId", contractId);
                transactionBean.putValue("transactionType", transactionType);

                transactionBean.putValue("effectiveDate", effectiveDate);
                transactionBean.putValue("sequenceNumber", sequenceNumber);
                transactionBean.putValue("statusInd", status);
                transactionBean.putValue("pendingStatus", pendingStatus);
                transactionBean.putValue("amount", amount);
                transactionBean.putValue("percent", percent);
                transactionBean.putValue("companyName", companyName);
                transactionBean.putValue("companyStructureId", productStructureId);
                transactionBean.putValue("optionId", optionId);
                transactionBean.putValue("premiumDueCreateInd", editTrxVOs[i].getPremiumDueCreatedIndicator());
                transactions.putPageBean(editTrxVOs[i].getEDITTrxPK() + "", transactionBean);
            }
             // end for
        }
        
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");

        String currentPage = stateBean.getValue("currentPage");
        stateBean.putValue("previousPage", currentPage);
        stateBean.putValue("currentPage", QUICK_PAY_DIALOG);

        PageBean appFormBean = appReqBlock.getFormBean();

        SessionBean transactionsClone = (SessionBean) Util.deepClone(transactions);

        SessionBean contractTransSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        PageBean selectedTrx = contractTransSessionBean.getPageBean("formBean");

        appReqBlock.addSessionBean("contractTransactionsClone", transactionsClone);

        String trxAmount = selectedTrx.getValue("amount");

        String editTrxPK = appFormBean.getValue("editTrxPK");

        EDITBigDecimal totalDepositsForContract = new EDITBigDecimal();
        DepositsVO[] trxDepositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("trxDepositsVOs");

        if (trxDepositsVOs != null)
        {
            for (int i = 0; i < trxDepositsVOs.length; i++)
            {
                if (trxDepositsVOs[i].getSegmentFK() == segmentPK)
                {
                    totalDepositsForContract = totalDepositsForContract.addEditBigDecimal(Util.roundToNearestCent(trxDepositsVOs[i].getAmountReceived()));
                }
            }
        }
        else
        {
            trxDepositsVOs = contractLookup.composeDepositsBySegmentPKAndEDITTrxPK(segmentPK, editTrxPK);

            if (trxDepositsVOs != null)
            {
                appReqBlock.getHttpSession().setAttribute("trxDepositsVOs", trxDepositsVOs);

                for (int i = 0; i < trxDepositsVOs.length; i++)
                {
                    if (trxDepositsVOs[i].getSegmentFK() == segmentPK)
                    {
                        totalDepositsForContract = totalDepositsForContract.addEditBigDecimal(Util.roundToNearestCent(trxDepositsVOs[i].getAmountReceived()));
                    }
                }
            }
            else
            {
                appReqBlock.getHttpSession().removeAttribute("trxDepositsVOs");
                appReqBlock.getHttpSession().removeAttribute("currentTrxDepositVO");
            }
        }

        appReqBlock.getHttpServletRequest().setAttribute("formBean", appFormBean);

        SessionBean contractTransSessionClone = (SessionBean) Util.deepClone(contractTransSessionBean);

        appReqBlock.addSessionBean("contractTransSessionClone", contractTransSessionClone);

        Segment segment = Segment.findByPK(new Long(segmentPK));

        new TransactionSuspenseTableModel(segment.getContractNumber(), appReqBlock);
         
    	return QUICK_PAY_DIALOG; 
    }
    
    protected String showTransactionDefault(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("trxDepositsVOs");
        appReqBlock.getHttpSession().removeAttribute("currentTrxDepositVO");

        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        contractTransactionSessionBean.removePageBean("availableContracts");
        contractTransactionSessionBean.removePageBean("selectedContracts");

        FormBean formBean = appReqBlock.getFormBean();
//        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();
        String transactionType = Util.initString(formBean.getValue("transactionType"), "");
        String filterType = Util.initString(formBean.getValue("filterType"), "");
        String filterValue = Util.initString(formBean.getValue("filterValue"), "");
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = Util.initString(contractMainSessionBean.getValue("companyStructureId"), "");

        String transactionTypeCode = null;

        long productStructurePK = 0;

        if (!productStructureId.equals(""))
        {
            productStructurePK = Long.parseLong(productStructureId);
        }

        String contractNumber = "";

        if (filterType.equalsIgnoreCase("Contract Number"))
        {
            contractNumber = filterValue;

            SegmentVO[] segmentVOs = null;

            if (productStructureId.equals(""))
            {
                contract.business.Lookup contractLookup = new contract.component.LookupComponent();

                //                segmentVOs = contractLookup.getSegmentByContractNumber(contractNumber, true, new ArrayList());
                segmentVOs = contractLookup.getSegmentByContractNumber(contractNumber, false, null);

                if (segmentVOs != null)
                {
                    productStructurePK = segmentVOs[0].getProductStructureFK();
                    productStructureId = productStructurePK + "";
                }
            }

            if ((productStructureId != null) && !productStructureId.equals(""))
            {
                UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
                appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
            }
        }

        if (filterType.equalsIgnoreCase("Client ID"))
        {
            client.business.Lookup clientLookup = new client.component.LookupComponent();
            ClientDetailVO[] clientDetailVO = clientLookup.getClientByClientId(filterValue);

            if (clientDetailVO != null)
            {
                long clientDetailPK = clientDetailVO[0].getClientDetailPK();
                role.business.Lookup roleLookup = new role.component.LookupComponent();
                ClientRoleVO[] clientRoleVOs = roleLookup.getRolesByClientDetailFK(clientDetailPK);

                if (clientRoleVOs != null)
                {
                    contract.business.Lookup contractLookup = new contract.component.LookupComponent();

                    Map segmentsHT = new HashMap();

                    for (int z = 0; z < clientRoleVOs.length; z++)
                    {
                        long clientRolePK = clientRoleVOs[z].getClientRolePK();

                        SegmentVO[] segmentVOs = contractLookup.findSegmentsByClientRoleFK(clientRolePK, false, null);

                        if (segmentVOs != null)
                        {
                            for (int s = 0; s < segmentVOs.length; s++)
                            {
                                String segmentPK = segmentVOs[s].getSegmentPK() + "";

                                if (!segmentsHT.containsKey(segmentPK))
                                {
                                    segmentsHT.put(segmentPK, segmentVOs[s]);
                                }
                            }
                        }
                    }

                    TreeMap segmentTree = sortSegmentsByContract(segmentsHT);

                    PageBean availableContracts = new PageBean();
                    PageBean selectedContracts = new PageBean();

                    Iterator it = segmentTree.values().iterator();

                    SegmentVO[] sortedSegmentVOs = new SegmentVO[segmentsHT.size()];

                    int s = 0;

                    while (it.hasNext())
                    {
                        SegmentVO segmentVO = (SegmentVO) it.next();

                        sortedSegmentVOs[s] = segmentVO;

                        s += 1;
                    }

                    availableContracts.putValues("contracts", sortedSegmentVOs, new String[]
                        {
                            "getContractNumber", "getSegmentPK",
                            "getProductStructureFK", "getSegmentNameCT",
                            "getSegmentFK", "getOptionCodeCT"
                        }, ",");

                    String[] contracts = availableContracts.getValues("contracts");

                    for (s = 0; s < contracts.length; s++)
                    {
                        contracts[s] = contracts[s] + "," + 0 + "," + 0 + "," + 0 + "," + 0 + "," + 0 + "," + "" + "," + "unchecked" + "," + "unchecked" + "," + "";
                    }

                    availableContracts.clearState();
                    availableContracts.putValues("contracts", contracts);

                    contractTransactionSessionBean.putPageBean("availableContracts", availableContracts);
                    contractTransactionSessionBean.putPageBean("selectedContracts", selectedContracts);
                }
                else
                {
                    contractTransactionSessionBean.putValue("transactionMessage", "No Contracts Found For Specified Filter");
                }
            }

            else
            {
                contractTransactionSessionBean.putValue("transactionMessage", "Filter Value Not Found");
            }
        }

        transactionTypeCode = getTrxCTFromDescription(transactionType, productStructureId);

        String scrollingTrxPageSize = appReqBlock.getFormBean().getValue("scrollingTrxPageSize");
        appReqBlock.getHttpServletRequest().setAttribute("scrollingTrxPageSize", scrollingTrxPageSize);

        String beginScrollingTrxPK = (String) appReqBlock.getFormBean().getValue("beginScrollingTrxPK");

        if ((beginScrollingTrxPK == null) || beginScrollingTrxPK.equals(""))
        {
            beginScrollingTrxPK = "0";
        }

        appReqBlock.getHttpServletRequest().setAttribute("beginScrollingTrxPK", beginScrollingTrxPK);

        String endScrollingTrxPK = (String) appReqBlock.getFormBean().getValue("endScrollingTrxPK");

        if ((endScrollingTrxPK == null) || endScrollingTrxPK.equals(""))
        {
            endScrollingTrxPK = "0";
        }

        appReqBlock.getHttpServletRequest().setAttribute("endScrollingTrxPK", endScrollingTrxPK);

        PageBean pageBean = new PageBean();

        pageBean.putValue("transactionType", transactionType);
        pageBean.putValue("filterType", filterType);
        pageBean.putValue("filter", filterValue);
        pageBean.putValue("contractId", contractNumber);
        pageBean.putValue("companyStructureId", productStructureId);

        if (transactionTypeCode.equalsIgnoreCase("DE"))
        {
            pageBean.putValue("deathStatusEnabled", "true");
        }

        else
        {
            pageBean.putValue("deathStatusEnabled", "false");
        }

        appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", pageBean);
        appReqBlock.getSessionBean("contractInvestmentOverrides").clearState();
        appReqBlock.getSessionBean("contractPayeeOverrides").clearState();
        appReqBlock.getSessionBean("contractTransSuspense").clearState();
        appReqBlock.getHttpSession().removeAttribute("suspenseVOs");

        return getTransactionReturnPage(transactionTypeCode);
    }

    protected String showProcessOverrideDialog(AppReqBlock appReqBlock) throws Exception
    {
        new EventUseCaseComponent().accessTransactionProcess();

        saveTrxMainValues(appReqBlock);

        return PROCESS_OVERRIDE_DIALOG;
    }

    protected String updateProcessOverride(AppReqBlock appReqBlock) throws Exception
    {
        PageBean trxFormBean = appReqBlock.getSessionBean("contractTransactionSessionBean").getPageBean("formBean");
        String transactionType = Util.initString(trxFormBean.getValue("transactionType"), "");

        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = Util.initString(contractMainSessionBean.getValue("companyStructureId"), "");

        String transactionTypeCode = getTrxCTFromDescription(transactionType, productStructureId);

        PageBean formBean = appReqBlock.getFormBean();
        String noCorrespondenceIndStatus = formBean.getValue("noCorrespondenceIndStatus");
        String noAccountingIndStatus = formBean.getValue("noAccountingIndStatus");
        String noCommissionIndStatus = formBean.getValue("noCommissionIndStatus");
        String zeroLoadIndStatus = formBean.getValue("zeroLoadIndStatus");
        String noCheckEFTStatus = formBean.getValue("noCheckEFTStatus");

        trxFormBean.putValue("noCorrespondenceIndStatus", noCorrespondenceIndStatus);
        trxFormBean.putValue("noAccountingIndStatus", noAccountingIndStatus);
        trxFormBean.putValue("noCommissionIndStatus", noCommissionIndStatus);
        trxFormBean.putValue("zeroLoadIndStatus", zeroLoadIndStatus);
        trxFormBean.putValue("noCheckEFTStatus", noCheckEFTStatus);

        if (noCorrespondenceIndStatus.equalsIgnoreCase("checked") ||
            noAccountingIndStatus.equalsIgnoreCase("checked") ||
            noCommissionIndStatus.equalsIgnoreCase("checked") ||
            zeroLoadIndStatus.equalsIgnoreCase("checked") ||
            noCheckEFTStatus.equalsIgnoreCase("checked"))
        {
            trxFormBean.putValue("processIndStatus", "checked");
        }
        else
        {
            trxFormBean.putValue("processIndStatus", "unchecked");
        }

        return getTransactionReturnPage(transactionTypeCode);
    }

    protected String updateEmployerEmployeeOverride(AppReqBlock appReqBlock) throws Exception
    {
        PageBean trxFormBean = appReqBlock.getSessionBean("contractTransactionSessionBean").getPageBean("formBean");
        String transactionType = Util.initString(trxFormBean.getValue("transactionType"), "");

        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = Util.initString(contractMainSessionBean.getValue("companyStructureId"), "");

        String transactionTypeCode = getTrxCTFromDescription(transactionType, productStructureId);

        PageBean formBean = appReqBlock.getFormBean();
        String employerContribution = formBean.getValue("employerContribution");
        String employeeContribution = formBean.getValue("employeeContribution");

        trxFormBean.putValue("employerContribution", employerContribution);
        trxFormBean.putValue("employeeContribution", employeeContribution);

        boolean employerEmployeeContribFound = false;

        if (Util.isANumber(employerContribution))
        {
            if (Double.parseDouble(employerContribution) > 0)
            {
                employerEmployeeContribFound = true;
            }
        }

        if (Util.isANumber(employeeContribution))
        {
            if (Double.parseDouble(employeeContribution) > 0)
            {
                employerEmployeeContribFound = true;
            }
        }

        if (employerEmployeeContribFound)
        {
            trxFormBean.putValue("employerEmployeeIndStatus", "checked");
        }
        else
        {
            trxFormBean.putValue("employerEmployeeIndStatus", "unchecked");
        }

        return getTransactionReturnPage(transactionTypeCode);
    }

    protected String showEmployerEmployeeOverrideDialog(AppReqBlock appReqBlock) throws Exception
    {
        new EventUseCaseComponent().accessTransactionEmployerEmployee();

        saveTrxMainValues(appReqBlock);

        return EMPLOYER_EMPLOYEE_OVERRIDE_DIALOG;
    }

    protected String showBillAmtEditOverrideDialog(AppReqBlock appReqBlock) throws Exception
    {
        new EventUseCaseComponent().accessBillAmtEditOverride();

        saveTrxMainValues(appReqBlock);

        return BILL_AMT_EDIT_OVERRIDE_DIALOG;
    }

    protected String updateBillAmtEditOverride(AppReqBlock appReqBlock) throws Exception
    {
        PageBean trxFormBean = appReqBlock.getSessionBean("contractTransactionSessionBean").getPageBean("formBean");
        String transactionType = Util.initString(trxFormBean.getValue("transactionType"), "");

        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = Util.initString(contractMainSessionBean.getValue("companyStructureId"), "");

        String transactionTypeCode = getTrxCTFromDescription(transactionType, productStructureId);

        PageBean formBean = appReqBlock.getFormBean();
        String billAmtEditOverrideIndStatus = formBean.getValue("billAmtEditOverrideIndStatus");

        trxFormBean.putValue("billAmtEditOverrideIndStatus", billAmtEditOverrideIndStatus);

        if (billAmtEditOverrideIndStatus.equalsIgnoreCase("checked"))
        {
            trxFormBean.putValue("billAmtEditOverrideIndStatus", "checked");
        }
        else
        {
            trxFormBean.putValue("billAmtEditOverrideIndStatus", "unchecked");
        }

        appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", trxFormBean);

        return getTransactionReturnPage(transactionTypeCode);
    }

    private void saveTrxMainValues(AppReqBlock appReqBlock)
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        PageBean formBean = appReqBlock.getFormBean();
        String optionId = formBean.getValue("optionId");

        if (Util.isANumber(optionId))
        {
            optionId = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionId)).getCode();
        }
        else
        {
            optionId = "";
        }

        formBean.putValue("optionId", optionId);

        String distributionId = formBean.getValue("distributionId");

        if (Util.isANumber(distributionId))
        {
            distributionId = codeTableWrapper.getCodeTableEntry(Long.parseLong(distributionId)).getCode();
        }
        else
        {
            distributionId = "";
        }

        formBean.putValue("distributionId", distributionId);

        String grossNetInd = formBean.getValue("grossNetInd");

        if (Util.isANumber(grossNetInd))
        {
            grossNetInd = codeTableWrapper.getCodeTableEntry(Long.parseLong(grossNetInd)).getCode();
        }
        else
        {
            grossNetInd = "";
        }

        formBean.putValue("grossNetInd", grossNetInd);

        String premiumType = formBean.getValue("premiumType");

        if (Util.isANumber(premiumType))
        {
            premiumType = codeTableWrapper.getCodeTableEntry(Long.parseLong(premiumType)).getCode();
        }
        else
        {
            premiumType = "";
        }

        formBean.putValue("premiumType", premiumType);

        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        contractTransactionSessionBean.putPageBean("formBean", formBean);
    }

    protected TreeMap sortSegmentsByContract(Map segmentsHT)
    {
        TreeMap sortedSegments = new TreeMap();

        Iterator segmentsEnum = segmentsHT.values().iterator();

        while (segmentsEnum.hasNext())
        {
            SegmentVO segmentVO = (SegmentVO) segmentsEnum.next();
            String contractNumber = segmentVO.getContractNumber();
            String segmentName = segmentVO.getSegmentNameCT();

            sortedSegments.put(contractNumber + segmentName, segmentVO);
        }

        return sortedSegments;
    }

    protected String selectAvailableInvestmentOverride(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
        String productStructureId = formBean.getValue("companyStructureId");
        String selectedInvAllocFK = formBean.getValue("investmentAllocationFK");
//        String selectedInvestmentFK = formBean.getValue("investmentFK");
//        String segmentFK = formBean.getValue("segmentFK");

        UIInvestmentOverrideVO[] uiInvestmentOverrideVOs = (UIInvestmentOverrideVO[]) appReqBlock.getHttpSession().getAttribute("uiInvestmentOverrideVOs");

        boolean invAllocFound = false;

        for (int o = 0; o < uiInvestmentOverrideVOs.length; o++)
        {
            InvestmentAllocationVO[] invAllocVOs = uiInvestmentOverrideVOs[o].getInvestmentAllocationVO();

            for (int a = 0; a < invAllocVOs.length; a++)
            {
                String invAllocPK = invAllocVOs[a].getInvestmentAllocationPK() + "";

                if (invAllocPK.equals(selectedInvAllocFK))
                {
                    String fundId = uiInvestmentOverrideVOs[o].getFilteredFundFK() + "";

                    formBean.putValue("fundId", fundId);
                    formBean.putValue("investmentAllocationOverridePK", "");
                    formBean.putValue("allocationPercent", (new EDITBigDecimal(invAllocVOs[a].getAllocationPercent())).toString());
                    formBean.putValue("allocationDollars", (new EDITBigDecimal(invAllocVOs[a].getDollars())).toString());
                    formBean.putValue("allocationUnits", (new EDITBigDecimal(invAllocVOs[a].getUnits())).toString());

                    appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);
                    invAllocFound = true;

                    break;
                }
            }

            if (invAllocFound)
            {
                break;
            }
        }

        appReqBlock.getHttpServletRequest().setAttribute("companyStructureId", productStructureId);

        return CONTRACT_TRANS_INVESTMENT_DIALOG;
    }

    protected String selectAvailableItems(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        FormBean formBean = appReqBlock.getFormBean();
        String transactionType = Util.initString(formBean.getValue("transactionType"), "");
        String selectedSegmentNames = Util.initString(formBean.getValue("selectedSegmentNames"), "");
        String selectedContractNumbers = Util.initString(formBean.getValue("selectedContractNumbers"), "");
        String drivingSegmentName = Util.initString(formBean.getValue("drivingSegmentName"), "");

        PageBean selectedContracts = contractTransactionSessionBean.getPageBean("selectedContracts");
        PageBean availableContracts = contractTransactionSessionBean.getPageBean("availableContracts");
        String[] contracts = availableContracts.getValues("contracts");

        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = Util.initString(contractMainSessionBean.getValue("companyStructureId"), "");

        String transactionTypeCode = getTrxCTFromDescription(transactionType, productStructureId);

        String[] tokenizedSegmentNames = Util.fastTokenizer(selectedSegmentNames, ",");
        String[] tokenizedContractNumbers = Util.fastTokenizer(selectedContractNumbers, ",");

        if (drivingSegmentName.equalsIgnoreCase("contract"))
        {
            for (int c = 0; c < contracts.length; c++)
            {
                String[] tokenizedContracts = Util.fastTokenizer(contracts[c], ",");
                String availContractNumber = tokenizedContracts[0];

                for (int i = 0; i < tokenizedContractNumbers.length; i++)
                {
                    if (availContractNumber.equals(tokenizedContractNumbers[i]))
                    {
                        selectedContracts.addToValues("contracts", contracts[c]);
                    }
                }
            }
        }
        else
        {
            for (int c = 0; c < contracts.length; c++)
            {
                String[] tokenizedContracts = Util.fastTokenizer(contracts[c], ",");
                String availContractNumber = tokenizedContracts[0];
                String availSegmentName = tokenizedContracts[3];

                for (int i = 0; i < tokenizedContractNumbers.length; i++)
                {
                    if (availContractNumber.equals(tokenizedContractNumbers[i]) && availSegmentName.equals(tokenizedSegmentNames[i]))
                    {
                        selectedContracts.addToValues("contracts", contracts[c]);
                    }
                }
            }
        }

        String[] selectedValues = selectedContracts.getValues("contracts");

        if (selectedValues.length > 1)
        {
            TreeMap sortedValues = sortValues(selectedValues);
            String[] sortedContracts = new String[sortedValues.size()];
            Iterator it = sortedValues.values().iterator();
            int i = 0;

            while (it.hasNext())
            {
                String valuesString = (String) it.next();
                sortedContracts[i] = valuesString;
                i += 1;
            }

            selectedContracts.clearState();
            selectedContracts.putValues("contracts", sortedContracts);
        }

        contractTransactionSessionBean.putPageBean("formBean", formBean);
        contractTransactionSessionBean.putValue("drivingSegmentName", drivingSegmentName);

        return getTransactionReturnPage(transactionTypeCode);
    }

    protected TreeMap sortValues(String[] selectedValues)
    {
        TreeMap sortedValues = new TreeMap();

        for (int s = 0; s < selectedValues.length; s++)
        {
            String[] tokenizedContracts = Util.fastTokenizer(selectedValues[s], ",");
            String contractNumber = tokenizedContracts[0];
            String segmentPK = tokenizedContracts[1];
            String productStructurePK = tokenizedContracts[2];
            String segmentName = tokenizedContracts[3];
            String segmentFK = tokenizedContracts[4];
            String optionCode = tokenizedContracts[5];
            String allocPct = tokenizedContracts[6];
            String allocDollars = tokenizedContracts[7];
            String amountReceived = tokenizedContracts[8];
            String amountUsed = tokenizedContracts[9];
            String costBasis = tokenizedContracts[10];
            String deathStatus = tokenizedContracts[11];
            String payeeIndStatus = tokenizedContracts[12];
            String investmentIndStatus = tokenizedContracts[13];
            String claimStatus = tokenizedContracts[14];

            sortedValues.put(contractNumber + segmentName + optionCode, contractNumber + "," + segmentPK + "," + productStructurePK + "," + segmentName + "," + segmentFK + "," + optionCode + "," + allocPct + "," + allocDollars + "," + amountReceived + "," + amountUsed + "," + costBasis + "," + deathStatus + "," + payeeIndStatus + "," + investmentIndStatus + "," + claimStatus);
        }

        return sortedValues;
    }

    protected String removeSelectedItems(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractTransactionSessionBean = appReqBlock.getSessionBean("contractTransactionSessionBean");
        FormBean formBean = appReqBlock.getFormBean();
        String transactionType = Util.initString(formBean.getValue("transactionType"), "");
        String selectedContractNumbers = Util.initString(formBean.getValue("selectedContractNumbers"), "");
        String selectedSegmentNames = Util.initString(formBean.getValue("selectedSegmentNames"), "");
        String drivingSegmentName = Util.initString(formBean.getValue("drivingSegmentName"), "");

        PageBean selectedContracts = contractTransactionSessionBean.getPageBean("selectedContracts");
        String[] contracts = selectedContracts.getValues("contracts");

        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = Util.initString(contractMainSessionBean.getValue("companyStructureId"), "");

        String transactionTypeCode = getTrxCTFromDescription(transactionType, productStructureId);

        String[] tokenizedContractNumbers = Util.fastTokenizer(selectedContractNumbers, ",");
        String[] tokenizedSegmentNames = Util.fastTokenizer(selectedSegmentNames, ",");

        if (drivingSegmentName.equalsIgnoreCase("contract"))
        {
            for (int c = 0; c < contracts.length; c++)
            {
                String[] tokenizedContracts = Util.fastTokenizer(contracts[c], ",");
                String selectedContractNumber = tokenizedContracts[0];

                for (int i = 0; i < tokenizedContractNumbers.length; i++)
                {
                    if (selectedContractNumber.equals(tokenizedContractNumbers[i]))
                    {
                        selectedContracts.removeFromValues("contracts", contracts[c]);
                    }
                }
            }
        }
        else
        {
            for (int c = 0; c < contracts.length; c++)
            {
                String[] tokenizedContracts = Util.fastTokenizer(contracts[c], ",");
                String selectedContractNumber = tokenizedContracts[0];
                String selectedSegmentName = tokenizedContracts[3];

                for (int i = 0; i < tokenizedContractNumbers.length; i++)
                {
                    if (selectedContractNumber.equals(tokenizedContractNumbers[i]) && selectedSegmentName.equals(tokenizedSegmentNames[i]))
                    {
                        selectedContracts.removeFromValues("contracts", contracts[c]);
                    }
                }
            }
        }

        if (selectedContracts.getValues("contracts").length == 0)
        {
            formBean.putValue("drivingSegmentName", "");
        }

        contractTransactionSessionBean.putPageBean("formBean", formBean);

        return getTransactionReturnPage(transactionTypeCode);
    }

    //This method should be invoked Payee and Non Payee
    protected String showAgentDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        String selectedAgentHierarchyAllocationPK = appReqBlock.getReqParm("selectedAgentHierarchyAllocationPK");

        appReqBlock.putInRequestScope("selectedAgentHierarchyAllocationPK", selectedAgentHierarchyAllocationPK);

        return CONTRACT_AGENT;
    }

    protected String showContractLoan(AppReqBlock appReqBlock) throws Exception
    {
        return showFundDetailSummary(appReqBlock);
    }

    protected String showFundDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String optionId = formBean.getValue("selectedOptionId");
        String filteredFundId = formBean.getValue("selectedFundId");

        String key = optionId + filteredFundId;

        PageBean fundFormBean = appReqBlock.getSessionBean("contractFunds").getPageBean(key);

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("investmentFormBean", fundFormBean);

        String fundType = fundFormBean.getValue("fundType");

        if (fundType.equalsIgnoreCase("LOAN"))
        {
            return CONTRACT_LOAN_INVESTMENTS;
        }
        else
        {
            return CONTRACT_INVESTMENTS;
        }
    }

    protected String showInvestmentDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
//        String fundId = formBean.getValue("fundId");
//        String overridePK = formBean.getValue("investmentAllocationOverridePK");
        String fundKey = formBean.getValue("fundKey");

        SessionBean investmentOverrides = appReqBlock.getSessionBean("contractInvestmentOverrides");
        PageBean investmentPageBean = investmentOverrides.getPageBean(fundKey);

        formBean.putValue("fundId", investmentPageBean.getValue("fundId"));
        formBean.putValue("investmentAllocationOverridePK", investmentPageBean.getValue("investmentAllocationOverridePK"));
        formBean.putValue("investmentFK", investmentPageBean.getValue("investmentFK"));
        formBean.putValue("investmentAllocationFK", investmentPageBean.getValue("investmentAllocationFK"));
        formBean.putValue("allocationPercent", investmentPageBean.getValue("allocationPercent"));
        formBean.putValue("allocationDollars", investmentPageBean.getValue("allocationDollars"));
        formBean.putValue("allocationUnits", investmentPageBean.getValue("allocationUnits"));
        formBean.putValue("fromToIndicator", investmentPageBean.getValue("fromToIndicator"));
        formBean.putValue("hfStatus", investmentPageBean.getValue("hfStatus"));
        formBean.putValue("hfiaIndicator", investmentPageBean.getValue("hfiaIndicator"));
        formBean.putValue("holdingAccountIndicator", investmentPageBean.getValue("holdingAccountIndicator"));
        formBean.putValue("bucketFK", investmentPageBean.getValue("bucketFK"));
        formBean.putValue("hfInvestmentFK", investmentPageBean.getValue("hfInvestmentFK"));

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return CONTRACT_TRANS_INVESTMENT_DIALOG;
    }

    protected String showPayeeDialog(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
        String segmentFK = formBean.getValue("segmentFK");
        String rowId = formBean.getValue("rowId");
        String selectedSegmentPK = formBean.getValue("selectedSegmentPK");

        formBean.putValue("segmentFK", segmentFK);
        String transactionType = appReqBlock.getReqParm("transactionType");
        formBean.putValue("transactionType", transactionType);
        formBean.putValue("rowId", rowId);
        formBean.putValue("selectedSegmentPK", selectedSegmentPK);

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);
        appReqBlock.getHttpSession().setAttribute("clientDetailVOs", null);
        appReqBlock.getHttpSession().setAttribute("selectedClientDetailVO", null);
        appReqBlock.getHttpSession().setAttribute("selectedAllocationPercent", null);
        appReqBlock.getHttpSession().setAttribute("selectedEffectiveDate", null);


        return CONTRACT_TRANS_PAYEE_DIALOG;
    }

    protected String showPayeeDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        String key = formBean.getValue("key");
        String transactionId = formBean.getValue("transactionId");
        String optionId = formBean.getValue("optionId");
        String filterMessage = formBean.getValue("filterMessage");

        SessionBean payeeOverrides = appReqBlock.getSessionBean("contractPayeeOverrides");

        PageBean payeePageBean = payeeOverrides.getPageBean(key);

        payeePageBean.putValue("filterMessage", filterMessage);
        appReqBlock.getHttpServletRequest().setAttribute("formBean", payeePageBean);
        appReqBlock.getHttpServletRequest().setAttribute("transactionId", transactionId);
        appReqBlock.getHttpServletRequest().setAttribute("optionId", optionId);

        return CONTRACT_TRANS_PAYEE_DIALOG;
    }

    protected String showChargeDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        String key = appReqBlock.getFormBean().getValue("key");

        SessionBean chargeOverrides = appReqBlock.getSessionBean("contractChargeOverrides");

        PageBean chargeBean = chargeOverrides.getPageBean(key);

        appReqBlock.getHttpServletRequest().setAttribute("formBean", chargeBean);

        return CONTRACT_TRANS_CHARGE_DIALOG;
    }

    protected String showRiderDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        String optionCode = "";

        PageBean formBean = appReqBlock.getFormBean();
        SessionBean riders = appReqBlock.getSessionBean("contractRiders");

        //Set from the rider page
        String optionCodePK = formBean.getValue("optionCodePK");
        String riderNumber = Util.initString(formBean.getValue("riderNumber"), "1");

        //Set from the main page
        String selectedOptionId = formBean.getValue("selectedOptionId");
        String key = riderNumber + "_" + selectedOptionId;

        Map riderPageBeansMap = riders.getPageBeans();
        PageBean riderPageBean = (PageBean) riderPageBeansMap.get(key);

        if (optionCodePK.equals(""))
        {
            if (riderPageBean == null)
            {
                optionCodePK = formBean.getValue("optionId");
            }
            else
            {
                optionCodePK = riderPageBean.getValue("optionCodePK");
            }
        }

        //  Came from rider page
        optionCode = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(optionCodePK)).getCode();

        PageBean baseBean = appReqBlock.getSessionBean("contractBase").getPageBean("contractBase");

        String batchContractSetupFK = Util.initString(baseBean.getValue("batchContractSetupFK"), "0");
        String insuredRelationToEmp = Util.initString(appReqBlock.getSessionBean("contractMainSessionBean").getValue("insuredRelationToEmp"), null);
        String increaseOptionStatus = getCaseProductUnderwriting(appReqBlock, batchContractSetupFK, optionCode, insuredRelationToEmp);

        baseBean.putValue("increaseOptionStatus", increaseOptionStatus);

        //  Load the contract's form bean regardless of which page needs to be displayed
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        contractMainSessionBean.putPageBean("formBean", baseBean);

        //  Get the option code from the contract
        String contractOptionCode = baseBean.getValue("optionId");

        if (optionCode.equalsIgnoreCase(contractOptionCode))
        {
            String productType = checkProductType(optionCode);
            String mainReturnPage = getMainReturnPage(productType);

            return mainReturnPage;
            }
            else
            {
            //  The selected item is a rider, load the rider's formBean and display the rider page
            PageBean riderBean = appReqBlock.getSessionBean("contractRiders").getPageBean(optionCode);

//            SessionBean contractRidersSessionBean = appReqBlock.getSessionBean("contractRidersSessionBean");
            appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("riderFormBean", riderBean);

            return CONTRACT_RIDERS;
        }
    }

    protected String cancelContractNonPayeeOrPayee(AppReqBlock appReqBlock)
    {
//        SessionBean contractClientSessionBean = appReqBlock.getSessionBean("contractClientSessionBean");
        SessionBean clients = appReqBlock.getSessionBean("contractClients");

        String selectedClientId = appReqBlock.getFormBean().getValue("clientId");
        String selectedOptionId = appReqBlock.getFormBean().getValue("optionId");
        String selectedRelationship = appReqBlock.getFormBean().getValue("relationship");
//        String selectedClientRoleFK = appReqBlock.getFormBean().getValue("clientRoleFK");

        PageBean clientBean = clients.getPageBean(selectedClientId);

        // prepare to use this bean as a formBean
        clientBean.putValue("relationship", selectedRelationship);
        clientBean.putValue("optionId", selectedOptionId);

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("clientFormBean", clientBean);

        return CONTRACT_NON_PAYEE;
    }

//    private ClientDetailVO checkClientExistence(AppReqBlock appReqBlock, long clientDetailPK) throws Exception
//    {
//        client.business.Lookup clientLookup = new client.component.LookupComponent();
//
//        ClientDetailVO[] clientDetailVO = clientLookup.findByClientPK(clientDetailPK, false, null);
//
//        if (clientDetailVO != null)
//        {
//            return clientDetailVO[0];
//        }
//
//        else
//        {
//            return null;
//        }
//    }

    // Returns a pageBean populated form the dB (if it exists), or null
    // if the client does not exist.
    // The PageBean returned does NOT have an optionId or relationship
    // associated with it.
//    private PageBean getClientInfoFromDB(AppReqBlock appReqBlock, String clientId) throws Exception
//    {
//        client.business.Lookup clientLookup = new client.component.LookupComponent();
//
//        ClientDetailVO[] clientDetailVO = clientLookup.getClientByClientId(clientId);
//
//        PageBean pageBean = new PageBean();
//
//        if ((clientDetailVO != null) && (clientDetailVO.length > 0))
//        {
//            TaxInformationVO[] taxInformationVO = clientDetailVO[0].getTaxInformationVO();
//
//            pageBean.putValue("clientId", clientId);
//            pageBean.putValue("lastName", clientDetailVO[0].getLastName());
//            pageBean.putValue("firstName", clientDetailVO[0].getFirstName());
//            pageBean.putValue("middleName", clientDetailVO[0].getMiddleName());
//            pageBean.putValue("corporateName", clientDetailVO[0].getCorporateName());
//            pageBean.putValue("prefix", clientDetailVO[0].getNamePrefix());
//
//            EDITDate dateOfBirth = new EDITDate(clientDetailVO[0].getBirthDate());
//
//            pageBean.putValue("dobYear", dateOfBirth.getFormattedYear());
//            pageBean.putValue("dobMonth", dateOfBirth.getFormattedMonth());
//            pageBean.putValue("dobDay", dateOfBirth.getFormattedDay());
//
//            if ((taxInformationVO != null) && (taxInformationVO.length > 0))
//            {
//                String citizenshipInd = taxInformationVO[0].getCitizenshipIndCT();
//
//                if (citizenshipInd.equalsIgnoreCase("Y"))
//                {
//                    pageBean.putValue("usCitizenInd", "checked");
//                }
//
//                else
//                {
//                    pageBean.putValue("usCitizenInd", "unchecked");
//                }
//            }
//
//            String genderId = clientDetailVO[0].getGenderCT();
//            pageBean.putValue("genderId", genderId);
//
//            return pageBean;
//        }
//        else
//        {
//            return null;
//        }
//    }

    private void savePreviousPageFormBean(AppReqBlock appReqBlock, String prevPage) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        PageBean formBean = appReqBlock.getFormBean();

        if (prevPage.equals(CONTRACT_TRAD_MAIN) || prevPage.equals(CONTRACT_UNIVERSAL_LIFE_MAIN) || prevPage.equals(CONTRACT_AH_MAIN) ||
        		prevPage.equals(CONTRACT_LIFE_MAIN) || prevPage.equals(CONTRACT_MAIN) || prevPage.equals(CONTRACT_DEFERRED_ANNUITY_MAIN))
        {
            saveMainPageFields(formBean, codeTableWrapper);
            appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("formBean", formBean);
        }
        if (prevPage.equals(CONTRACT_INVESTMENTS))
        {
            appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("investmentFormBean", appReqBlock.getFormBean());
        }
        else if (prevPage.equals(CONTRACT_NON_PAYEE) || prevPage.equals(CONTRACT_PAYEE) || prevPage.equals(CONTRACT_INSURED))
        {
            String clientRoleFK = formBean.getValue("clientRoleFK");
            String relationToIns = formBean.getValue("relationToIns");
            String relationToEmp = formBean.getValue("relationToEmp");
            String phoneAuth = formBean.getValue("phoneAuth");
            String classType = Util.initString(formBean.getValue("classType"), "");
//            String tableRating = Util.initString(formBean.getValue("tableRating"), "");
            String payorOf = formBean.getValue("payorOf");
            String disbAddressType = formBean.getValue("disbAddressType");
            String corrAddressType = formBean.getValue("corrAddressType");
            String terminationReason = formBean.getValue("terminationReason");
            String authorizedSignatureCT = formBean.getValue("authorizedSignatureCT");

            if (Util.isANumber(relationToIns))
            {
                relationToIns = codeTableWrapper.getCodeTableEntry(Long.parseLong(relationToIns)).getCode();
            }
            else
            {
                relationToIns = "";
            }

            if (Util.isANumber(relationToEmp))
            {
                relationToEmp = codeTableWrapper.getCodeTableEntry(Long.parseLong(relationToEmp)).getCode();
            }
            else
            {
                relationToEmp = Util.initString(relationToEmp, "");
            }

            if (Util.isANumber(phoneAuth))
            {
                phoneAuth = codeTableWrapper.getCodeTableEntry(Long.parseLong(phoneAuth)).getCode();
            }
            else
            {
                phoneAuth = "";
            }

            if (Util.isANumber(classType))
            {
                classType = codeTableWrapper.getCodeTableEntry(Long.parseLong(classType)).getCode();
            }
            else if (classType.equalsIgnoreCase("Please Select"))
            {
                classType = "";
            }

            if (Util.isANumber(disbAddressType))
            {
                disbAddressType = codeTableWrapper.getCodeTableEntry(Long.parseLong(disbAddressType)).getCode();
            }
            else
            {
                disbAddressType = "";
            }

            if (Util.isANumber(corrAddressType))
            {
                corrAddressType = codeTableWrapper.getCodeTableEntry(Long.parseLong(corrAddressType)).getCode();
            }
            else
            {
                corrAddressType = "";
            }

            if (Util.isANumber(payorOf))
            {
                payorOf = codeTableWrapper.getCodeTableEntry(Long.parseLong(payorOf)).getCode();
            }
            else
            {
                payorOf = "";
            }

            if (Util.isANumber(terminationReason))
            {
                terminationReason = codeTableWrapper.getCodeTableEntry(Long.parseLong(terminationReason)).getCode();
            }
            else
            {
                terminationReason = "";
            }

            String ratedGender = Util.initString(formBean.getValue("ratedGender"), "");

            if (Util.isANumber(ratedGender))
            {
                ratedGender = codeTableWrapper.getCodeTableEntry(Long.parseLong(ratedGender)).getCode();
            }
            else if (ratedGender.equalsIgnoreCase("Please Select"))
            {
                ratedGender = "";
            }

            String underwritingClass = Util.initString(formBean.getValue(("underwritingClass")), "");

            if (Util.isANumber(underwritingClass))
            {
                underwritingClass = codeTableWrapper.getCodeTableEntry(Long.parseLong(underwritingClass)).getCode();
            }
            else if (underwritingClass.equalsIgnoreCase("Please Select"))
            {
                underwritingClass = "";
            }

            if (Util.isANumber(authorizedSignatureCT))
            {
                authorizedSignatureCT = codeTableWrapper.getCodeTableEntry(Long.parseLong(authorizedSignatureCT)).getCode();
            }
            else
            {
                authorizedSignatureCT = "";
            }

            formBean.putValue("relationToIns", relationToIns);
            formBean.putValue("relationToEmp", relationToEmp);
            formBean.putValue("phoneAuth", phoneAuth);
            formBean.putValue("classType", classType);
            formBean.putValue("disbAddressType", disbAddressType);
            formBean.putValue("corrAddressType", corrAddressType);
            formBean.putValue("payorOf", payorOf);
            formBean.putValue("ratedGender", ratedGender);
            formBean.putValue("underwritingClass", underwritingClass);
            formBean.putValue("terminationReason", terminationReason);
            formBean.putValue("authorizedSignatureCT", authorizedSignatureCT);

            boolean disbAddressTypeFound = false;
            boolean corrAddressTypeFound = false;

            if (!disbAddressType.equals("") || !corrAddressType.equals(""))
            {
                role.business.Lookup roleLookup = new role.component.LookupComponent();
                List clientVOInclusionList = new ArrayList();
                clientVOInclusionList.add(ClientDetailVO.class);
                clientVOInclusionList.add(ClientAddressVO.class);

                ClientRoleVO clientRoleVO = roleLookup.composeClientRoleVO(Long.parseLong(clientRoleFK), clientVOInclusionList);
                ClientAddressVO[] clientAddresses = ((ClientDetailVO) clientRoleVO.getParentVO(ClientDetailVO.class)).getClientAddressVO();

                if (clientAddresses != null)
                {
                    if (!disbAddressType.equals(""))
                    {
                        for (int i = 0; i < clientAddresses.length; i++)
                        {
                            if (clientAddresses[i].getAddressTypeCT().equals(disbAddressType))
                            {
                                disbAddressTypeFound = true;

                                break;
                            }
                        }
                    }
                    else
                    {
                        disbAddressTypeFound = true;
                    }

                    if ((corrAddressType != null) && !corrAddressType.equals(""))
                    {
                        for (int i = 0; i < clientAddresses.length; i++)
                        {
                            if (clientAddresses[i].getAddressTypeCT().equals(corrAddressType))
                            {
                                corrAddressTypeFound = true;

                                break;
                            }
                        }
                    }
                    else
                    {
                        corrAddressTypeFound = true;
                    }

                    if (!disbAddressTypeFound)
                    {
                        appReqBlock.getHttpServletRequest().setAttribute("clientMessage", "Disbursement Address Type Not Found For Agent");
                    }

                    else if (!corrAddressTypeFound)
                    {
                        appReqBlock.getHttpServletRequest().setAttribute("clientMessage", "Correspondence Address Type Not Found For Agent");
                    }
                }
            }

            appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("clientFormBean", formBean);
        }
        else if (prevPage == CONTRACT_HISTORY)
        {
            appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("historyFormBean", appReqBlock.getFormBean());
        }
        else if (prevPage == CONTRACT_TRANSFER_FUND)
        {
        }
    }

    private void saveMainPageFields(PageBean formBean, CodeTableWrapper codeTableWrapper)
    {
        String optionId = Util.initString(formBean.getValue("optionId"), "");

//        if (!optionId.equals("") && !optionId.equals("Please Select"))
//        {
//            optionId = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionId)).getCode();
//        }

        String issueState = Util.initString(formBean.getValue("areaId"), "");
        String changeEffectiveDate = Util.initString(formBean.getValue("changeEffectiveDate"), "");

//        if (!issueState.equals("") && !issueState.equals("Please Select"))
//        {
//            issueState = codeTableWrapper.getCodeTableEntry(Long.parseLong(issueState)).getCode();
//        }

        String premiumTaxSitusOverride = Util.initString(formBean.getValue("premiumTaxSitusOverride"), "");

         if (Util.isANumber(premiumTaxSitusOverride))
         {
             premiumTaxSitusOverride = codeTableWrapper.getCodeTableEntry(Long.parseLong(premiumTaxSitusOverride)).getCode();
         }
         else
         {
             premiumTaxSitusOverride = "";
         }

        String qualifiedType = Util.initString(formBean.getValue("qualifiedType"), "");

        if (Util.isANumber(qualifiedType))
        {
            qualifiedType = codeTableWrapper.getCodeTableEntry(Long.parseLong(qualifiedType)).getCode();
        }

        String qualNonQual = Util.initString(formBean.getValue("qualNonQual"), "");

        if (Util.isANumber(qualNonQual))
        {
            qualNonQual = codeTableWrapper.getCodeTableEntry(Long.parseLong(qualNonQual)).getCode();
        }

        String frequency = Util.initString(formBean.getValue("frequencyId"), "");

        if (!frequency.equals("") && !frequency.equals("Please Select"))
        {
            frequency = codeTableWrapper.getCodeTableEntry(Long.parseLong(frequency)).getCode();
        }

        String statusChange = Util.initString(formBean.getValue("statusChange"), "");

        if (!statusChange.equals("") && !statusChange.equals("Please Select"))
        {
            statusChange = codeTableWrapper.getCodeTableEntry(Long.parseLong(statusChange)).getCode();
        }

        String deathBeneOption = Util.initString(formBean.getValue("deathBeneOption"), "");
        String nonForfeitureOption = Util.initString(formBean.getValue("nonForfeitureOption"), "");
        String ratedGenderCT = Util.initString(formBean.getValue("ratedGenderCT"), null);
        
        String underwritingClass = Util.initString(formBean.getValue("underwritingClass"), null);

        String groupPlan = Util.initString(formBean.getValue("groupPlan"), null);
        
        if (Util.isANumber(deathBeneOption))
        {
            deathBeneOption = codeTableWrapper.getCodeTableEntry(Long.parseLong(deathBeneOption)).getCode();
        }
        else if (deathBeneOption.equalsIgnoreCase("please select"))
        {
            deathBeneOption = "";
        }

        String mecStatus = Util.initString(formBean.getValue("mecStatus"), "");
        if (Util.isANumber(mecStatus))
        {
            mecStatus = codeTableWrapper.getCodeTableEntry(Long.parseLong(mecStatus)).getCode();
        }

        String authorizedSignatureCT = Util.initString(formBean.getValue("authorizedSignatureCT"), "");

        if (Util.isANumber(authorizedSignatureCT))
        {
            authorizedSignatureCT = codeTableWrapper.getCodeTableEntry(Long.parseLong(authorizedSignatureCT)).getCode();
        }

        //String policyDeliveryDateTemp = formBean.getValue("policyDeliveryDate");
        //if(policyDeliveryDateTemp != null && !policyDeliveryDateTemp.equals(""))
        //{
        //    policyDeliveryDateTemp = new EDITDate(policyDeliveryDateTemp).getFormattedDate();
        //}
        formBean.putValue("optionId", optionId);
        formBean.putValue("areaId", issueState);
        formBean.putValue("qualifiedType", qualifiedType);
        formBean.putValue("qualNonQual", qualNonQual);
        formBean.putValue("frequencyId", frequency);
        formBean.putValue("statusChange", statusChange);
        formBean.putValue("deathBeneOption", deathBeneOption);
        formBean.putValue("nonForfeitureOption", nonForfeitureOption);
        formBean.putValue("ratedGenderCT", ratedGenderCT);
        formBean.putValue("underwritingclass", underwritingClass);
        formBean.putValue("groupPlan", groupPlan);
        formBean.putValue("option7702", formBean.getValue("option7702"));
        formBean.putValue("term", formBean.getValue("term"));
        formBean.putValue("startNew7PayIndicatorStatus", formBean.getValue("startNew7PayIndicatorStatus"));
        formBean.putValue("policyDeliveryDate", formBean.getValue("policyDeliveryDate"));
        formBean.putValue("chargeDeductDivisionIndStatus", formBean.getValue("chargeDeductDivisionIndStatus"));
        formBean.putValue("commitmentIndicatorStatus", formBean.getValue("commitmentIndicatorStatus"));
        formBean.putValue("commitmentAmount", formBean.getValue("commitmentAmount"));
        formBean.putValue("terminationDate", formBean.getValue("terminationDate"));
        formBean.putValue("creationDate", formBean.getValue("creationDate"));
        formBean.putValue("pointInScaleIndStatus", formBean.getValue("pointInScaleIndStatus"));
        formBean.putValue("MECDate", formBean.getValue("MECDate"));
        formBean.putValue("faceAmount", formBean.getValue("faceAmount"));
        formBean.putValue("tamraStartDate", formBean.getValue("tamraStartDate"));
        formBean.putValue("lifePK", formBean.getValue("lifePK"));
        formBean.putValue("guidelineSinglePrem", formBean.getValue("guidelineSinglePrem"));
        formBean.putValue("guidelineLevelPrem", formBean.getValue("guidelineLevelPrem"));
        formBean.putValue("tamra", formBean.getValue("tamra"));
        formBean.putValue("costBasis", formBean.getValue("costBasis"));
        formBean.putValue("pendingDBOChangeIndStatus", formBean.getValue("pendingDBOChangeIndStatus"));
        formBean.putValue("mecGuidelineSinglePremium", formBean.getValue("mecGuidelineSinglePremium"));
        formBean.putValue("mecGuidelineLevelPremium", formBean.getValue("mecGuidelineLevelPremium"));
        formBean.putValue("cumGuidelineLevelPremium", formBean.getValue("cumGuidelineLevelPremium"));
        formBean.putValue("maxNetAmountAtRisk", formBean.getValue("maxNetAmountAtRisk"));
        formBean.putValue("mecStatus", mecStatus);
        formBean.putValue("dialableSalesLoadPct", formBean.getValue("dialableSalesLoadPct"));
        formBean.putValue("totalFaceAmount", Util.initString(formBean.getValue("totalFaceAmount"), new EDITBigDecimal().toString())); // Some products don't even have this variable.
        formBean.putValue("paidToDate", formBean.getValue("paidToDate"));
        formBean.putValue("lapsePendingDate", formBean.getValue("lapsePendingDate"));
        formBean.putValue("lapseDate", formBean.getValue("lapseDate"));
        formBean.putValue("deathProceedAmount", formBean.getValue("deathProceedAmount"));
        formBean.putValue("deathProceedsRemaining", formBean.getValue("deathProceedsRemaining"));
        formBean.putValue("dateOfDeathValue", formBean.getValue("dateOfDeathValue"));
        formBean.putValue("deathProceedDate", formBean.getValue("deathProceedDate"));
        formBean.putValue("caseTrackingProcess", formBean.getValue("caseTrackingProcess"));
        formBean.putValue("suppOriginalContractNumber", formBean.getValue("suppOriginalContractNumber"));
        formBean.putValue("openClaimEndDate", formBean.getValue("openClaimEndDate"));
        formBean.putValue("chargeCodeStatus", formBean.getValue("chargeCodeStatus"));
        formBean.putValue("premiumTaxSitusOverride", premiumTaxSitusOverride);
        formBean.putValue("rothConversionStatus", formBean.getValue("rothConversionStatus"));
        formBean.putValue("contractType", formBean.getValue("contractType"));
        formBean.putValue("units", formBean.getValue("units"));
        formBean.putValue("unitsChangeEffectiveDate", formBean.getValue("unitsChangeEffectiveDate"));
        formBean.putValue("commissionPhaseID", formBean.getValue("commissionPhaseID"));
        formBean.putValue("commissionPhaseOverride", formBean.getValue("commissionPhaseOverride"));
        formBean.putValue("authorizedSignatureCT", authorizedSignatureCT);
        formBean.putValue("applicationState", formBean.getValue("applicationState"));
        formBean.putValue("originalStateCT", formBean.getValue("originalStateCT"));
        formBean.putValue("applicationNumber", formBean.getValue("applicationNumber"));
        formBean.putValue("memberOfContractGroup", formBean.getValue("memberOfContractGroup"));
        formBean.putValue("departmentLocationFK", formBean.getValue("departmentLocationFK"));
        formBean.putValue("priorContractGroupFK", formBean.getValue("priorContractGroupFK"));
        formBean.putValue("originalContractGroupFK", formBean.getValue("originalContractGroupFK"));
        formBean.putValue("priorPRDDue", formBean.getValue("priorPRDDue"));
        formBean.putValue("billScheduleChangeType", formBean.getValue("billScheduleChangeType"));
        formBean.putValue("annualPremium", formBean.getValue("annualPremium"));
        formBean.putValue("dateInEffectDate", formBean.getValue("dateInEffectDate"));
        formBean.putValue("postIssueStatus", formBean.getValue("postIssueStatus"));
        formBean.putValue("issueStateORInd", formBean.getValue("issueStateORInd"));
        formBean.putValue("scheduledTerminationDate", formBean.getValue("scheduledTerminationDate"));
        formBean.putValue("deductionAmountOverride", formBean.getValue("deductionAmountOverride"));
        formBean.putValue("deductionAmountEffectiveDate", formBean.getValue("deductionAmountEffectiveDate"));
        formBean.putValue("expiryDate", formBean.getValue("expiryDate"));
        formBean.putValue("sequence", formBean.getValue("sequence"));
        formBean.putValue("location", formBean.getValue("location"));
        formBean.putValue("originalUnits", formBean.getValue("originalUnits"));
        formBean.putValue("indivAnnPremium", formBean.getValue("indivAnnPremium"));
        formBean.putValue("changeEffectiveDate", formBean.getValue("changeEffectiveDate"));
    }

    // Only invoked when tabbing off of the contractMain
    protected void saveOwnerJointOwnerToSummary(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean clients = appReqBlock.getSessionBean("contractClients");

        // Owner First
        String ownerId = appReqBlock.getFormBean().getValue("ownerId");
        String optionId = appReqBlock.getFormBean().getValue("optionId");

        PageBean ownerPageBean = clients.getPageBean(ownerId);

        ownerPageBean.removeFromValues("relationships", 0);
        ownerPageBean.addToValues("relationships", "annuitantOwner");

        ownerPageBean.removeFromValues("optionIds", 0);
        ownerPageBean.addToValues("optionIds", optionId, 0);

        // Joint Owner Second (if it exists)
        String jointOwnerId = appReqBlock.getFormBean().getValue("jointOwnerId");

        if (!jointOwnerId.equals(""))
        {
            PageBean jointOwnerPageBean = clients.getPageBean(jointOwnerId);

            jointOwnerPageBean.removeFromValues("relationships", 0);
            jointOwnerPageBean.addToValues("relationships", "annuitantOwner");

            jointOwnerPageBean.removeFromValues("optionIds", 0);
            jointOwnerPageBean.addToValues("optionIds", optionId, 0);
        }
    }

    protected String autoGenerateContractNumber(AppReqBlock appReqBlock) throws Exception
    {
        Contract contractComp = new contract.component.ContractComponent();
        PageBean formBean = appReqBlock.getFormBean();

        String productStructure = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("companyStructure");

        StringTokenizer st = new StringTokenizer(productStructure);

        String businessContract = "";

        // Grab the last token by just looping through to the end
        while (st.hasMoreTokens())
        {
            businessContract = st.nextToken();
        }

        String contractNumber = contractComp.autoGenerateContractNumber(businessContract);

        formBean.putValue("contractNumber", contractNumber);

        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return CONTRACT_NUMBER_DIALOG;
    }

    private String restoreContractFromBackup(AppReqBlock appReqBlock) throws Exception
    {
        String contractId = appReqBlock.getSessionBean("contractMainSessionBean").getValue("contractId");

        appReqBlock.getFormBean().putValue("contractId", contractId);

        String optionId = "";

        if (!contractId.equals(""))
        {
            contract.business.Lookup contractLookup = new contract.component.LookupComponent();
            contract.business.Contract contractComp = new contract.component.ContractComponent();

            List voInclusionList = setListForSegmentVO();

            SegmentVO segmentPKVO = contractLookup.composeSegmentVO(contractId, voInclusionList);

            PremiumDueVO[] premiumDueVOs = segmentPKVO.getPremiumDueVO();
            if (premiumDueVOs != null)
            {
                appReqBlock.getHttpSession().setAttribute("premiumDueVOs", premiumDueVOs);
            }

            long segmentPK = segmentPKVO.getSegmentPK();
            appReqBlock.getFormBean().putValue("segmentPK", segmentPK + "");

            optionId = segmentPKVO.getOptionCodeCT();

            UserSession userSession = appReqBlock.getUserSession();

            userSession.unlockSegment();

            SegmentVO segmentVO = contractComp.restoreSegment(segmentPK);

            if (segmentVO != null)
            {
                contractComp.deleteSegment(segmentVO);
                contractComp.restoreSegmentFromBackup(segmentVO);
                contractComp.deleteSegmentFromBackup(segmentPK);
                clearAllContractSessions(appReqBlock);
                loadContract(appReqBlock);
            }
        }

        String productType = checkProductType(optionId);
        String mainReturnPage = getMainReturnPage(productType);

        return mainReturnPage;
        }

    private String addTransferFund(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        FormBean formBean = appReqBlock.getFormBean();
        String filterType = formBean.getValue("filterType");
//        String filterValue = formBean.getValue("filterValue");
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = contractMainSessionBean.getValue("companyStructureId");

//        String contractNumber = "";

        if (filterType.equalsIgnoreCase("Contract Number"))
        {
//            contractNumber = filterValue;

            if ((productStructureId != null) && !productStructureId.equals(""))
            {
                UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
                appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
            }
        }

        String optionId = formBean.getValue("optionId");

        if (Util.isANumber(optionId))
        {
            optionId = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionId)).getCode();
        }

        formBean.putValue("optionId", optionId);

        PageBean initializedFormBean = new PageBean();

        String scrollingTrxPageSize = appReqBlock.getFormBean().getValue("scrollingTrxPageSize");
        String beginScrollingTrxPK = appReqBlock.getFormBean().getValue("beginScrollingTrxPK");
        String endScrollingTrxPK = appReqBlock.getFormBean().getValue("endScrollingTrxPK");

        appReqBlock.getSessionBean("contractInvestmentOverrides").putPageBean("formBean", initializedFormBean);
        appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", formBean);

        appReqBlock.getHttpServletRequest().setAttribute("scrollingTrxPageSize", scrollingTrxPageSize);
        appReqBlock.getHttpServletRequest().setAttribute("beginScrollingTrxPK", beginScrollingTrxPK);
        appReqBlock.getHttpServletRequest().setAttribute("endScrollingTrxPK", endScrollingTrxPK);

        return CONTRACT_TRANSFER;
    }

    private String saveTransferFund(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        PageBean formBean = appReqBlock.getFormBean();
        String filterType = formBean.getValue("filterType");
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = contractMainSessionBean.getValue("companyStructureId");

        if (filterType.equalsIgnoreCase("Contract Number"))
        {
            if ((productStructureId != null) && !productStructureId.equals(""))
            {
                UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
                appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
            }
        }

        String scrollingTrxPageSize = appReqBlock.getFormBean().getValue("scrollingTrxPageSize");
        String beginScrollingTrxPK = appReqBlock.getFormBean().getValue("beginScrollingTrxPK");
        String endScrollingTrxPK = appReqBlock.getFormBean().getValue("endScrollingTrxPK");

        String transactionFK = formBean.getValue("editTrxPK");
        String contractId = formBean.getValue("contractId");
        String transactionType = formBean.getValue("transactionType");
        String sequenceNumber = formBean.getValue("sequenceNumber");
        String effectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("effectiveDate"));
        String processDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("processDate"));
        String optionId = formBean.getValue("optionId");
        optionId = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionId)).getCode();
        String reasonCode = formBean.getValue("reasonCode");
        if (Util.isANumber(reasonCode))
        {
            reasonCode = codeTableWrapper.getCodeTableEntry(Long.parseLong(reasonCode)).getCode();
        }

        String fromToIndicator = formBean.getValue("fromToIndicator");
        String investmentAllocOverridePK = formBean.getValue("investmentAllocationOverridePK");
        String fundFK = formBean.getValue("fundId");
        String allocationPct = formBean.getValue("allocationPercent");
        String allocationDollars = formBean.getValue("allocationDollars");
        String allocationUnits = formBean.getValue("allocationUnits");
        String hfStatus = formBean.getValue("hfStatus");
        String hfiaIndicator = formBean.getValue("hfiaIndicator");
        String holdingAccountIndicator = formBean.getValue("holdingAccountIndicator");
        String bucketFK = formBean.getValue("bucketFK");
        String hfInvestmentFK = formBean.getValue("hfInvestmentFK");
        productStructureId = formBean.getValue("companyStructureId");

        String key = investmentAllocOverridePK + "_" + fundFK;

        PageBean investmentBean = new PageBean();
        investmentBean.putValue("investmentAllocationOverridePK", investmentAllocOverridePK);
        investmentBean.putValue("fundId", fundFK);
        investmentBean.putValue("editTrxPK", transactionFK);
        investmentBean.putValue("fromToIndicator", fromToIndicator);
        investmentBean.putValue("allocationPercent", allocationPct);
        investmentBean.putValue("allocationDollars", allocationDollars);
        investmentBean.putValue("allocationUnits", allocationUnits);
        investmentBean.putValue("hfStatus", hfStatus);
        investmentBean.putValue("hfiaIndicator", hfiaIndicator);
        investmentBean.putValue("holdingAccountIndicator", holdingAccountIndicator);
        investmentBean.putValue("bucketFK", bucketFK);
        investmentBean.putValue("hfInvestmentFK", hfInvestmentFK);
        if (investmentAllocOverridePK.equals(""))
        {
            investmentBean.putValue("status", "new");
        }
        else
        {
            investmentBean.putValue("status", "modified");
        }

        investmentBean.putValue("key", key);

        if (!fromToIndicator.equals("F") && !fromToIndicator.equals("T"))
        {
            appReqBlock.getSessionBean("contractTransactionSessionBean").putValue("transactionMessage", "From/To Must Be Selected");
            appReqBlock.getSessionBean("contractInvestmentOverrides").putPageBean("formBean", investmentBean);
        }
        else
        {
            appReqBlock.getSessionBean("contractInvestmentOverrides").putPageBean(key, investmentBean);
        }

        formBean.putValue("transactionId", transactionFK);
        formBean.putValue("contractId", contractId);
        formBean.putValue("companyStructureId", productStructureId);
        formBean.putValue("transactionType", transactionType);
        formBean.putValue("sequenceNumber", sequenceNumber);
        formBean.putValue("effectiveDate", DateTimeUtil.formatYYYYMMDDToMMDDYYYY(effectiveDate));
        formBean.putValue("processDate", DateTimeUtil.formatYYYYMMDDToMMDDYYYY(processDate));
        formBean.putValue("optionId", optionId);
        formBean.putValue("reasonCode", reasonCode);

        appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", formBean);
        appReqBlock.getHttpServletRequest().setAttribute("scrollingTrxPageSize", scrollingTrxPageSize);
        appReqBlock.getHttpServletRequest().setAttribute("beginScrollingTrxPK", beginScrollingTrxPK);
        appReqBlock.getHttpServletRequest().setAttribute("endScrollingTrxPK", endScrollingTrxPK);

        return CONTRACT_TRANSFER;
    }

    private String cancelTransferFund(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        FormBean formBean = appReqBlock.getFormBean();
        String filterType = formBean.getValue("filterType");
//        String filterValue = formBean.getValue("filterValue");
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = contractMainSessionBean.getValue("companyStructureId");

//        String contractNumber = "";

        if (filterType.equalsIgnoreCase("Contract Number"))
        {
//            contractNumber = filterValue;

            if ((productStructureId != null) && !productStructureId.equals(""))
            {
                UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
                appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
            }
        }

        String optionId = formBean.getValue("optionId");

        if (Util.isANumber(optionId))
        {
            optionId = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionId)).getCode();
        }

        formBean.putValue("optionId", optionId);

        PageBean initializedFormBean = new PageBean();

        String scrollingTrxPageSize = appReqBlock.getFormBean().getValue("scrollingTrxPageSize");
        String beginScrollingTrxPK = appReqBlock.getFormBean().getValue("beginScrollingTrxPK");
        String endScrollingTrxPK = appReqBlock.getFormBean().getValue("endScrollingTrxPK");

        appReqBlock.getSessionBean("contractInvestmentOverrides").putPageBean("formBean", initializedFormBean);
        appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", formBean);

        appReqBlock.getHttpServletRequest().setAttribute("scrollingTrxPageSize", scrollingTrxPageSize);
        appReqBlock.getHttpServletRequest().setAttribute("beginScrollingTrxPK", beginScrollingTrxPK);
        appReqBlock.getHttpServletRequest().setAttribute("endScrollingTrxPK", endScrollingTrxPK);

        return CONTRACT_TRANSFER;
    }

    private String deleteTransferFund(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        FormBean formBean = appReqBlock.getFormBean();
        String filterType = formBean.getValue("filterType");
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = contractMainSessionBean.getValue("companyStructureId");

        if (filterType.equalsIgnoreCase("Contract Number"))
        {
            if ((productStructureId != null) && !productStructureId.equals(""))
            {
                UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
                appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
            }
        }

        String optionId = formBean.getValue("optionId");

        if (Util.isANumber(optionId))
        {
            optionId = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionId)).getCode();
        }

        formBean.putValue("optionId", optionId);

        String investmentAllocOverridePK = formBean.getValue("investmentAllocationOverridePK");
//        String editTrxPK = formBean.getValue("editTrxPK");
        String fundFK = formBean.getValue("fundId");

        String key = investmentAllocOverridePK + "_" + fundFK;
//        String key = fundFK;

        PageBean investmentBean = appReqBlock.getSessionBean("contractInvestmentOverrides").getPageBean(key);
        investmentBean.putValue("status", "deleted");

//        appReqBlock.getSessionBean("contractInvestmentOverrides").removePageBean(key);

        PageBean initializedFormBean = new PageBean();

        String scrollingTrxPageSize = appReqBlock.getFormBean().getValue("scrollingTrxPageSize");
        String beginScrollingTrxPK = appReqBlock.getFormBean().getValue("beginScrollingTrxPK");
        String endScrollingTrxPK = appReqBlock.getFormBean().getValue("endScrollingTrxPK");

        appReqBlock.getSessionBean("contractInvestmentOverrides").putPageBean("formBean", initializedFormBean);
        appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", formBean);

        appReqBlock.getHttpServletRequest().setAttribute("scrollingTrxPageSize", scrollingTrxPageSize);
        appReqBlock.getHttpServletRequest().setAttribute("beginScrollingTrxPK", beginScrollingTrxPK);
        appReqBlock.getHttpServletRequest().setAttribute("endScrollingTrxPK", endScrollingTrxPK);

        return CONTRACT_TRANSFER;
    }

    private String showTransferFundDetail(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        FormBean formBean = appReqBlock.getFormBean();
        String filterType = formBean.getValue("filterType");
//        String filterValue = formBean.getValue("filterValue");
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String productStructureId = contractMainSessionBean.getValue("companyStructureId");

        if (filterType.equalsIgnoreCase("Contract Number"))
        {
            if ((productStructureId != null) && !productStructureId.equals(""))
            {
                UIFilteredFundVO[] uiFilteredFundVOs = new UtilitiesForTran().buildUIFilteredFundVO(appReqBlock, productStructureId);
                appReqBlock.getHttpServletRequest().setAttribute("uiFilteredFundVOs", uiFilteredFundVOs);
            }
        }

        String optionId = formBean.getValue("optionId");

        if (Util.isANumber(optionId))
        {
            optionId = codeTableWrapper.getCodeTableEntry(Long.parseLong(optionId)).getCode();
        }

        formBean.putValue("optionId", optionId);

        String fundKey = formBean.getValue("fundKey");

        PageBean trxFundBean = appReqBlock.getSessionBean("contractInvestmentOverrides").getPageBean(fundKey);

        String scrollingTrxPageSize = appReqBlock.getFormBean().getValue("scrollingTrxPageSize");
        String beginScrollingTrxPK = appReqBlock.getFormBean().getValue("beginScrollingTrxPK");
        String endScrollingTrxPK = appReqBlock.getFormBean().getValue("endScrollingTrxPK");

        appReqBlock.getSessionBean("contractInvestmentOverrides").putPageBean("formBean", trxFundBean);
        appReqBlock.getSessionBean("contractTransactionSessionBean").putPageBean("formBean", formBean);

        appReqBlock.getHttpServletRequest().setAttribute("scrollingTrxPageSize", scrollingTrxPageSize);
        appReqBlock.getHttpServletRequest().setAttribute("beginScrollingTrxPK", beginScrollingTrxPK);
        appReqBlock.getHttpServletRequest().setAttribute("endScrollingTrxPK", endScrollingTrxPK);

        return CONTRACT_TRANSFER;
    }


    private String showSuspense(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("suspenses");
        appReqBlock.getHttpSession().removeAttribute("suspense");
        appReqBlock.getHttpSession().removeAttribute("clientDetailVOs");
        appReqBlock.getHttpSession().removeAttribute("refundRequested");
        appReqBlock.getHttpSession().removeAttribute("clientRequested");
        appReqBlock.getHttpSession().removeAttribute("suspenseTransferRows");
        String filterInd = Util.initString((String)appReqBlock.getHttpSession().getAttribute("filterSet"), "N");
        if (filterInd.equals("N"))
        {
            appReqBlock.getHttpSession().removeAttribute("fromDate");
            appReqBlock.getHttpSession().removeAttribute("toDate");
            appReqBlock.getHttpSession().removeAttribute("filterPeriod");
            appReqBlock.getHttpSession().removeAttribute("filterOperator");
            appReqBlock.getHttpSession().removeAttribute("filterUserNumber");
            appReqBlock.getHttpSession().removeAttribute("filterReasonCode");
        }

        String[] companies = getAuthorizedCompanies(appReqBlock);
        appReqBlock.getHttpServletRequest().setAttribute("companies", companies);

        new FilterSuspenseTableModel(appReqBlock);

        return CONTRACT_SUSPENSE;
    }

    private String showSuspenseDetail(AppReqBlock appReqBlock) throws Exception
    {
        String selectedSuspensePK = new FilterSuspenseTableModel(appReqBlock).getSelectedRowId();

        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", selectedSuspensePK);

        String[] companies = getAuthorizedCompanies(appReqBlock);

        appReqBlock.getHttpServletRequest().setAttribute("companies", companies);

        new FilterSuspenseTableModel(appReqBlock);

        return CONTRACT_SUSPENSE;
    }

    private String addOrCancelSuspenseEntry(AppReqBlock appReqBlock)
    {
        appReqBlock.getHttpSession().removeAttribute("suspense");

        String[] companies = getAuthorizedCompanies(appReqBlock);
        appReqBlock.getHttpServletRequest().setAttribute("companies", companies);

        new FilterSuspenseTableModel(appReqBlock);

        return CONTRACT_SUSPENSE;
    }

    private String saveSuspenseEntry(AppReqBlock appReqBlock) throws Exception
    {
        Suspense suspense = saveSuspenseChangesToSession(appReqBlock);

        EventUseCase eventUseCase = new EventUseCaseComponent();

        eventUseCase.saveSuspense(suspense);

        appReqBlock.getHttpSession().removeAttribute("suspense");

        return showSuspense(appReqBlock);
    }

    /**
     * Void the selected Suspense entry - it will no longer be available for use
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String voidSuspenseEntry(AppReqBlock appReqBlock) throws Exception
    {
        Suspense suspense = saveSuspenseChangesToSession(appReqBlock);

//        String suspensePK = appReqBlock.getReqParm("suspensePK");

        EventUseCase eventUseCase = new EventUseCaseComponent();

        String responseMessage = eventUseCase.voidSuspense(suspense);

        appReqBlock.getHttpServletRequest().setAttribute("responseMessage", responseMessage);

        return showSuspense(appReqBlock);
    }

    /**
     * Shows the RefundSuspenseDialog for refunding all/part of selected suspense entry
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String showRefundSuspenseDialog(AppReqBlock appReqBlock) throws Exception
    {
        String suspensePK = appReqBlock.getReqParm("suspensePK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);

        String suspenseClientInfoPK = appReqBlock.getFormBean().getValue("suspenseClientInfoPK");
        appReqBlock.getHttpServletRequest().setAttribute("suspenseClientInfoPK", suspenseClientInfoPK);

        String refundAmount = appReqBlock.getFormBean().getValue("amount");
        appReqBlock.getHttpSession().setAttribute("refundAmount", refundAmount);
        
        Suspense suspense = saveSuspenseChangesToSession(appReqBlock);
        
        CashBatchContract cashBatchContract = suspense.getCashBatchContract();
        
        String responseMessage = null;

        if (suspense.getPendingSuspenseAmount().isGT(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
        {
            responseMessage = "Suspense Cannot Be Refunded - Transaction Pending";
        }
        else if (suspense.getSuspenseAmount().isEQ(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
        {
            responseMessage = "Suspense Cannot Be Refunded - Suspense Amount Is Zero";
        }
        else if (cashBatchContract != null && cashBatchContract.getReleaseIndicator().equalsIgnoreCase(CashBatchContract.RELEASE_INDICATOR_PENDING))
        {
            responseMessage = "Suspense Should Be Deleted, Not Refunded - Cash Batch Has Not Been Released Yet";
        }
        
        if (responseMessage != null && !responseMessage.equals("")) {
        	appReqBlock.getHttpServletRequest().setAttribute("responseMessage", responseMessage);
            return showSuspense(appReqBlock);
        }

        appReqBlock.getHttpSession().setAttribute("refundRequested", "true");
        appReqBlock.getHttpSession().setAttribute("clientRequested", "false");

        appReqBlock.getHttpServletRequest().setAttribute("suspense", suspense);

        appReqBlock.getHttpSession().removeAttribute("clientDetailVOs");

        Segment segment = Segment.findByContractNumber(appReqBlock.getFormBean().getValue("userNumber"));
        
        String status = segment.getSegmentStatusCT();
        String statusType = segment.determineSegmentStatusType(segment, new EDITDate());
        if (statusType.equalsIgnoreCase(Segment.TERMINATED) || status.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_FROZEN))
        {
        	appReqBlock.getHttpSession().setAttribute("terminatedStatus", "true");
        }
        else
        {
        	appReqBlock.getHttpSession().setAttribute("terminatedStatus", "");
        }
        
        ClientDetail[] clientDetails = ClientDetail.findBy_SegmentPK_RoleType(new Long(segment.getSegmentPK()), ClientRole.ROLETYPECT_OWNER);
        if (clientDetails != null)
        {
        	String clientDetailPK = Long.toString(clientDetails[0].getClientDetailPK());

        	appReqBlock.setReqParm("selectedClientDetailPK", clientDetailPK);
        	
        	ClientDetailVO[] clientDetailVOs = {(ClientDetailVO) clientDetails[0].getVO()};
        	getCurrentAddressesForClients(clientDetailVOs);
        	appReqBlock.getHttpSession().setAttribute("clientDetailVOs", clientDetailVOs);
        	
        	return selectClientDetailForRefund(appReqBlock);
        }
        else
        {
        	return REFUND_SUSPENSE_DIALOG;
        }
    }

    /**
     *
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String selectClientDetailForRefund(AppReqBlock appReqBlock) throws Exception
    {
        String selectedClientDetailPK = appReqBlock.getReqParm("selectedClientDetailPK");
        String suspensePK = appReqBlock.getReqParm("suspensePK");

        Suspense suspense = Suspense.findByPK(new Long(suspensePK));
        appReqBlock.getHttpServletRequest().setAttribute("suspense", suspense);

        ClientDetailVO[] clientDetailVOs = (ClientDetailVO[])appReqBlock.getHttpSession().getAttribute("clientDetailVOs");
        ClientDetail clientDetail = null;
        ClientAddress clientAddress = null;

        if (clientDetailVOs != null)
        {
            long selectedClientKey = Long.parseLong(selectedClientDetailPK);
        for (int i = 0; i < clientDetailVOs.length; i++)
        {
                if (selectedClientKey == clientDetailVOs[i].getClientDetailPK())
                {
                    clientDetail = new ClientDetail(clientDetailVOs[i]);
                    if (clientDetailVOs[i].getClientAddressVOCount() > 0)
            {
                        clientAddress = new ClientAddress(clientDetailVOs[i].getClientAddressVO(0));
                    }
                }
            }
        }

        Preference preference = Preference.findByClientDetailFK(new Long(selectedClientDetailPK));

        appReqBlock.getHttpSession().setAttribute("clientDetail", clientDetail);
        appReqBlock.getHttpSession().setAttribute("clientAddress", clientAddress);
        appReqBlock.getHttpSession().setAttribute("preference", preference);

        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedClientDetailPK", selectedClientDetailPK);

        return REFUND_SUSPENSE_DIALOG;
    }

    /**
     * Refund all or part of the selected Suspsense entry
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String refundSuspense(AppReqBlock appReqBlock) throws Exception
    {
        String suspensePK = appReqBlock.getReqParm("suspensePK");
        Suspense suspense = Suspense.findByPK(new Long(suspensePK));
        appReqBlock.getHttpServletRequest().setAttribute("suspense", suspense);

        String refundRequested = Util.initString((String)appReqBlock.getHttpSession().getAttribute("refundRequested"), "");
        String clientRequested = Util.initString((String)appReqBlock.getHttpSession().getAttribute("clientRequested"), "");

        //The value ending up in the Suspense record will not be null when the primary Preference for the client, was selected.
        String disbursementSourceCT = Util.initString(appReqBlock.getReqParm("disbursementSource"), null);
        if (disbursementSourceCT != null && disbursementSourceCT.equalsIgnoreCase("Please Select"))
        {
            disbursementSourceCT = null;
        }
        Preference preference = (Preference)appReqBlock.getHttpSession().getAttribute("preference");
        if (preference != null)
        {
            if (!preference.getOverrideStatus().equalsIgnoreCase("P"))
            {
                disbursementSourceCT = null;
            }
        }

        //AddressType is the Suspense guides the Bank job to get the current Address of that type.
        String addressTypeCT = Util.initString(appReqBlock.getReqParm("addressType"), null);
        if (addressTypeCT != null && addressTypeCT.equalsIgnoreCase("Please Select"))
        {
            addressTypeCT = null;
        }


        //Refund processing addded the refundAmount to the page
        if (refundRequested.equalsIgnoreCase("true"))
        {
        String refundAmount = appReqBlock.getReqParm("refundAmount");
            String reasonCode = Util.initString(appReqBlock.getReqParm("reasonCode"), null);

        EventUseCase eventUseCase = new EventUseCaseComponent();

        suspense.setSuspenseAmount(suspense.getSuspenseAmount().subtractEditBigDecimal(refundAmount));
        suspense.setRefundAmount(suspense.getRefundAmount().addEditBigDecimal(new EDITBigDecimal(refundAmount)));

        // Set up new Suspense record for Refunded Amount w/ entered Client information
            Suspense refundSuspense = setupRefundSuspenseEntity(suspense.getUserDefNumber(), refundAmount, appReqBlock, disbursementSourceCT, addressTypeCT, reasonCode);

        String responseMessage = eventUseCase.refundSuspense(suspense, refundSuspense);
            appReqBlock.getHttpServletRequest().setAttribute("responseMessage", responseMessage);

        }
        //ClientRequested allows a specific client to be selected for a suspense
        else if (clientRequested.equalsIgnoreCase("true"))
        {
            saveSuspenseClientInfo(appReqBlock, disbursementSourceCT, addressTypeCT);
        }

        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);
        appReqBlock.getHttpSession().removeAttribute("suspense");
        appReqBlock.getHttpSession().removeAttribute("terminatedStatus");
        appReqBlock.getHttpSession().removeAttribute("refundAmount");

        return showSuspense(appReqBlock);
    }

    private String cancelRefund(AppReqBlock appReqBlock) throws Exception
    {
        String suspensePK = appReqBlock.getReqParm("suspensePK");

        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);

        appReqBlock.getHttpSession().removeAttribute("clientDetailVOs");
        appReqBlock.getHttpSession().removeAttribute("refundRequest");
        appReqBlock.getHttpSession().removeAttribute("clientRequest");
        appReqBlock.getHttpSession().removeAttribute("suspense");
        appReqBlock.getHttpSession().removeAttribute("clientDetail");
        appReqBlock.getHttpSession().removeAttribute("clientAddress");
        appReqBlock.getHttpSession().removeAttribute("preference");
//        SessionHelper.clearSessions();

        return showSuspense(appReqBlock);
    }

    /**
     * Create a new Suspense entity for the refunded suspense amount, along with the SuspenseClientInformation
     * required for the refund.
     * @param userDefNumber
     * @param refundAmount
     * @param appReqBlock
     * @return
     */
    private Suspense setupRefundSuspenseEntity(String userDefNumber, String refundAmount, AppReqBlock appReqBlock, String disbursementSourceCT, String addressTypeCT, String reasonCode)
    {
        Suspense refundSuspense = (Suspense) SessionHelper.newInstance(Suspense.class, SessionHelper.EDITSOLUTIONS);
        refundSuspense.setSuspenseAmount(new EDITBigDecimal(refundAmount));
        refundSuspense.setOriginalAmount(new EDITBigDecimal(refundAmount));
        refundSuspense.setUserDefNumber(userDefNumber.toUpperCase());
        refundSuspense.setOriginalContractNumber(userDefNumber.toUpperCase());
        refundSuspense.setOperator(appReqBlock.getUserSession().getUsername());
        refundSuspense.setDisbursementSourceCT(disbursementSourceCT);
        refundSuspense.setAddressTypeCT(addressTypeCT);
        refundSuspense.setReasonCodeCT(reasonCode);

        Segment segment = Segment.findByContractNumber(userDefNumber);
        if (segment != null)
        {
            Company company = Company.findByProductStructurePK(segment.getProductStructureFK());
            refundSuspense.setCompanyFK(company.getCompanyPK());
        }

        refundSuspense.setSuspenseRefundDefaults();

        populateSuspenseClientInformation(appReqBlock, refundSuspense, disbursementSourceCT, addressTypeCT);

        return refundSuspense;
    }

    private String showOriginalSuspenseInfo(AppReqBlock appReqBlock)
    {
        appReqBlock.getHttpServletRequest().setAttribute("originalContractNumber", appReqBlock.getReqParm("originalContractNumber"));
        appReqBlock.getHttpServletRequest().setAttribute("originalMemoCode", appReqBlock.getReqParm("originalMemoCode"));
        appReqBlock.getHttpServletRequest().setAttribute("originalAmount", appReqBlock.getReqParm("originalAmount"));

        return CONTRACT_ORIGINAL_SUSPENSE_INFO;
    }

    private String showSuspenseClientInfo(AppReqBlock appReqBlock) throws Exception
    {
        String suspensePK = appReqBlock.getReqParm("suspensePK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);

        Suspense suspense = saveSuspenseChangesToSession(appReqBlock);
      Long clientDetailPK = suspense.getClientDetailFK();
      ClientDetail clientDetail = null;

      if (clientDetailPK != null)
      {
          appReqBlock.getHttpServletRequest().setAttribute("selectedClientDetailPK", clientDetailPK.toString());
          clientDetail = ClientDetail.findByPK(clientDetailPK);
          appReqBlock.getHttpSession().setAttribute("clientDetail", clientDetail);
      }

      if (suspense.getClientAddressFK() != null)
      {
          appReqBlock.getHttpSession().setAttribute("clientAddress", ClientAddress.findByPK(suspense.getClientAddressFK()));
      }
      else if (suspense.getAddressTypeCT() != null)
      {
          appReqBlock.getHttpSession().setAttribute("clientAddress", ClientAddress.findByClientDetail_And_AddressTypeCT(clientDetail, suspense.getAddressTypeCT()));
      }
      else if (clientDetailPK != null)
      {
          appReqBlock.getHttpSession().setAttribute("clientAddress", ClientAddress.findCurrentAddress(clientDetailPK));
    }

        if (clientDetailPK != null)
    {
            appReqBlock.getHttpServletRequest().setAttribute("selectedClientDetailPK", clientDetailPK.toString());
            clientDetail = ClientDetail.findByPK(clientDetailPK);
            appReqBlock.getHttpSession().setAttribute("clientDetail", clientDetail);
        }

        if (suspense.getClientAddressFK() != null)
        {
            appReqBlock.getHttpSession().setAttribute("clientAddress", ClientAddress.findByPK(suspense.getClientAddressFK()));
        }
        else if (suspense.getAddressTypeCT() != null)
        {
            appReqBlock.getHttpSession().setAttribute("clientAddress", ClientAddress.findByClientDetail_And_AddressTypeCT(clientDetail, suspense.getAddressTypeCT()));
        }
        else if (clientDetailPK != null)
            {
            appReqBlock.getHttpSession().setAttribute("clientAddress", ClientAddress.findCurrentAddress(clientDetailPK));
        }

        if (suspense.getPreferenceFK() != null)
                {
            appReqBlock.getHttpSession().setAttribute("preference", Preference.findByPK(suspense.getPreferenceFK()));
                }
        else
        {
            if (clientDetailPK != null)
            {
                appReqBlock.getHttpSession().setAttribute("preference", Preference.findByClientDetailFK(clientDetailPK));
            }
        }

        appReqBlock.getHttpSession().setAttribute("refundRequested", "false");
        appReqBlock.getHttpSession().setAttribute("clientRequested", "true");

        appReqBlock.getHttpServletRequest().setAttribute("suspense", suspense);

        appReqBlock.getHttpSession().removeAttribute("clientDetailVOs");

        return REFUND_SUSPENSE_DIALOG;
    }

    private String saveSuspenseClientInfo(AppReqBlock appReqBlock, String disbursementSourceCT, String addressTypeCT) throws Exception
    {
//        client.business.Client clientComponent = new client.component.ClientComponent();
        PageBean formBean = appReqBlock.getFormBean();

        String suspensePK = formBean.getValue("suspensePK");

        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);

        Suspense suspense = Suspense.findByPK(new Long(suspensePK));
        appReqBlock.getHttpServletRequest().setAttribute("suspense", suspense);

        populateSuspenseClientInformation(appReqBlock, suspense, disbursementSourceCT, addressTypeCT);
        suspense.setDisbursementSourceCT(disbursementSourceCT);
        suspense.setAddressTypeCT(addressTypeCT);

        EventUseCase eventUseCase = new EventUseCaseComponent();
        eventUseCase.refundSuspense(suspense, suspense);

        appReqBlock.getHttpServletRequest().setAttribute("responseMessage", "Suspense Sucessfully Updated");

        appReqBlock.getHttpSession().removeAttribute("clientDetailVOs");

        new FilterSuspenseTableModel(appReqBlock);

        return CONTRACT_SUSPENSE;
    }


    /**
     * Displays the transaction information page for a given suspense entry.
     * If there is no transaction information, the page will be displayed with no data.
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String showSuspenseTransactionInfo(AppReqBlock appReqBlock) throws Exception
    {
        String suspensePK = appReqBlock.getReqParm("suspensePK");

        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);

        Suspense suspense = saveSuspenseChangesToSession(appReqBlock);

        appReqBlock.getHttpServletRequest().setAttribute("suspense", suspense);

        return SUSPENSE_TRANSACTION_INFO;
    }

    /**
     * Close the suspense transaction information page and return to the suspense page.
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String closeSuspenseTransactionInfo(AppReqBlock appReqBlock) throws Exception
    {
        String suspensePK = appReqBlock.getReqParm("suspensePK");

        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);

        return showSuspense(appReqBlock);
    }

    protected String showNotesDialog(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");
        savePreviousPageFormBean(appReqBlock, currentPage);

        UserSession userSession = appReqBlock.getUserSession();
        String segmentPK = userSession.getSegmentPK() + "";

        if (segmentPK.equals("0"))
        {
            segmentPK = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("segmentPK");
            userSession.setSegmentPK(Long.parseLong(segmentPK));
        }

        SessionBean contractNotesSessionBean = appReqBlock.getSessionBean("contractNotesSessionBean");
        appReqBlock.addSessionBean("contractNotes", (SessionBean) Util.deepClone(contractNotesSessionBean));

        return CONTRACT_NOTES_DIALOG;
    }

    protected String showTaxesDialog(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");
        savePreviousPageFormBean(appReqBlock, currentPage);

        return CONTRACT_TAXES_DIALOG;
    }

    protected String showNotesDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractNotesSessionBean = appReqBlock.getSessionBean("contractNotesSessionBean");
        PageBean formBean = appReqBlock.getFormBean();

        String key = formBean.getValue("key");

        PageBean noteBean = contractNotesSessionBean.getPageBean(key);

        contractNotesSessionBean.putPageBean("formBean", noteBean);

        return CONTRACT_NOTES_DIALOG;
    }

    protected String cancelNotes(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        PageBean formBean = contractMainSessionBean.getPageBean("formBean");
        String optionId = formBean.getValue("optionId");

        ContractNotesUtil.cancelNotes(appReqBlock);

        String productType = checkProductType(optionId);
        String mainReturnPage = getMainReturnPage(productType);

        return mainReturnPage;
    }

    protected String saveNoteToSummary(AppReqBlock appReqBlock) throws Exception
    {
        new InforceUseCaseComponent().updateInforceNotes();

        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        SessionBean contractNotesSessionBean = appReqBlock.getSessionBean("contractNotesSessionBean");
        PageBean formBean = appReqBlock.getFormBean();

        String key = formBean.getValue("key");
        String noteTypeId = Util.initString(formBean.getValue("noteTypeId"), "");
        String noteQualifierId = Util.initString(formBean.getValue("noteQualifierId"), "");
        String sequence = formBean.getValue("sequence");
        String noteReminderPK = formBean.getValue("noteReminderPK");
        String segmentFK = formBean.getValue("segmentFK");

        if (noteReminderPK.equals("0") || noteReminderPK.equals(""))
        {
            contract.business.Contract contractComponent = new contract.component.ContractComponent();
            noteReminderPK = (contractComponent.getNextAvailableKey() * -1) + "";
        }

        if (Util.isANumber(noteTypeId))
        {
            noteTypeId = codeTableWrapper.getCodeTableEntry(Long.parseLong(noteTypeId)).getCode();
        }


        if (Util.isANumber(noteQualifierId))
        {
            noteQualifierId = codeTableWrapper.getCodeTableEntry(Long.parseLong(noteQualifierId)).getCode();
        }

        String operator = appReqBlock.getUserSession().getUsername();

        formBean.putValue("operator", operator);
        formBean.putValue("noteTypeId", noteTypeId);
        formBean.putValue("noteQualifierId", noteQualifierId);
        if (!Util.isANumber(sequence))
        {
            sequence = setNoteReminderSequenceNumber(contractNotesSessionBean);
        }
        formBean.putValue("sequence", sequence);

        //   formBean.putValue("noteReminderPK", noteReminderPK);
        EDITDateTime maintDateTime = new EDITDateTime();

        formBean.putValue("maintDate", maintDateTime.getFormattedDateTime());

        if (key.equals(""))
        {
            key = noteReminderPK + sequence + noteTypeId + noteQualifierId;
            formBean.putValue("key", key);
        }

        formBean.putValue("isNoteReminderChanged", "true");
        formBean.putValue("segmentFK", segmentFK);

        contractNotesSessionBean.putPageBean(key, formBean);
        contractNotesSessionBean.putPageBean("formBean", formBean);

        // PageBean contractMainFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        // contractMainFormBean.putValue("notesIndStatus", "checked");
        return CONTRACT_NOTES_DIALOG;
    }

    protected String saveTaxes(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractTaxesSessionBean = appReqBlock.getSessionBean("contractTaxesSessionBean");
        PageBean contractMainFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        String optionId = contractMainFormBean.getValue("optionId");

        PageBean formBean = appReqBlock.getFormBean();

        String exchangeInd = formBean.getValue("exchangeIndStatus");
        String taxReportingGroup = formBean.getValue("taxReportingGroup");

        contractTaxesSessionBean.putValue("exchangeIndStatus", exchangeInd);
        contractTaxesSessionBean.putValue("taxReportingGroup", taxReportingGroup);

        if (exchangeInd.equalsIgnoreCase("Y") || !taxReportingGroup.equals(""))
        {
            contractMainFormBean.putValue("taxesIndStatus", "checked");
        }
        else
        {
            contractMainFormBean.putValue("taxesIndStatus", "unchecked");
        }

        String productType = checkProductType(optionId);
        String mainReturnPage = getMainReturnPage(productType);

        return mainReturnPage;
    }

    protected String saveScheduledPremium(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        EDITBigDecimal scheduledPremiumAmount = new EDITBigDecimal(formBean.getValue("scheduledPremiumAmount"));
        EDITDate effectiveDate = new EDITDate(formBean.getValue("effectiveDate"));
    	String conversionValue = "SchedPrem";
        String operator = appReqBlock.getUserSession().getUsername();
    	        
        ContractVO contractVO = buildContractVO(appReqBlock);
        SegmentVO segmentVO = contractVO.getSegmentVO();
        Segment segment = (Segment) SessionHelper.map(segmentVO, SessionHelper.EDITSOLUTIONS);
        
        // test these to see if all are needed ??? :
        segment.setOperator(operator);
        segmentVO.setSegmentPK(segment.getSegmentPK().longValue());
        segment.setVO(segmentVO);
        
        EDITTrx.createBillingChangeTrxGroupSetup(segment, operator, conversionValue, effectiveDate, scheduledPremiumAmount);
        
        UserSession userSession = appReqBlock.getUserSession();
        userSession.setDepositsVO(null); // not sure if this is needed?
        userSession.unlockSegment();
        
        appReqBlock.getSessionBean("contractMainSessionBean").putValue("contractMessage", "Transaction Complete");
        appReqBlock.getFormBean().putValue("segmentPK", String.valueOf(segmentVO.getSegmentPK()));
        
        return loadContract(appReqBlock);
    }

    protected String saveUnits(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        EDITBigDecimal units = new EDITBigDecimal(formBean.getValue("units"));
        EDITDate effectiveDate = new EDITDate(formBean.getValue("effectiveDate"));
    	String conversionValue = "Units";
        String operator = appReqBlock.getUserSession().getUsername();
    	        
        ContractVO contractVO = buildContractVO(appReqBlock);
        SegmentVO segmentVO = contractVO.getSegmentVO();
        Segment segment = (Segment) SessionHelper.map(segmentVO, SessionHelper.EDITSOLUTIONS);
        
        // test these to see if all are needed ??? :
        segment.setOperator(operator);
        segmentVO.setSegmentPK(segment.getSegmentPK().longValue());
        segment.setVO(segmentVO);
        
        EDITTrx.createBillingChangeTrxGroupSetup(segment, operator, conversionValue, effectiveDate, units);
        
        UserSession userSession = appReqBlock.getUserSession();
        userSession.unlockSegment();
        
        appReqBlock.getSessionBean("contractMainSessionBean").putValue("contractMessage", "Transaction Complete");
        appReqBlock.getFormBean().putValue("segmentPK", String.valueOf(segmentVO.getSegmentPK()));
        
        return loadContract(appReqBlock);
    }

    protected String saveNotes(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        PageBean formBean = contractMainSessionBean.getPageBean("formBean");
        String optionId = formBean.getValue("optionId");

        ContractNotesUtil.saveNotesOnly(appReqBlock);

        String productType = checkProductType(optionId);
        String mainReturnPage = getMainReturnPage(productType);

        return mainReturnPage;
        }

    protected String deleteCurrentNote(AppReqBlock appReqBlock) throws Exception
    {
        new InforceUseCaseComponent().updateInforceNotes();
        ContractNotesUtil.deleteCurrentNote(appReqBlock);

        return CONTRACT_NOTES_DIALOG;
    }

    protected String showAgentHierarchyAllocationDialog(AppReqBlock appReqBlock)
    {
        String segmentPK = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("segmentPK");

        appReqBlock.getHttpServletRequest().setAttribute("segmentPK", segmentPK);

        //  Get the uiAgentHierarchyVOs from session and copy them into the session as "tempUIAgentHierarchyVOs".  This supports
        //  the Save/Cancel functionality of the agent hierarchy allocation dialog
        UIAgentHierarchyVO[] tempUIAgentHierarchyVOs = (UIAgentHierarchyVO[]) appReqBlock.getHttpSession().getAttribute("uiAgentHierarchyVOs");
        appReqBlock.getHttpSession().setAttribute("tempUIAgentHierarchyVOs", tempUIAgentHierarchyVOs);

        appReqBlock.getHttpServletRequest().setAttribute("shouldLockStartDate", "false");  // no lock on start date (i.e. is editable)

        return AGENT_HIERARCHY_ALLOCATION_DIALOG;
    }

    protected String showAgentHierarchyAllocationDetail(AppReqBlock appReqBlock)
    {
        String selectedAgentHierarchyAllocationPK = appReqBlock.getReqParm("selectedAgentHierarchyAllocationPK");
        String startDateString = appReqBlock.getFormBean().getValue("startDate");

        appReqBlock.putInRequestScope("selectedAgentHierarchyAllocationPK", selectedAgentHierarchyAllocationPK);
        appReqBlock.getHttpServletRequest().setAttribute("startDate", startDateString);

        //  If the startDate is already set, set shouldLockStartDate to true (no more edits allowed), otherwise false
        if (startDateString == null || startDateString.equals(""))
        {
            appReqBlock.getHttpServletRequest().setAttribute("shouldLockStartDate", "false");
        }
        else
        {
            appReqBlock.getHttpServletRequest().setAttribute("shouldLockStartDate", "true");
        }
        
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        String newRiderBeanKey = contractMainSessionBean.getValue("newRiderBeanKey");

        if (newRiderBeanKey == null || newRiderBeanKey.equals("")) {
            return AGENT_HIERARCHY_ALLOCATION_DIALOG;
        } else {
        	return CONTRACT_AGENT_HIERARCHY_ALLOCATION_DIALOG;
        }
    }

    /**
     * Builds the ContractVO (which contains "everything") based on information from the screen
     * <p/>
     * This is when enter is pressed on contractNumberDialog
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private ContractVO buildContractVO(AppReqBlock appReqBlock) throws Exception
    {
        ContractVO contractVO = new ContractVO();

        contractVO.setOperator(appReqBlock.getUserSession().getUsername());

        // *********************************************** //
        // A. Build all the VOs without attaching them     //
        // *********************************************** //
        SegmentVO segmentVO = buildSegmentVO(appReqBlock);

        Map riderVOs = buildRiders(appReqBlock, segmentVO);

        Map contractClientVOs = buildContractClient(appReqBlock, segmentVO, riderVOs);

        Map fundVOs = buildInvestments(appReqBlock);

        // NOTE:  NoteReminder processing changed to directly save notes to database
        // *********************************************** //
        // B. Now attach the VOs to each other as necessary //
        // *********************************************** //
        attachVOsForBuild(appReqBlock, segmentVO, contractClientVOs, riderVOs, fundVOs);

        //  Add Segment to contractVO
        contractVO.setSegmentVO(segmentVO);

        ClientDetailVO[] clientDetailVOs = getClients(segmentVO.getContractClientVO());
        contractVO.setClientDetailVO(clientDetailVOs);

        //  Get the BillScheduleVO from session.  Update the Segment to point to this VO.  Set the BillScheduleVO in the contractVO
        //  Only group-based contracts will have a BillSchedule
        BillScheduleVO billScheduleVO = (BillScheduleVO) appReqBlock.getHttpSession().getAttribute("BillScheduleVO");

        if (billScheduleVO != null)
        {
            segmentVO.setBillScheduleFK(billScheduleVO.getBillSchedulePK());
            contractVO.setBillScheduleVO(billScheduleVO);
        }

        return contractVO;
    }

    private ClientDetailVO[] getClients(ContractClientVO[] contractClientVOs)
    {
        client.business.Lookup clientLookup = new client.component.LookupComponent();
        List clientDetailArray = new ArrayList();

        for (int i = 0; i < contractClientVOs.length; i++)
        {
            ClientDetailVO clientDetailVO = clientLookup.findByClientRolePK(contractClientVOs[i].getClientRoleFK());
            if (clientDetailVO != null)
            {
                clientDetailArray.add(clientDetailVO);
            }
        }

        return (ClientDetailVO[]) clientDetailArray.toArray(new ClientDetailVO[clientDetailArray.size()]);
    }

    /**
     * Builds the base SegmentVO based on information from the screen
     * @param appReqBlock
     * @return Built VO
     * @throws Exception
     */
    private SegmentVO buildSegmentVO(AppReqBlock appReqBlock) throws Exception
    {
        PageBean contractMainFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        SessionBean contractTaxesSessionBean = appReqBlock.getSessionBean("contractTaxesSessionBean");

        String ignoreEditWarnings = appReqBlock.getReqParm("ignoreEditWarnings");
        ignoreEditWarnings = (ignoreEditWarnings == null) ? "" : ignoreEditWarnings;

        String contractId = null;

        //when warnings have been accepted the contract number is in the stateBean not the formBean
        if (ignoreEditWarnings.equalsIgnoreCase("true"))
        {
            contractId = appReqBlock.getSessionBean("contractStateBean").getValue("contractNumber");
        }
        else
        {
            contractId = appReqBlock.getFormBean().getValue("contractNumber");
        }

        String segmentPK = Util.initString(contractMainFormBean.getValue("segmentPK"), "0");

        String contractGroupFK = Util.initString(contractMainFormBean.getValue("contractGroupFK"), "0");
        String billScheduleFK = Util.initString(contractMainFormBean.getValue("billScheduleFK"), "0");
        String batchContractSetupFK = Util.initString(contractMainFormBean.getValue("batchContractSetupFK"), "0");
        String departmentLocationFK = Util.initString(contractMainFormBean.getValue("departmentLocationFK"), "0");
        String priorContractGroupFK = Util.initString(contractMainFormBean.getValue("priorContractGroupFK"), "0");
        String originalContractGroupFK = Util.initString(contractMainFormBean.getValue("originalContractGroupFK"), "0");
        String priorPRDDue = Util.initString(contractMainFormBean.getValue("priorPRDDue"), null);
        String billScheduleChangeType = Util.initString(contractMainFormBean.getValue("billScheduleChangeType"), null);
        String segmentStatus = Util.initString(contractMainFormBean.getValue("segmentStatus"), null);

        String appSignedDate = contractMainFormBean.getValue("appSignedDate");
        appSignedDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(appSignedDate);//change the format back to yyyy/mm/dd

        String appReceivedDate = contractMainFormBean.getValue("appReceivedDate");
        appReceivedDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(appReceivedDate);//change the format back to yyyy/mm/dd
        
        String issueDate = contractMainFormBean.getValue("issueDate");
        issueDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(issueDate);//change the format back to yyyy/mm/dd

        String effectiveDate = contractMainFormBean.getValue("effectiveDate");
        effectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(effectiveDate);//change the format back to yyyy/mm/dd

        String dateInEffectDate = contractMainFormBean.getValue("dateInEffectDate");
        dateInEffectDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(dateInEffectDate);

        String creationDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("creationDate"));
        String creationOperator = Util.initString(contractMainFormBean.getValue("creationOperator"), null);
        String lastAnniversaryDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("lastAnnivDate"));

        String freeLookEndDate = contractMainFormBean.getValue("freeLookEndDate");
        freeLookEndDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(freeLookEndDate);//change the format back to yyyy/mm/dd

        String policyDeliveryDate = contractMainFormBean.getValue("policyDeliveryDate");
        policyDeliveryDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(policyDeliveryDate);//change the format back to yyyy/mm/dd

        String waiverInEffectStatus = contractMainFormBean.getValue("waiverInEffectStatus");
        String waiverInEffect = "N";

        if (waiverInEffectStatus.equalsIgnoreCase("checked"))
        {
            waiverInEffect = "Y";
        }

        String optionCode = Util.initString(contractMainFormBean.getValue("optionId"), null);
        String issueState = Util.initString(contractMainFormBean.getValue("areaId"), null);
        if (issueState.equalsIgnoreCase("Please Select"))
        {
            issueState = null;
        }

        String statusChange = contractMainFormBean.getValue("statusChange");

        if (statusChange.equalsIgnoreCase("Please Select"))
        {
            statusChange = "";
        }

        String chargeDeductDivisionIndStatus = Util.initString(contractMainFormBean.getValue("chargeDeductDivisionIndStatus"), null);
        String pointInScaleIndStatus = Util.initString(contractMainFormBean.getValue("pointInScaleIndStatus"), null);
        String costBasis = Util.initString(contractMainFormBean.getValue("costBasis"), "0");
        String purchaseAmount = Util.initString(contractMainFormBean.getValue("purchaseAmount"), "0");
        String savingsPercent = Util.initString(contractMainFormBean.getValue("savingsPercent"), "0");
        String dismembermentPercent = Util.initString(contractMainFormBean.getValue("dismembermentPercent"), "0");
        String recoveredCostBasis = Util.initString(contractMainFormBean.getValue("recoveredCostBasis"), "0");

        String terminationDate = contractMainFormBean.getValue("terminationDate");
        terminationDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(terminationDate);//change the format back to yyyy/mm/dd


        String statusChangeDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("statusChangeDate"));
        String freeAmount = Util.initString(contractMainFormBean.getValue("freeAmount"), "0");
        String freeAmountRemaining = Util.initString(contractMainFormBean.getValue("freeAmountRemaining"), "0");
        String qualifiedType = contractMainFormBean.getValue("qualifiedType");
        if (qualifiedType.equalsIgnoreCase("please select"))
        {
            qualifiedType = null;
        }
        qualifiedType = Util.initString(qualifiedType, null);
        String chargeDeductAmount = Util.initString(contractMainFormBean.getValue("chargeDeductAmount"), "0");
        String commitmentIndicatorStatus = Util.initString(contractMainFormBean.getValue("commitmentIndicatorStatus"), null);
        String rothConversionStatus = Util.initString(contractMainFormBean.getValue("rothConversionStatus"), null);
        String commitmentAmount = Util.initString(contractMainFormBean.getValue("commitmentAmount"), "0");
        
        String premiumTaxSitusOverride = Util.initString(contractMainFormBean.getValue("premiumTaxSitusOverride"), null);

        //CheckBox Ind
        String qualNonQual = Util.initString(contractMainFormBean.getValue("qualNonQual"), null);
        if (qualNonQual != null && qualNonQual.equalsIgnoreCase("Please Select"))
        {
            qualNonQual = null;
        }

        String waiveFreeLookIndicator = contractMainFormBean.getValue("waiveFreeLookIndicator");

        if (waiveFreeLookIndicator.equalsIgnoreCase("checked"))
        {
            waiveFreeLookIndicator = "Y";
        }
        else
        {
            waiveFreeLookIndicator = "N";
        }

        String freeLookDaysOverride = Util.initString(contractMainFormBean.getValue("freeLookDaysOverride"), null);
        String dialableSalesLoadPct = Util.initString(contractMainFormBean.getValue("dialableSalesLoadPct"), null);
        String totalFaceAmount = contractMainFormBean.getValue("totalFaceAmount");

        String ageAtIssue = Util.initString(contractMainFormBean.getValue("ageAtIssue"), "0");
        String originalStateCT = Util.initString(contractMainFormBean.getValue("originalStateCT"), null);

        String ratedGenderCT = Util.initString(contractMainFormBean.getValue("ratedGenderCT"), null);
        String underwritingClass = Util.initString(contractMainFormBean.getValue("underwritingClass"), null);
        String groupPlan = Util.initString(contractMainFormBean.getValue("groupPlan"), null);
        String segmentAmount = Util.initString(contractMainFormBean.getValue("segmentAmount"), "0");
        String worksheetTypeCT = Util.initString(contractMainFormBean.getValue("worksheetTypeCT"), null);
        String dividendOptionCT = Util.initString(contractMainFormBean.getValue("dividendOptionCT"), null);
        String indivAnnPremium = Util.initString(contractMainFormBean.getValue("indivAnnPremium"), "0");

        String productStructureId = contractMainSessionBean.getValue("companyStructureId");
        String quoteDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainSessionBean.getValue("quoteDate"));
        String premiumTaxes = Util.initString(contractMainSessionBean.getValue("premiumTaxes"), "0");
        String frontEndLoads = Util.initString(contractMainSessionBean.getValue("frontEndLoads"), "0");
        String fees = Util.initString(contractMainSessionBean.getValue("fees"), "0");
        String cashWithAppInd = contractMainSessionBean.getValue("cashWithAppInd");
        String consecutiveAPLCount = contractMainSessionBean.getValue("consecutiveAPLCount");
        //String unitsChangeEffectiveDate = contractMainSessionBean.getValue("unitsChangeEffectiveDate");
        //unitsChangeEffectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(unitsChangeEffectiveDate);//change the format back to yyyy/mm/dd
        
        if (cashWithAppInd.equals("checked"))
        {
            cashWithAppInd = "Y";
        }
        else
        {
            cashWithAppInd = "N";
        }

        String deductionAmountOverride = Util.initString(contractMainFormBean.getValue("deductionAmountOverride"), "0");
        String deductionAmountEffectiveDate = Util.initString(contractMainFormBean.getValue("deductionAmountEffectiveDate"), null);
        deductionAmountEffectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(deductionAmountEffectiveDate);

        SegmentVO segmentVO = new SegmentVO();

        segmentVO.setSegmentPK(Long.parseLong(segmentPK));

        segmentVO.setContractNumber(Util.initString(contractId, null));
        segmentVO.setProductStructureFK(Long.parseLong(productStructureId));

        String taxReportingGroup = contractTaxesSessionBean.getValue("taxReportingGroup");

        String exchangeInd = contractTaxesSessionBean.getValue("exchangeIndStatus");

        if (exchangeInd.equals("checked"))
        {
            exchangeInd = "Y";
        }
        else
        {
            exchangeInd = "N";
        }

        segmentVO.setTaxReportingGroup(Util.initString(taxReportingGroup, null));
        segmentVO.setExchangeInd(exchangeInd);

        
        if (optionCode.equalsIgnoreCase("UL"))
        {
            segmentVO.setSegmentNameCT("UL");
        }
        else if (optionCode.equalsIgnoreCase("Traditional"))
        {
            segmentVO.setSegmentNameCT("Traditional");
        }
        else if (Segment.OPTIONCODES_AH.contains(optionCode.toUpperCase())) 
        {
        	segmentVO.setSegmentNameCT("A&H");
        }
        else if (optionCode.equalsIgnoreCase("VL"))
        {
            segmentVO.setSegmentNameCT("Life");
        }
        else if (optionCode.equalsIgnoreCase("DFA"))
        {
            segmentVO.setSegmentNameCT("DFA");
        }
        else
        {
            segmentVO.setSegmentNameCT("Payout");
        }

        segmentVO.setEffectiveDate(effectiveDate);
        segmentVO.setApplicationSignedDate(appSignedDate);
        segmentVO.setApplicationReceivedDate(appReceivedDate);
        segmentVO.setIssueDate(issueDate);
        segmentVO.setOriginalStateCT(originalStateCT);
        segmentVO.setOptionCodeCT(optionCode);        

        segmentVO.setAmount(new EDITBigDecimal(purchaseAmount).getBigDecimal());
        segmentVO.setSavingsPercent(new EDITBigDecimal(savingsPercent).getBigDecimal());
        segmentVO.setDismembermentPercent(new EDITBigDecimal(dismembermentPercent).getBigDecimal());
        segmentVO.setIssueStateCT(issueState);
        segmentVO.setQualifiedTypeCT(qualifiedType);
        segmentVO.setQualNonQualCT(qualNonQual);
        segmentVO.setCostBasis(new EDITBigDecimal(costBasis).getBigDecimal());
        segmentVO.setRecoveredCostBasis(new EDITBigDecimal(recoveredCostBasis).getBigDecimal());
        segmentVO.setTerminationDate(terminationDate);
        //segmentVO.setSegmentChangeEffectiveDate(unitsChangeEffectiveDate);
        segmentVO.setCharges(new EDITBigDecimal(premiumTaxes).getBigDecimal());
        segmentVO.setLoads(new EDITBigDecimal(frontEndLoads).getBigDecimal());
        segmentVO.setFees(new EDITBigDecimal(fees).getBigDecimal());
        segmentVO.setQuoteDate(quoteDate);
        segmentVO.setCreationDate(creationDate);
        segmentVO.setCreationOperator(Util.initString(creationOperator, null));
        segmentVO.setWaiverInEffect(waiverInEffect);
        segmentVO.setFreeAmount(new EDITBigDecimal(freeAmount).getBigDecimal());
        segmentVO.setFreeAmountRemaining(new EDITBigDecimal(freeAmountRemaining).getBigDecimal());
        segmentVO.setCashWithAppInd(cashWithAppInd);
        segmentVO.setDateInEffect(dateInEffectDate);
        segmentVO.setLastAnniversaryDate(lastAnniversaryDate);
        segmentVO.setDateOfDeathValue(new EDITBigDecimal(Util.initString(contractMainFormBean.getValue("dateOfDeathValue"), "0")).getBigDecimal());
        segmentVO.setAnnuitizationValue(new EDITBigDecimal(Util.initString(contractMainFormBean.getValue("annuitizationValue"), "0")).getBigDecimal());
        segmentVO.setSuppOriginalContractNumber(Util.initString(contractMainFormBean.getValue("suppOriginalContractNumber"), null));
        segmentVO.setOpenClaimEndDate(DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("openClaimEndDate")));
        segmentVO.setTotalFaceAmount(new EDITBigDecimal(totalFaceAmount).getBigDecimal());
        segmentVO.setAgeAtIssue(Integer.parseInt(ageAtIssue));
        segmentVO.setOriginalStateCT(originalStateCT);
        segmentVO.setRatedGenderCT(ratedGenderCT);
        segmentVO.setUnderwritingClassCT(underwritingClass);
        segmentVO.setGroupPlan(groupPlan);
        segmentVO.setAmount(new BigDecimal(segmentAmount));
        segmentVO.setWorksheetTypeCT(worksheetTypeCT);
        segmentVO.setDividendOptionCT(dividendOptionCT);
        segmentVO.setScheduledTerminationDate(DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("scheduledTerminationDate")));
        segmentVO.setExpiryDate(DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("expiryDate")));

        segmentVO.setSequence(Util.initString(contractMainFormBean.getValue("sequence"), null));
        segmentVO.setLocation(Util.initString(contractMainFormBean.getValue("location"), null));
        segmentVO.setIndivAnnPremium(new BigDecimal(indivAnnPremium));
        

        String estateOfTheInsuredIndStatus = contractMainFormBean.getValue("estateOfTheInsuredIndStatus");

        if (estateOfTheInsuredIndStatus.equalsIgnoreCase("checked"))
        {
            segmentVO.setEstateOfTheInsured(Segment.INDICATOR_YES);
        }
        else
        {
            segmentVO.setEstateOfTheInsured(Segment.INDICATOR_NO);
        }

        segmentVO.setFreeLookEndDate(freeLookEndDate);
            segmentVO.setPolicyDeliveryDate(policyDeliveryDate);

        if ((chargeDeductDivisionIndStatus != null) && chargeDeductDivisionIndStatus.equalsIgnoreCase("checked"))
        {
            segmentVO.setChargeDeductDivisionInd("Y");
        }

        if ((pointInScaleIndStatus != null) && pointInScaleIndStatus.equalsIgnoreCase("checked"))
        {
            segmentVO.setPointInScaleIndicator("Y");
        }

        if ((freeLookDaysOverride != null) && !freeLookDaysOverride.equals(""))
        {
            segmentVO.setFreeLookDaysOverride(Integer.parseInt(freeLookDaysOverride));
        }

        segmentVO.setWaiveFreeLookIndicator(waiveFreeLookIndicator);

        if ((dialableSalesLoadPct != null) && !dialableSalesLoadPct.equals(""))
        {
            segmentVO.setDialableSalesLoadPercentage(new EDITBigDecimal(dialableSalesLoadPct).getBigDecimal());
        }

        segmentVO.setChargeDeductAmount(new EDITBigDecimal(chargeDeductAmount).getBigDecimal());

        if (!statusChange.equals(""))
        {
            segmentVO.setSegmentStatusCT(Util.initString(statusChange, null));
            segmentVO.setStatusChangeDate(new EDITDate().getFormattedDate());
        }
        else
        {
            segmentVO.setSegmentStatusCT(Util.initString(segmentStatus, null));

                segmentVO.setStatusChangeDate(statusChangeDate);
            }

        if ((commitmentIndicatorStatus != null) && commitmentIndicatorStatus.equalsIgnoreCase("checked"))
        {
            segmentVO.setCommitmentIndicator("Y");
        }

        if ((rothConversionStatus != null) && rothConversionStatus.equalsIgnoreCase("checked"))
        {
            segmentVO.setROTHConvInd("Y");
        }
        else
        {
            segmentVO.setROTHConvInd(null);
        }

        segmentVO.setCommitmentAmount(new EDITBigDecimal(commitmentAmount).getBigDecimal());
        segmentVO.setChargeCodeStatus(Util.initString(contractMainFormBean.getValue("chargeCodeStatus"), null));

        if (!contractGroupFK.equals("0"))
        {
            segmentVO.setContractGroupFK(Long.parseLong(contractGroupFK));
        }

        if (!billScheduleFK.equals("0"))
        {
            segmentVO.setBillScheduleFK(Long.parseLong(billScheduleFK));
        }

        if (!batchContractSetupFK.equals("0"))
        {
            segmentVO.setBatchContractSetupFK(Long.parseLong(batchContractSetupFK));
        }

        if (!departmentLocationFK.equals("0"))
        {
            segmentVO.setDepartmentLocationFK(Long.parseLong(departmentLocationFK));
        }

        if (!priorContractGroupFK.equals("0"))
        {
            segmentVO.setPriorContractGroupFK(Long.parseLong(priorContractGroupFK));
        }

        if (!originalContractGroupFK.equals("0"))
        {
            segmentVO.setOriginalContractGroupFK(Long.parseLong(originalContractGroupFK));
        }

        segmentVO.setPriorPRDDue(priorPRDDue);
        segmentVO.setBillScheduleChangeType(billScheduleChangeType);

        segmentVO.setTotalActiveBeneficiaries(Integer.parseInt(contractMainSessionBean.getValue("totalBenes")));
        segmentVO.setRemainingBeneficiaries(Integer.parseInt(contractMainSessionBean.getValue("remainingBenes")));

        segmentVO.setContractTypeCT(Util.initString(contractMainFormBean.getValue("contractType"), null));
        
        segmentVO.setPremiumTaxSitusOverrideCT(premiumTaxSitusOverride);

        String units = Util.initString(contractMainFormBean.getValue("units"), "0");
        String originalUnits = Util.initString(contractMainFormBean.getValue("originalUnits"), "0");
        String commissionPhaseID = Util.initString(contractMainFormBean.getValue("commissionPhaseID"), "1");
        String commissionPhaseOverride = Util.initString(contractMainFormBean.getValue("commissionPhaseOverride"), null);

        segmentVO.setUnits(new EDITBigDecimal(units).getBigDecimal());
        segmentVO.setOriginalUnits(new EDITBigDecimal(originalUnits).getBigDecimal());
        segmentVO.setCommissionPhaseID(Integer.parseInt(commissionPhaseID));
        segmentVO.setCommissionPhaseOverride(commissionPhaseOverride);

        String authorizedSignatureCT = Util.initString(contractMainFormBean.getValue("authorizedSignatureCT"), null);
        if (authorizedSignatureCT != null && authorizedSignatureCT.equalsIgnoreCase("Please Select"))
        {
            authorizedSignatureCT = null;
        }
        segmentVO.setAuthorizedSignatureCT(authorizedSignatureCT);

        segmentVO.setAnnualPremium(new EDITBigDecimal(Util.initString(contractMainFormBean.getValue("annualPremium"), "0")).getBigDecimal());
        segmentVO.setApplicationSignedStateCT(Util.initString(contractMainFormBean.getValue("applicationState"), null));
        segmentVO.setConsecutiveAPLCount(Integer.parseInt(consecutiveAPLCount));

        segmentVO.setApplicationNumber(Util.initString(contractMainFormBean.getValue("applicationNumber"), null));
        segmentVO.setMemberOfContractGroup(Util.initString(contractMainFormBean.getValue("memberOfContractGroup"), null));
        segmentVO.setPostIssueStatusCT(Util.initString(contractMainFormBean.getValue("postIssueStatus"), null));
        segmentVO.setCasetrackingOptionCT(Util.initString(contractMainSessionBean.getValue("contractTypeCode"), null));
        segmentVO.setClientUpdate(Util.initString(contractMainSessionBean.getValue("clientUpdate"), null));
        
        segmentVO.setIssueStateORInd(Util.initString(contractMainFormBean.getValue("issueStateORInd"), null));
        segmentVO.setFinalNotifyDate(Util.initString(contractMainFormBean.getValue("finalNotifyDate"), null));
        segmentVO.setRequirementEffectiveDate(Util.initString(contractMainFormBean.getValue("requirementEffDate"), null));
        segmentVO.setDeductionAmountOverride(new EDITBigDecimal(deductionAmountOverride).getBigDecimal());
        segmentVO.setDeductionAmountEffectiveDate(deductionAmountEffectiveDate);

        PremiumDueVO[] premiumDueVOs = (PremiumDueVO[]) appReqBlock.getHttpSession().getAttribute("premiumDueVOs");
        if (premiumDueVOs != null)
        {
            segmentVO.setPremiumDueVO(premiumDueVOs);
        }


        if (segmentVO.getSegmentNameCT().equalsIgnoreCase("Life") ||
            segmentVO.getSegmentNameCT().equalsIgnoreCase(TRADITIONAL) ||
            segmentVO.getSegmentNameCT().equalsIgnoreCase(UNIVERSAL_LIFE) ||
            segmentVO.getSegmentNameCT().equalsIgnoreCase(AH))
        {
            buildLifeVO(appReqBlock, segmentVO);
        }
        else
        {
            buildPayoutVO(appReqBlock, segmentVO);
        }

        return segmentVO;
    }

    /**
     * Builds the PayoutVO based on information from the screen
     * @param appReqBlock
     * @param segmentVO
     * @throws Exception
     */
    private void buildPayoutVO(AppReqBlock appReqBlock, SegmentVO segmentVO) throws Exception
    {
        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        PageBean contractMainFormBean = contractMainSessionBean.getPageBean("formBean");

        String payoutPK = Util.initString(contractMainFormBean.getValue("payoutPK"), "0");
        String totalExpectedReturnAmt = Util.initString(contractMainFormBean.getValue("totalExpectedReturn"), "0");
        String paymentFrequency = contractMainFormBean.getValue("frequencyId");
        String certainDuration = Util.initString(contractMainFormBean.getValue("certainDuration"), "0");
        String lastDayOfMonthInd = contractMainFormBean.getValue("lastDayOfMonthInd");
        String finalDistributionAmt = Util.initString(contractMainFormBean.getValue("finalDistributionAmount"), "0");
        String reducePercent1 = Util.initString(contractMainFormBean.getValue("reduce1"), "0");
        String reducePercent2 = Util.initString(contractMainFormBean.getValue("reduce2"), "0");
        String paymentAmount = Util.initString(contractMainFormBean.getValue("paymentAmount"), "0");

        String exclusionRatio = Util.initString(contractMainFormBean.getValue("exclusionRatio"), "0");
        String exclusionAmount = Util.initString(contractMainFormBean.getValue("exclusionAmount"), "0");
        String postJune1986Investment = Util.initString(contractMainFormBean.getValue("postJune301986InvestmentInd"), "N");
        String yearlyTaxableBenefit = Util.initString(contractMainFormBean.getValue("yearlyTaxableBenefit"), "0");
        String finalPaymentDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("finalPayDate"));
        String lastCheckDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("lastCheckDate"));
        String nextPaymentDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("nextPaymentDate"));
        String certainPeriodEndDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("certainPeriodEndDate"));

        String startDate = contractMainFormBean.getValue("startDate");
        String paymentStartDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(startDate);


        if (postJune1986Investment.equals("on"))
        {
            postJune1986Investment = "Y";
        }

        else
        {
            postJune1986Investment = "N";
        }

        PayoutVO payoutVO = new PayoutVO();

            payoutVO.setPayoutPK(Long.parseLong(payoutPK));
        payoutVO.setSegmentFK(segmentVO.getSegmentPK());
        payoutVO.setPaymentStartDate(paymentStartDate);
        payoutVO.setPaymentFrequencyCT(Util.initString(paymentFrequency, null));
            payoutVO.setCertainDuration(Integer.parseInt(certainDuration));
        payoutVO.setPostJune1986Investment(Util.initString(postJune1986Investment, null));

            payoutVO.setPaymentAmount(new EDITBigDecimal(paymentAmount).getBigDecimal());
            payoutVO.setReducePercent1(new EDITBigDecimal(reducePercent1).getBigDecimal());
            payoutVO.setReducePercent2(new EDITBigDecimal(reducePercent2).getBigDecimal());
            payoutVO.setTotalExpectedReturnAmount(new EDITBigDecimal(totalExpectedReturnAmt).getBigDecimal());
            payoutVO.setFinalDistributionAmount(new EDITBigDecimal(finalDistributionAmt).getBigDecimal());
            payoutVO.setExclusionRatio(new EDITBigDecimal(exclusionRatio).getBigDecimal());
            payoutVO.setExclusionAmount(new EDITBigDecimal(exclusionAmount).getBigDecimal());
            payoutVO.setYearlyTaxableBenefit(new EDITBigDecimal(yearlyTaxableBenefit).getBigDecimal());

        payoutVO.setFinalPaymentDate(finalPaymentDate);
        payoutVO.setLastCheckDate(lastCheckDate);
        payoutVO.setNextPaymentDate(nextPaymentDate);
        payoutVO.setCertainPeriodEndDate(certainPeriodEndDate);
        payoutVO.setLastDayOfMonthInd(lastDayOfMonthInd);

        segmentVO.addPayoutVO(payoutVO);
    }

    /**
     * Builds the LifeVO based on information from the screen
     * @param appReqBlock
     * @param segmentVO
     */
    private void buildLifeVO(AppReqBlock appReqBlock, SegmentVO segmentVO)
    {
        PageBean contractMainFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");

        LifeVO lifeVO = new LifeVO();

        String lifePK = Util.initString(contractMainFormBean.getValue("lifePK"), "0");
        String guidelineSinglePrem = Util.initString(contractMainFormBean.getValue("guidelineSinglePrem"), "0");
        String guidelineLevelPrem = Util.initString(contractMainFormBean.getValue("guidelineLevelPrem"), "0");
        String tamra = Util.initString(contractMainFormBean.getValue("tamra"), "0");
        String deathBeneOption = contractMainFormBean.getValue("deathBeneOption");
        String nonForfeitureOption = contractMainFormBean.getValue("nonForfeitureOption");
        String option7702 = contractMainFormBean.getValue("option7702");
        String term = Util.initString(contractMainFormBean.getValue("term"), "0");
        String faceAmount = Util.initString(contractMainFormBean.getValue("faceAmount"), "0");
        String mecDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("MECDate"));
        String mecGuidelineSinglePrem = Util.initString(contractMainFormBean.getValue("mecGuidelineSinglePremium"), "0");
        String mecGuidelineLevelPrem = Util.initString(contractMainFormBean.getValue("mecGuidelineLevelPremium"), "0");
        String cumGuidelineLevelPrem = Util.initString(contractMainFormBean.getValue("cumGuidelineLevelPremium"), "0");
        String startNew7PayIndStatus = Util.initString(contractMainFormBean.getValue("startNew7PayIndicatorStatus"), null);
        String pendingDBOChangeIndStatus = Util.initString(contractMainFormBean.getValue("pendingDBOChangeIndStatus"), null);
        String mecStatus = Util.initString(contractMainFormBean.getValue("mecStatus"), null);
        String maxNetAmountAtRisk = Util.initString(contractMainFormBean.getValue("maxNetAmountAtRisk"), "0");
        String tamraStartDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("tamraStartDate"));
        String paidToDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("paidToDate"));
        String lapsePendingDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("lapsePendingDate"));
        String lapseDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("lapseDate"));
        String currentDeathBenefit = Util.initString(contractMainFormBean.getValue("currentDeathBenefit"), "0");
        String MAPEndDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("MAPEndDate"));
        String tamraInitAdjValue = Util.initString(contractMainFormBean.getValue("tamraInitAdjValue"), "0");
        
        lifeVO.setLifePK(Long.parseLong(lifePK));
        if (deathBeneOption.equalsIgnoreCase("Please Select"))
        {
            deathBeneOption = null;
        }

        if (nonForfeitureOption.equalsIgnoreCase("Please Select"))
        {
            nonForfeitureOption = null;
        }
        lifeVO.setDeathBenefitOptionCT(Util.initString(deathBeneOption, null));
        lifeVO.setNonForfeitureOptionCT(Util.initString(nonForfeitureOption, null));
        lifeVO.setOption7702CT(Util.initString(option7702, null));
        lifeVO.setGuidelineSinglePremium(new EDITBigDecimal(guidelineSinglePrem).getBigDecimal());
        lifeVO.setGuidelineLevelPremium(new EDITBigDecimal(guidelineLevelPrem).getBigDecimal());
        lifeVO.setTamra(new EDITBigDecimal(tamra).getBigDecimal());
        lifeVO.setFaceAmount(new EDITBigDecimal(faceAmount).getBigDecimal());
        lifeVO.setTerm(Integer.parseInt(term));

        lifeVO.setMECDate(mecDate);

        lifeVO.setMECStatusCT(mecStatus);
        lifeVO.setMECGuidelineSinglePremium(new EDITBigDecimal(mecGuidelineSinglePrem).getBigDecimal());
        lifeVO.setMECGuidelineLevelPremium(new EDITBigDecimal(mecGuidelineLevelPrem).getBigDecimal());
        lifeVO.setCumGuidelineLevelPremium(new EDITBigDecimal(cumGuidelineLevelPrem).getBigDecimal());

        if ((startNew7PayIndStatus != null) && startNew7PayIndStatus.equalsIgnoreCase("checked"))
        {
            lifeVO.setStartNew7PayIndicator("Y");
        }

        if ((pendingDBOChangeIndStatus != null) && pendingDBOChangeIndStatus.equalsIgnoreCase("checked"))
        {
            lifeVO.setPendingDBOChangeInd("Y");
        }

        lifeVO.setMaximumNetAmountAtRisk(new EDITBigDecimal(maxNetAmountAtRisk).getBigDecimal());

        lifeVO.setTamraStartDate(tamraStartDate);

        lifeVO.setPaidToDate(paidToDate);
        lifeVO.setLapsePendingDate(lapsePendingDate);
        lifeVO.setLapseDate(lapseDate);
        lifeVO.setCurrentDeathBenefit(new EDITBigDecimal(currentDeathBenefit).getBigDecimal());
        lifeVO.setGuarPaidUpTerm(new EDITBigDecimal(Util.initString(contractMainFormBean.getValue("guarPaidUpTerm"), "0")).getBigDecimal());
        lifeVO.setNonGuarPaidUpTerm(new EDITBigDecimal(Util.initString(contractMainFormBean.getValue("nonGuarPaidUpTerm"), "0")).getBigDecimal());
        lifeVO.setMortalityCredit(new EDITBigDecimal(Util.initString(contractMainFormBean.getValue("mortalityCredit"), "0")).getBigDecimal());
        lifeVO.setEndowmentCredit(new EDITBigDecimal(Util.initString(contractMainFormBean.getValue("endowmentCredit"), "0")).getBigDecimal());
        lifeVO.setExcessInterestCredit(new EDITBigDecimal(Util.initString(contractMainFormBean.getValue("excessInterestCredit"), "0")).getBigDecimal());
        lifeVO.setMAPEndDate(MAPEndDate);
        lifeVO.setTamraInitAdjValue(new EDITBigDecimal(tamraInitAdjValue).getBigDecimal());
        
        segmentVO.addLifeVO(lifeVO);
    }

    /**
     * Builds the ContractClientVOs based on information from the screen
     * @param appReqBlock
     * @return Built VOs
     */
    private Map buildContractClient(AppReqBlock appReqBlock, SegmentVO segmentVO, Map riderVOs)
    {
        Map contractClientVOs = new HashMap();

        PageBean contractMainFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        SessionBean clients = appReqBlock.getSessionBean("contractClients");

        Map clientPageBeans = clients.getPageBeans();

        Iterator it2 = clientPageBeans.values().iterator();

        while (it2.hasNext())
        {
            PageBean clientBean = (PageBean) it2.next();

            String contractClientPK = clientBean.getValue("contractClientPK");
//            String clientSegmentFK = clientBean.getValue("segmentFK");
            String clientRoleFK = clientBean.getValue("clientRoleFK");
            String taxId = clientBean.getValue("taxId");
            String relationship = clientBean.getValue("relationshipInd");
            String optionId = clientBean.getValue("optionId");
            String riderNumber = Util.initString(clientBean.getValue("riderNumber"), "0");
            String relationToIns = clientBean.getValue("relationToIns");
            String relationToEmp = clientBean.getValue("relationToEmp");
            String phoneAuth = clientBean.getValue("phoneAuth");
            String classType = clientBean.getValue("classType");
            String flatExtra = Util.initString(clientBean.getValue("flatExtra"), "0");
            String flatExtraAge = Util.initString(clientBean.getValue("flatExtraAge"), "0");
            String flatExtraDur = Util.initString(clientBean.getValue("flatExtraDur"), "0");
            String percentExtra = Util.initString(clientBean.getValue("percentExtra"), "0");
            String percentExtraAge = Util.initString(clientBean.getValue("percentExtraAge"), "0");
            String percentExtraDur = Util.initString(clientBean.getValue("percentExtraDur"), "0");
            String tableRating = Util.initString(clientBean.getValue("tableRating"), null);
            String disbAddressType = clientBean.getValue("disbAddressType");
            String corrAddressType = clientBean.getValue("corrAddressType");
            String terminationReason = clientBean.getValue("terminationReason");
            String payorOf = clientBean.getValue("payorOf");
            String pendingClassChangeInd = clientBean.getValue("pendingClassChangeIndStatus");
            String authorizedSignatureCT = clientBean.getValue("authorizedSignatureCT");
            String originalClassCT = clientBean.getValue("originalClassCT");

            if (pendingClassChangeInd.equalsIgnoreCase("checked"))
            {
                pendingClassChangeInd = "Y";
            }

            String ratedGender = clientBean.getValue("ratedGender");
            String underwritingClass = clientBean.getValue("underwritingClass");

//            if (!taxId.equals(""))
//            {
                ContractClientVO contractClientVO = new ContractClientVO();

                String issueAge = clientBean.getValue("issueAge");

                if (!contractClientPK.equals(""))
                {
                    contractClientVO.setContractClientPK(Long.parseLong(contractClientPK));
                }
                else
                {
                    contractClientVO.setContractClientPK(0);
                }

                if (riderNumber.equals("0"))
                {
                    contractClientVO.setSegmentFK(segmentVO.getSegmentPK());
                }
                else
                {
                    SegmentVO riderSegment = (SegmentVO) riderVOs.get(riderNumber + "_" + optionId);
                    contractClientVO.setSegmentFK(riderSegment.getSegmentPK());
                }

                contractClientVO.setClientRoleFK(Long.parseLong(clientRoleFK));
                contractClientVO.setIssueAge(Integer.parseInt(issueAge));

                String effectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMainFormBean.getValue("effectiveDate"));

                String payeeEffectiveDate = clientBean.getValue("effectiveDate");
                String ccEffectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(payeeEffectiveDate);

                if (ccEffectiveDate == null)
                {
                    ccEffectiveDate = effectiveDate;
                }

                contractClientVO.setEffectiveDate(ccEffectiveDate);

                String terminateDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(clientBean.getValue("terminationDate"));
                if (terminateDate == null)
                {
                    terminateDate = EDITDate.DEFAULT_MAX_DATE;
                }

                contractClientVO.setTerminationDate(terminateDate);

                String overrideStatus = clientBean.getValue("contractClientOverrideStatus");
                String employeeIdentification = clientBean.getValue("employeeIdentification");

                contractClientVO.setOverrideStatus(overrideStatus);
                contractClientVO.setRelationshipToInsuredCT(Util.initString(relationToIns, null));
                contractClientVO.setRelationshipToEmployeeCT(Util.initString(relationToEmp, null));
                contractClientVO.setTelephoneAuthorizationCT(Util.initString(phoneAuth, null));
                contractClientVO.setClassCT(Util.initString(classType, null));
                contractClientVO.setTableRatingCT(Util.initString(tableRating, null));
                contractClientVO.setDisbursementAddressTypeCT(Util.initString(disbAddressType, null));
                contractClientVO.setCorrespondenceAddressTypeCT(Util.initString(corrAddressType, null));
                contractClientVO.setTerminationReasonCT(Util.initString(terminationReason, null));
                contractClientVO.setPayorOfCT(Util.initString(payorOf, null));
                contractClientVO.setEmployeeIdentification(Util.initString(employeeIdentification, null));

                contractClientVO.setFlatExtra(new EDITBigDecimal(flatExtra).getBigDecimal());
                contractClientVO.setFlatExtraAge(Integer.parseInt(flatExtraAge));
                contractClientVO.setFlatExtraDur(Integer.parseInt(flatExtraDur));
                contractClientVO.setPercentExtra(new EDITBigDecimal(percentExtra).getBigDecimal());
                contractClientVO.setPercentExtraAge(Integer.parseInt(percentExtraAge));
                contractClientVO.setPercentExtraDur(Integer.parseInt(percentExtraDur));
                contractClientVO.setAuthorizedSignatureCT(Util.initString(authorizedSignatureCT, null));
                contractClientVO.setOriginalClassCT(Util.initString(originalClassCT, null));

                contractClientVO.setPendingClassChangeInd(Util.initString(pendingClassChangeInd, null));
                contractClientVO.setRatedGenderCT(Util.initString(ratedGender, null));
                contractClientVO.setUnderwritingClassCT(Util.initString(underwritingClass, null));
                contractClientVO.setBeneRelationshipToInsured(Util.initString(clientBean.getValue("beneRelationshipToIns"), null));
                if (contractClientVO.getContractClientPK() == 0)
                {
                    contractClientVO.setOperator(appReqBlock.getUserSession().getUsername());
                    EDITDateTime maintDateTime = new EDITDateTime();
                    contractClientVO.setMaintDateTime(maintDateTime.getFormattedDateTime());
                }
                else
                {
                    contractClientVO.setOperator(Util.initString(clientBean.getValue("operator"), null));
                    contractClientVO.setMaintDateTime(Util.initString(clientBean.getValue("maintDateTime"), null));
                }

                String[] ccAllocPKs = clientBean.getValues("contractClientAllocationPKs");
                String[] allocPcnts = clientBean.getValues("allocationPercents");
                String[] ccAllocOverrideStatuses = clientBean.getValues("ccAllocOverrideStatuses");
                String[] splitEquals = clientBean.getValues("splitEquals");
                String[] allocationAmts = clientBean.getValues("allocationDollars");

                if ((ccAllocPKs != null) && (ccAllocPKs.length > 0))
                {
                    for (int s = 0; s < ccAllocPKs.length; s++)
                    {
                        String contractClientAllocPK = ccAllocPKs[s];
                        String allocationPct = Util.initString(allocPcnts[s], "0");
                        String ccAllocOverrideStatus = ccAllocOverrideStatuses[s];
                        String splitEqualInd = splitEquals[s];
                        String allocationAmount = Util.initString(allocationAmts[s], "0");

                        ContractClientAllocationVO contractClientAllocationVO = new ContractClientAllocationVO();

                        if (!contractClientAllocPK.equals(""))
                        {
                            contractClientAllocationVO.setContractClientAllocationPK(Long.parseLong(contractClientAllocPK));
                        }
                        else
                        {
                            contractClientAllocationVO.setContractClientAllocationPK(0);
                        }

                        contractClientAllocationVO.setContractClientFK(contractClientVO.getContractClientPK());

                        contractClientAllocationVO.setAllocationPercent(new EDITBigDecimal(allocationPct).getBigDecimal());
                        contractClientAllocationVO.setOverrideStatus(ccAllocOverrideStatus);
                        contractClientAllocationVO.setSplitEqual(splitEqualInd);
                        contractClientAllocationVO.setAllocationDollars(new EDITBigDecimal(allocationAmount).getBigDecimal());

                        contractClientVO.addContractClientAllocationVO(contractClientAllocationVO);
                    }
                }

                String key = taxId + riderNumber + optionId + relationship + clientRoleFK  + contractClientPK;
                contractClientVOs.put(key, contractClientVO);
//            }
        }
         // end clientPageBeans while

        return contractClientVOs;
    }

    /**
     * Builds the InvestmentVOs based on information from the screen
     * @param appReqBlock
     * @return Built VOs
     * @throws Exception
     */
    private Map buildInvestments(AppReqBlock appReqBlock) throws Exception
    {
        Map fundVOs = new HashMap();

        SessionBean funds = appReqBlock.getSessionBean("contractFunds");

        Map fundPageBeans = funds.getPageBeans();

        Iterator it5 = fundPageBeans.values().iterator();

        while (it5.hasNext())
        {
            PageBean fundBean = (PageBean) it5.next();

            String coverage = fundBean.getValue("optionId");

            String investmentPK = Util.initString(fundBean.getValue("investmentPK"), "0");
            String filteredFundFK = fundBean.getValue("filteredFundFK");
            String segmentFK = Util.initString(fundBean.getValue("segmentFK"), "0");
            String excessIntCalcDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(fundBean.getValue("excessIntCalcDate"));
            String excessIntPymtDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(fundBean.getValue("excessIntPymtDate"));
            String excessInterest = Util.initString(fundBean.getValue("excessInterest"), "0");
            String excessIntMethod = fundBean.getValue("excessIntMethod");
            String excessIntStartDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(fundBean.getValue("excessIntStartDate"));
            String air = Util.initString(fundBean.getValue("air"), "0");
            String invAllocPK = Util.initString(fundBean.getValue("invAllocPK"), null);
            String allocationPercent = fundBean.getValue("allocationPercent");
            String dollars = fundBean.getValue("dollars");
            String units = fundBean.getValue("units");
            String overrideStatus = fundBean.getValue("overrideStatus");
            String chargeCodeFK = Util.initString(fundBean.getValue("chargeCodeFK"), "0");
            String status = fundBean.getValue("status");

            String key = coverage + filteredFundFK;

            InvestmentVO investmentVO = new InvestmentVO();

                investmentVO.setInvestmentPK(Long.parseLong(investmentPK));
            investmentVO.setFilteredFundFK(Long.parseLong(filteredFundFK));
                investmentVO.setSegmentFK(Long.parseLong(segmentFK));

            investmentVO.setChargeCodeFK(Long.parseLong(chargeCodeFK));

                investmentVO.setExcessInterestCalculationDate(excessIntCalcDate);

                investmentVO.setExcessInterestPaymentDate(excessIntPymtDate);

                investmentVO.setExcessInterest(new EDITBigDecimal(excessInterest).getBigDecimal());
            investmentVO.setExcessInterestMethod(Util.initString(excessIntMethod, null));

                investmentVO.setExcessInterestStartDate(excessIntStartDate);

                investmentVO.setAssumedInvestmentReturn(new EDITBigDecimal(air).getBigDecimal());

            if (status != null && !status.equals(""))
            {
                investmentVO.setStatus(status);
            }

            if (invAllocPK != null)
            {
                InvestmentAllocationVO investmentAllocationVO = new InvestmentAllocationVO();
                investmentAllocationVO.setInvestmentAllocationPK(Long.parseLong(invAllocPK));
                investmentAllocationVO.setInvestmentFK(investmentVO.getInvestmentPK());
                investmentAllocationVO.setAllocationPercent(new EDITBigDecimal(allocationPercent).getBigDecimal());
                investmentAllocationVO.setDollars(new EDITBigDecimal(dollars).getBigDecimal());
                investmentAllocationVO.setUnits(new EDITBigDecimal(units).getBigDecimal());
                investmentAllocationVO.setOverrideStatus(overrideStatus);

                investmentVO.addInvestmentAllocationVO(investmentAllocationVO);
            }

            long investmentFK = investmentVO.getInvestmentPK();
            List voExclutionList = new ArrayList();
            voExclutionList.add(BucketHistoryVO.class);

            if (investmentFK > 0)
            {
                contract.business.Lookup contractLookup = new contract.component.LookupComponent();
                BucketVO[] bucketVOs = contractLookup.getBucketsByInvestmentFK(investmentFK, true, voExclutionList);

                if (bucketVOs != null)
                {
                    for (int b = 0; b < bucketVOs.length; b++)
                    {
                        investmentVO.addBucketVO(bucketVOs[b]);
                    }
                }

                InvestmentAllocationVO[] investmentAllocationVOs = contractLookup.getByInvestmentAllocation(investmentFK, false, null);

                if (investmentAllocationVOs != null)
                {
                    for (int i = 0; i < investmentAllocationVOs.length; i++)
                    {
                        if (invAllocPK != null)
                        {
                            if (investmentAllocationVOs[i].getInvestmentAllocationPK() != Long.parseLong(invAllocPK))
                            {
                                investmentVO.addInvestmentAllocationVO(investmentAllocationVOs[i]);
                            }
                        }
                        else
                        {
                            investmentVO.addInvestmentAllocationVO(investmentAllocationVOs[i]);
                        }
                    }
                }
            }

            fundVOs.put(key, investmentVO);
        }
         // end funds while

        return fundVOs;
    }

    /**
     * Attaches the VOs to each other and the SegmentVO as necessary for the build
     * @param appReqBlock
     * @param segmentVO
     * @param contractClientVOs
     * @param riderVOs
     * @param fundVOs
     *
     * @throws Exception
     */
    private void attachVOsForBuild(AppReqBlock appReqBlock, SegmentVO segmentVO, Map contractClientVOs, Map riderVOs, Map fundVOs) throws Exception
    {
        attachContractClientsForBuild(appReqBlock, segmentVO, riderVOs, contractClientVOs);

        attachAgentsForBuild(appReqBlock, segmentVO, riderVOs, contractClientVOs);

        new UtilitiesForTran().attachAgentHierarchysForBuild(appReqBlock, segmentVO, riderVOs);

        attachFundsForBuild(appReqBlock, segmentVO, riderVOs, fundVOs);

        attachNoteRemindersForBuild(segmentVO);

        attachContractRequirementsForBuild(appReqBlock, segmentVO);

        attachDepositsForBuild(appReqBlock, segmentVO);

        attachRMDForBuild(appReqBlock, segmentVO);

        attachRidersForBuild(segmentVO, riderVOs);
    }

    /**
     * Adds ContractClients to the SegmentVO upon build
     * @param appReqBlock
     * @param segmentVO
     * @param riderVOs
     * @param contractClientVOs
     */
    private void attachContractClientsForBuild(AppReqBlock appReqBlock, SegmentVO segmentVO, Map riderVOs, Map contractClientVOs)
    {
        // 1. Loop through all the clientRelationships.
        // IF the coverage of the client (from the clientRelationship) match the annuityOption from
        // the main page, then attach the clientRelationshipVO to the contractVO.
        // ELSE, we need to attach the clientRelationshipVO to a riderVO. We determine the appropriate riderVO by
        // comparing the coverage to the riderVOs riderType.
        SessionBean clients = appReqBlock.getSessionBean("contractClients");

        Map clientPageBeans2 = clients.getPageBeans();

        Iterator it6 = clientPageBeans2.values().iterator();

        while (it6.hasNext())
        {
            PageBean clientRelationship = (PageBean) it6.next();

            String taxId = clientRelationship.getValue("taxId");
            String relationship = clientRelationship.getValue("relationshipInd");
            String optionId = clientRelationship.getValue("optionId");
            String clientRoleFK = clientRelationship.getValue("clientRoleFK");
            String riderNumber = Util.initString(clientRelationship.getValue("riderNumber"), "0");
            String contractClientPK = clientRelationship.getValue("contractClientPK");

            String crKey = taxId + riderNumber  + optionId + relationship + clientRoleFK + contractClientPK;

            ContractClientVO contractClientVO = (ContractClientVO) contractClientVOs.get(crKey);

            if (riderNumber.equals("0"))
            {
                segmentVO.addContractClientVO(contractClientVO);
            }
            else
            {
                SegmentVO riderSegment = (SegmentVO) riderVOs.get(riderNumber + "_" + optionId);
                riderSegment.addContractClientVO(contractClientVO);
            }
        }
    }

    /**
     * Adds agents to the SegmentVO upon build
     * @param appReqBlock
     * @param segmentVO
     * @param riderVOs
     * @param contractClientVOs
     */
    private void attachAgentsForBuild(AppReqBlock appReqBlock, SegmentVO segmentVO, Map riderVOs, Map contractClientVOs)
    {
//        AgentHierarchyVO[] agentHierarchyVOs = (AgentHierarchyVO[])appReqBlock.getHttpSession().getAttribute("tempUIAgentHierarchyVOs");

        SessionBean agents = appReqBlock.getSessionBean("contractAgents");
        Map agentPageBeans2 = agents.getPageBeans();

        Iterator itA = agentPageBeans2.values().iterator();

        while (itA.hasNext())
        {
            PageBean agentRelationship = (PageBean) itA.next();

            String agentId = agentRelationship.getValue("clientId");
            String[] relationships = agentRelationship.getValues("relationships");
            String[] optionIds = agentRelationship.getValues("optionIds");

            for (int a = 0; a < relationships.length; a++)
            {
                String relationship = relationships[a];
                String optionId = optionIds[a];

                String agentKey = agentId + optionId + relationship;

                ContractClientVO contractClientVO = (ContractClientVO) contractClientVOs.get(agentKey);

                SegmentVO riderVO = (SegmentVO) riderVOs.get(optionId);

                if (riderVO == null)
                {
                    segmentVO.addContractClientVO(contractClientVO);
                }
                else
                {
                    riderVO.addContractClientVO(contractClientVO);
                }
            }
        }
    }

    /**
     * Adds Funds (Investments) to the SegmentVO upon build
     * @param appReqBlock
     * @param segmentVO
     * @param riderVOs
     * @param fundVOs
     */
    private void attachFundsForBuild(AppReqBlock appReqBlock, SegmentVO segmentVO, Map riderVOs, Map fundVOs)
    {
        SessionBean funds = appReqBlock.getSessionBean("contractFunds");

        Iterator it7 = funds.getPageBeans().values().iterator();

        while (it7.hasNext())
        {
            PageBean fundPageBean = (PageBean) it7.next();

            String coverage = fundPageBean.getValue("optionId");

            String filteredFundFK = fundPageBean.getValue("filteredFundFK");
            String key = coverage + filteredFundFK;

            InvestmentVO investmentVO = (InvestmentVO) fundVOs.get(key);

            SegmentVO riderVO = (SegmentVO) riderVOs.get(coverage);

            if (riderVO != null)
            {
                riderVO.addInvestmentVO(investmentVO);
            }
            else
            {
                segmentVO.addInvestmentVO(investmentVO);
            }
        }
    }

    /**
     * Finds all NoteReminders for the given segment and its riders and attaches them to the segment and riders
     * appropriately.
     * <p/>
     * NOTE: This method only exists to prevent CRUD from deleting previously persisted NoteReminders when saving the
     * Segment (due to synching of VOs).  Commented lines are from earlier version when it processed the notes instead
     * of saving directly to the database.
     * @param segmentVO
     * @throws Exception
     */
    private void attachNoteRemindersForBuild(SegmentVO segmentVO) throws Exception
    {
        contract.business.Lookup lookup = new contract.component.LookupComponent();

        //  Base segment
        NoteReminderVO[] noteReminderVOs;
        noteReminderVOs = lookup.findAllNotes(segmentVO.getSegmentPK());

        if (noteReminderVOs != null)
        {
            segmentVO.setNoteReminderVO(noteReminderVOs);
        }

        //  Riders
        SegmentVO[] riderVOs = segmentVO.getSegmentVO();

        for (int i = 0; i < riderVOs.length; i++)
        {
            riderVOs[i].setNoteReminderVO(lookup.findAllNotes(riderVOs[i].getSegmentPK()));
        }

        //        SessionBean contractNotesSessionBean = appReqBlock.getSessionBean("contractNotesSessionBean");
        //
        //        Iterator itC = contractNotesSessionBean.getPageBeans().values().iterator();
        //
        //        while (itC.hasNext())
        //        {
        //            PageBean notePageBean = (PageBean) itC.next();
        //
        //            String key = notePageBean.getValue("key");
        //
        //            NoteReminderVO noteReminderVO = (NoteReminderVO) notesVOs.get(key);
        //
        //            segmentVO.addNoteReminderVO(noteReminderVO);
        //        }
        //
        //        if (segmentVO.getNoteReminderVOCount() > 0)
        //        {
        //            setNoteReminderSequenceNumbers(segmentVO);
        //        }
    }

    /**
     * Adds ContractRequirements to the SegmentVO upon build
     * @param appReqBlock
     * @param segmentVO
     */
    private void attachContractRequirementsForBuild(AppReqBlock appReqBlock, SegmentVO segmentVO)
    {
        ContractRequirementVO[] contractRequirementVOs = (ContractRequirementVO[]) appReqBlock.getHttpSession().getAttribute("contractRequirementVO");

        if (contractRequirementVOs != null)
        {
            for (int i = 0; i < contractRequirementVOs.length; i++)
            {
                if (contractRequirementVOs[i].getContractRequirementPK() < 0)
                {
                    contractRequirementVOs[i].setContractRequirementPK(0);
                }
            }

            segmentVO.setContractRequirementVO(contractRequirementVOs);
        }
    }

    /**
     * Adds Desposits to the SegmentVO upon build
     * @param appReqBlock
     * @param segmentVO
     */
    private void attachDepositsForBuild(AppReqBlock appReqBlock, SegmentVO segmentVO)
    {
        DepositsVO[] depositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("depositsVOs");

        if (depositsVOs != null)
        {
            segmentVO.setDepositsVO(depositsVOs);
        }
    }

    /**
     * Adds the RMD VO to the SegmentVO upon build
     * @param appReqBlock
     * @param segmentVO
     */
    private void attachRMDForBuild(AppReqBlock appReqBlock, SegmentVO segmentVO)
    {
        RequiredMinDistributionVO rmdVO = (RequiredMinDistributionVO) appReqBlock.getHttpSession().getAttribute("rmdVO");

        if (rmdVO != null)
        {
            segmentVO.addRequiredMinDistributionVO(rmdVO);
        }
    }

    /**
     * Adds riders to the SegmentVO upon build
     * @param segmentVO
     * @param riderVOs
     */
    private void attachRidersForBuild(SegmentVO segmentVO, Map riderVOs)
    {
        Iterator it8 = riderVOs.values().iterator();

        while (it8.hasNext())
        {
            SegmentVO riderVO = (SegmentVO) it8.next();
            segmentVO.addSegmentVO(riderVO);
        }
    }

    private Map buildRiders(AppReqBlock appReqBlock, SegmentVO baseSegmentVO)
    {
        Map riderVOs = new HashMap();

        SessionBean riders = appReqBlock.getSessionBean("contractRiders");

        SessionBean deletedRiders = appReqBlock.getSessionBean("contractDeletedRiders");

        Map riderPageBeans = riders.getPageBeans();

        Iterator it = riderPageBeans.values().iterator();

//        String segmentName = baseSegmentVO.getSegmentNameCT();

        while (it.hasNext())
        {
            PageBean rider = (PageBean) it.next();

            SegmentVO riderSegmentVO;

            riderSegmentVO = buildRiderSegmentVO(rider, baseSegmentVO, appReqBlock);

            PremiumDueVO[] riderPremiumDueVOs = (PremiumDueVO[]) appReqBlock.getHttpSession().getAttribute("riderPremiumDueVOs_" + riderSegmentVO.getOptionCodeCT());
            if (riderPremiumDueVOs != null)
            {
                riderSegmentVO.setPremiumDueVO(riderPremiumDueVOs);
            }

            String key = (riderSegmentVO.getRiderNumber() + "") + "_" + riderSegmentVO.getOptionCodeCT();
            riderVOs.put(key, riderSegmentVO);
        }

        //Add deleted riders to the vo in order for them to get removed from the database
        if (deletedRiders != null)
        {
            Map deletedRiderPageBeans = deletedRiders.getPageBeans();

            Iterator it2 = deletedRiderPageBeans.values().iterator();

            while (it2.hasNext())
            {
                PageBean rider = (PageBean) it2.next();

                SegmentVO riderSegmentVO = null;

                riderSegmentVO = buildRiderSegmentVO(rider, baseSegmentVO, appReqBlock);

                PremiumDueVO[] riderPremiumDueVOs = (PremiumDueVO[]) appReqBlock.getHttpSession().getAttribute("riderPremiumDueVOs_" + riderSegmentVO.getOptionCodeCT());
                if (riderPremiumDueVOs != null)
                {
                    riderSegmentVO.setPremiumDueVO(riderPremiumDueVOs);
                }

                String key = (riderSegmentVO.getRiderNumber() + "") + "_" + riderSegmentVO.getOptionCodeCT();
                riderSegmentVO.setVoShouldBeDeleted(true);
                riderVOs.put(key, riderSegmentVO);
            }
        }

        return riderVOs;
    }

    private SegmentVO buildLifeRiderSegmentVO(PageBean rider, List riderVOsArray, SegmentVO riderSegmentVO )
    {
        String faceAmountAsString = Util.initString(rider.getValue("faceAmount"), "0");
        EDITBigDecimal faceAmount = new EDITBigDecimal(faceAmountAsString);

        String startNew7PayIndicator = "N";

        if (rider.getValue("startNew7PayIndicatorStatus").equalsIgnoreCase("checked"))
        {
            startNew7PayIndicator = "Y";
        }

        if (riderSegmentVO.getSegmentPK() != 0)
        {
            long riderLifePK = Long.parseLong(Util.initString(rider.getValue("lifePK"), "0"));
            LifeVO lifeVO = null;

            for (int i = 0; i < riderVOsArray.size(); i++)
            {
                lifeVO = (LifeVO) riderVOsArray.get(i);

                if (riderLifePK == lifeVO.getLifePK())
                {
                    lifeVO.setFaceAmount(faceAmount.getBigDecimal());
                    lifeVO.setStartNew7PayIndicator(startNew7PayIndicator);
                    riderSegmentVO.addLifeVO(lifeVO);

                    break;
                }
            }
        }
        else
        {
            LifeVO newLifeVO = new LifeVO();
            newLifeVO.setLifePK(0);
            newLifeVO.setSegmentFK(0);
            newLifeVO.setFaceAmount(faceAmount.getBigDecimal());
            newLifeVO.setStartNew7PayIndicator(startNew7PayIndicator);

            riderSegmentVO.addLifeVO(newLifeVO);
        }

        return riderSegmentVO;
    }

    private SegmentVO buildRiderSegmentVO(PageBean rider, SegmentVO baseSegmentVO, AppReqBlock appReqBlock)
    {
        SegmentVO riderSegmentVO = new SegmentVO();

        String segmentNamePK = rider.getValue("segmentNamePK");
        String optionCodePK = rider.getValue("optionCodePK");
        String effectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(rider.getValue("effectiveDate"));
        String terminationDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(rider.getValue("terminateDate"));
        String claimStopDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(rider.getValue("claimStopDate"));
        String unitsChangeEffectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(rider.getValue("unitsChangeEffectiveDate"));
        String issueDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(rider.getValue("issueDate"));
        String riderSegmentPK = Util.initString(rider.getValue("riderSegmentPK"), "0");
        String riderStatus = rider.getValue("riderStatus");

        String units = Util.initString(rider.getValue("units"), "0");
        String originalUnits = Util.initString(rider.getValue("originalUnits"), "0");
        String commissionPhaseID = Util.initString(rider.getValue("commissionPhaseID"), "1");
        String commissionPhaseOverride = Util.initString(rider.getValue("commissionPhaseOverride"), null);
        String authorizedSignatureCT = Util.initString(rider.getValue("authorizedSignatureCT"), "");
        String ageAtIssue = Util.initString(rider.getValue("ageAtIssue"), "0");
        String originalStateCT = Util.initString(rider.getValue("originalStateCT"), null);
        String ratedGenderCT =  Util.initString(rider.getValue("ratedGenderCT"), null);
        String underwritingClass = Util.initString(rider.getValue("underwritingClass"), null);
        String groupPlan = Util.initString(rider.getValue("groupPlan"), null);
        String segmentAmount = Util.initString(rider.getValue("segmentAmount"), "0");

        String segmentName = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(segmentNamePK)).getCode();
        String optionCode = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(optionCodePK)).getCode();

        String expiryDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(rider.getValue("expiryDate"));
        String sequence = Util.initString(rider.getValue("sequence"), null);
        String location = Util.initString(rider.getValue("location"), null);
        String indivAnnPremium = Util.initString(rider.getValue("indivAnnPremium"), "0");

        riderSegmentVO.setSegmentPK(Long.parseLong(riderSegmentPK));
        riderSegmentVO.setSegmentFK(baseSegmentVO.getSegmentPK());
        riderSegmentVO.setContractGroupFK(baseSegmentVO.getContractGroupFK());
        riderSegmentVO.setBillScheduleFK(baseSegmentVO.getBillScheduleFK());
        riderSegmentVO.setBatchContractSetupFK(baseSegmentVO.getBatchContractSetupFK());
        riderSegmentVO.setDepartmentLocationFK(baseSegmentVO.getDepartmentLocationFK());
        riderSegmentVO.setPriorContractGroupFK(baseSegmentVO.getPriorContractGroupFK());
        riderSegmentVO.setOriginalContractGroupFK(baseSegmentVO.getOriginalContractGroupFK());

        riderSegmentVO.setContractNumber(Util.initString(baseSegmentVO.getContractNumber(), null));
        riderSegmentVO.setProductStructureFK(baseSegmentVO.getProductStructureFK());
        riderSegmentVO.setEffectiveDate(effectiveDate);
        riderSegmentVO.setApplicationSignedDate(baseSegmentVO.getApplicationSignedDate());
        riderSegmentVO.setApplicationReceivedDate(baseSegmentVO.getApplicationReceivedDate());
        riderSegmentVO.setClaimStopDate(claimStopDate);

        riderSegmentVO.setCostBasis(new EDITBigDecimal().getBigDecimal());
        riderSegmentVO.setRecoveredCostBasis(new EDITBigDecimal().getBigDecimal());
        riderSegmentVO.setTerminationDate(terminationDate);
        riderSegmentVO.setStatusChangeDate(null);
        riderSegmentVO.setExpiryDate(expiryDate);
        riderSegmentVO.setSequence(sequence);
        riderSegmentVO.setLocation(location);
        riderSegmentVO.setIndivAnnPremium(new EDITBigDecimal(indivAnnPremium).getBigDecimal());

        if (riderSegmentPK.equals("0"))
        {
            riderSegmentVO.setSegmentStatusCT(Util.initString(riderStatus, "Pending"));
        }
        else
        {
            riderSegmentVO.setSegmentStatusCT(Util.initString(riderStatus, riderStatus));
        }

        riderSegmentVO.setSegmentNameCT(Util.initString(segmentName, null));
        riderSegmentVO.setOptionCodeCT(Util.initString(optionCode, null));
        riderSegmentVO.setIssueStateCT(Util.initString(baseSegmentVO.getIssueStateCT(), null));

        riderSegmentVO.setCharges(new EDITBigDecimal().getBigDecimal());
        riderSegmentVO.setLoads(new EDITBigDecimal().getBigDecimal());
        riderSegmentVO.setFees(new EDITBigDecimal().getBigDecimal());
        riderSegmentVO.setTaxReportingGroup(Util.initString(baseSegmentVO.getTaxReportingGroup(), null));
        riderSegmentVO.setIssueDate(issueDate);
        riderSegmentVO.setSegmentChangeEffectiveDate(unitsChangeEffectiveDate);
        riderSegmentVO.setCashWithAppInd(Util.initString(baseSegmentVO.getCashWithAppInd(), null));

        riderSegmentVO.setWaiverInEffect("N"); // default to 'N'
        riderSegmentVO.setFreeAmountRemaining(baseSegmentVO.getFreeAmountRemaining());
        riderSegmentVO.setFreeAmount(baseSegmentVO.getFreeAmount());
        riderSegmentVO.setUnits(new EDITBigDecimal(units).getBigDecimal());
        riderSegmentVO.setOriginalUnits(new EDITBigDecimal(originalUnits).getBigDecimal());
        riderSegmentVO.setCommissionPhaseID(Integer.parseInt(commissionPhaseID));
        riderSegmentVO.setCommissionPhaseOverride(commissionPhaseOverride);
        riderSegmentVO.setAgeAtIssue(Integer.parseInt(ageAtIssue));
        riderSegmentVO.setOriginalStateCT(originalStateCT);
        riderSegmentVO.setRatedGenderCT(ratedGenderCT);
        riderSegmentVO.setUnderwritingClassCT(underwritingClass);
        riderSegmentVO.setGroupPlan(groupPlan);
        riderSegmentVO.setAmount(new EDITBigDecimal(segmentAmount).getBigDecimal());
        riderSegmentVO.setWaiveFreeLookIndicator("N");
        riderSegmentVO.setPostIssueStatusCT(rider.getValue("postIssueStatus"));
        riderSegmentVO.setCreationOperator(Util.initString(rider.getValue("creationOperator"), appReqBlock.getUserSession().getUsername()));
        riderSegmentVO.setCreationDate(DateTimeUtil.formatMMDDYYYYToYYYYMMDD(rider.getValue("creationDate")));
        riderSegmentVO.setAuthorizedSignatureCT(Util.initString(authorizedSignatureCT, null));
        riderSegmentVO.setDateInEffect(Util.initString(rider.getValue("dateInEffect"), null));
        riderSegmentVO.setExchangeInd(Util.initString(rider.getValue("exchangeInd"), "N"));
        riderSegmentVO.setAnnualPremium(new EDITBigDecimal(rider.getValue("annualPremium")).getBigDecimal());
        riderSegmentVO.setQuoteDate(Util.initString(rider.getValue("quoteDate"), null));
        riderSegmentVO.setIssueStateORInd(Util.initString(rider.getValue("issueStateOrInd"), null));
        String multiple = Util.initString((String)rider.getValue("multiple"), "0");
        if (multiple.equalsIgnoreCase("Please Select"))
        {
        	multiple = "0";
        }
        
        riderSegmentVO.setEOBMultiple(Integer.parseInt(multiple));
        riderSegmentVO.setGIOOption(Util.initString(rider.getValue("gioOption"), null));
        riderSegmentVO.setRiderNumber(Integer.parseInt(rider.getValue("riderNumber")));

        if (segmentName.equalsIgnoreCase("Life"))
        {
            List riderVOsArray = (List) appReqBlock.getHttpSession().getAttribute("riderLifeVO");
            riderSegmentVO = buildLifeRiderSegmentVO(rider, riderVOsArray, riderSegmentVO);
        }
        return riderSegmentVO;
    }

    private void clearAllTransactionSessions(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getSessionBean("contractTransactionSessionBean").clearState();
        appReqBlock.getSessionBean("contractTransactions").clearState();
        appReqBlock.getSessionBean("contractPayeeOverrides").clearState();
        appReqBlock.getSessionBean("contractInvestmentOverrides").clearState();
        appReqBlock.getSessionBean("contractChargeOverrides").clearState();

    }

    private void clearAllContractSessions(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getSessionBean("contractMainSessionBean").clearState();
        appReqBlock.getSessionBean("contractNotesSessionBean").clearState();
        appReqBlock.getSessionBean("contractHistoryChargesSessionBean").clearState();
        appReqBlock.getSessionBean("contractTaxesSessionBean").clearState();

        appReqBlock.getSessionBean("contractClients").clearState();

        SessionBean riders = appReqBlock.getSessionBean("contractRiders");

        Map riderPageBeans = riders.getPageBeans();

        Iterator it = riderPageBeans.values().iterator();

        while (it.hasNext())
        {
            PageBean rider = (PageBean) it.next();
            String optionCodePK = rider.getValue("optionCodePK");
            String optionCode = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(optionCodePK)).getCode();

            appReqBlock.getHttpSession().removeAttribute("riderPremiumDueVOs_" + optionCode);
        }

        appReqBlock.getSessionBean("contractRiders").clearState();
        if (appReqBlock.getSessionBean("contractDeletedRiders") != null)
        {
            appReqBlock.getSessionBean("contractDeletedRiders").clearState();
        }
        appReqBlock.getSessionBean("contractStateBean").clearState();
        appReqBlock.getSessionBean("contractAgents").clearState();
        appReqBlock.getSessionBean("contractFunds").clearState();
        appReqBlock.getSessionBean("contractHistories").clearState();
        appReqBlock.getSessionBean("contractNotes").clearState();
        appReqBlock.getSessionBean("contractChargeOverrides").clearState();

        appReqBlock.getSessionBean("contractStateBean").clearState();

        appReqBlock.getHttpSession().removeAttribute("depositVOs");
        appReqBlock.getHttpSession().removeAttribute("uiAgentHierarchyVOs");
        appReqBlock.getHttpSession().removeAttribute("quoteVO");
        appReqBlock.getHttpSession().removeAttribute("contractRequirementVOs");
        appReqBlock.getHttpSession().removeAttribute("rmdVO");

        appReqBlock.getSessionBean("contractStateBean").putValue("currentPage", null);
        appReqBlock.getSessionBean("contractStateBean").putValue("previousPage", null);
        appReqBlock.getHttpSession().removeAttribute("changedEditTrxVOs");
        appReqBlock.getHttpSession().removeAttribute("suppContractNumbers");
        appReqBlock.getHttpSession().removeAttribute("loanSettlement");
        appReqBlock.getHttpSession().removeAttribute("premiumDueVOs");
        appReqBlock.getHttpSession().removeAttribute("lifeVO");
        appReqBlock.getHttpSession().removeAttribute("changedBilling");

        appReqBlock.getHttpSession().setAttribute("contract.saveRMDModifications", "false");

        clearAllTransactionSessions(appReqBlock);
    }

    //    private String calculateIssueAge(PageBean contractClientPageBean, String segmentName) throws Exception
    //    {
    //        String ageCalcOption = null;
    //        if (segmentName.equalsIgnoreCase("Life"))
    //        {
    //            ageCalcOption = "next";
    //        }
    //        else
    //        {
    //            ageCalcOption = "last";
    //        }
    //
    //        String effectiveDate = contractClientPageBean.getValue("effectiveDate");
    //        EDITDate ceEffDate = null;
    //        if (!effectiveDate.equals("0000/00/00"))
    //        {
    //            ceEffDate = new EDITDate(effectiveDate);
    //        }
    //
    //        String dobMonth = contractClientPageBean.getValue("dobMonth");
    //        String dobDay = contractClientPageBean.getValue("dobDay");
    //        String dobYear = contractClientPageBean.getValue("dobYear");
    //        String dateOfBirth = "";
    //        EDITDate ceDOB = null;
    //        if (!dobMonth.equals(""))
    //        {
    //            dateOfBirth = DateFormatter.buildFormattedDateString(dobYear,
    //                    dobMonth,
    //                    dobDay);
    //            if (!dateOfBirth.equals("0000/00/00"))
    //            {
    //                ceDOB = new EDITDate(dateOfBirth);
    //            }
    //        }
    //
    //        int issueAge = 0;
    //
    //        if (ceEffDate != null &&
    //                ceDOB != null)
    //        {
    //            issueAge = ceEffDate.getAge(ceDOB, ageCalcOption);
    //        }
    //
    //        contractClientPageBean.putValue("issueAge", issueAge + "");
    //
    //        String relationship = contractClientPageBean.getValue("relationshipInd");
    //        if (relationship.equalsIgnoreCase("OWN") && issueAge == 0)
    //        {
    //            return "Owner Issue Age Not Calculated";
    //        }
    //        else
    //        {
    //            return "";
    //        }
    //    }
    private String calculateIssueAge(PageBean contractClientPageBean, String segmentName) throws Exception
    {
        int issueAge = 0;

        String effectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractClientPageBean.getValue("effectiveDate"));

        String birthDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractClientPageBean.getValue("dob"));

        if ((birthDate != null) && (effectiveDate != null))
        {
            try
            {
                Contract contractComponent = new ContractComponent();

                if (segmentName.equalsIgnoreCase("Life"))
                {
                    issueAge = contractComponent.calculateIssueAgeForLifeContracts(birthDate, effectiveDate);
                }
                else
                {
                    issueAge = contractComponent.calculateIssueAge(birthDate, effectiveDate);
                }
            }
            catch (EDITContractException e)
            {
                issueAge = 0;
            }
        }

        contractClientPageBean.putValue("issueAge", issueAge + "");

        String relationship = contractClientPageBean.getValue("relationshipInd");

        if (relationship.equalsIgnoreCase("OWN") && (issueAge == 0))
        {
            return "Owner Issue Age Not Calculated";
        }
        else
        {
            return "";
        }
    }

    private void setOwnerIssueAge(SessionBean clients) throws Exception
    {
        String ownerKey = "";
        String annuitantIssueAge = "0";
        Map clientPageBeans = clients.getPageBeans();
        Iterator clientEnum = clientPageBeans.keySet().iterator();

        while (clientEnum.hasNext())
        {
            String key = (String) clientEnum.next();
            PageBean pb = clients.getPageBean(key);
            String relationship = pb.getValue("relationshipInd");

            if (relationship.equalsIgnoreCase("OWN"))
            {
                ownerKey = key;
            }
            else if (relationship.equalsIgnoreCase("ANN"))
            {
                annuitantIssueAge = pb.getValue("issueAge");
            }
        }

        if (!ownerKey.equals("") && !annuitantIssueAge.equals("0"))
        {
            clients.getPageBean(ownerKey).putValue("issueAge", annuitantIssueAge);
        }
    }

    private void validateContract(ContractVO contractVO, AppReqBlock appReqBlock) throws SPException, PortalEditingException
    {
        SPOutputVO spOutputVO = null;
        String processName = "ContractSave";

        ValidationVO[] validationVOs = null;
        PortalEditingException editingException = null;

        Contract contractComponent = new ContractComponent();

        try
        {
            spOutputVO = contractComponent.validateContract(contractVO, processName);
        }
        catch (SPException e)
        {
            System.out.println(e);

            e.printStackTrace(); //To change body of catch statement use File | Settings | File Templates.

            throw e;
        }
        catch (EDITValidationException e)
        {
            System.out.println(e);

            e.printStackTrace();

            throw new PortalEditingException(e.getMessage());
        }

        validationVOs = spOutputVO.getValidationVO();

        if (spOutputVO.getValidationVOCount() > 0)
        {
            editingException = new PortalEditingException();
            editingException.setValidationVOs(validationVOs);

            appReqBlock.getSessionBean("contractStateBean").putValue("contractNumber", contractVO.getSegmentVO().getContractNumber());
            throw editingException;
        }
    }

//    private void validateTransactions(TransactionVO transactionVO, String effectiveDate, long companyStructurePK) throws SPException, PortalEditingException, RuntimeException
//    {
//        String processName = "TransactionSave";
//
//        SPOutputVO spOutputVO = null;
//        ValidationVO[] validationVOs = null;
//
//        PortalEditingException editingException = null;
//
//        try
//        {
//            spOutputVO = new CalculatorComponent().processScript(transactionVO, processName, "*", "*", effectiveDate, companyStructurePK, false);
//        }
//        catch (SPException e)
//        {
//            System.out.println(e);
//
//            e.printStackTrace(); //To change body of catch statement use File | Settings | File Templates.
//
//            throw e;
//        }
//
//        validationVOs = spOutputVO.getValidationVO();
//
//        if (spOutputVO.getValidationVOCount() > 0)
//        {
//            editingException = new PortalEditingException();
//            editingException.setValidationVOs(validationVOs);
//
//            throw editingException;
//        }
//    }

    //    private void validateContract(ContractVO contractVO, ErrorStructureVO contractErrorStructure, AppReqBlock appReqBlock) throws Exception, PortalEditingException {
    //
    //        Editing editingComp = (Editing) appReqBlock.getWebService("editing-service");
    //
    //        // Validate Error Main - requires Base SegmentVO and PayoutVO
    //        SegmentVO baseSegmentVO = contractVO.getSegmentVO();
    //
    //        long companyStructurePK = baseSegmentVO.getCompanyStructureFK();
    //
    //        //set event and eventType from quoteVO
    //        String status = baseSegmentVO.getSegmentStatusCT();
    //
    //        String option = baseSegmentVO.getOptionCodeCT();
    //
    //        contractErrorStructure.setEventName(status);
    //        contractErrorStructure.setEventTypeName(baseSegmentVO.getIssueStateCT());
    //
    //        // Collect all the parameters - even if they aren't being used in the edit
    //        ParameterVO[] baseSegmentParameters =  editingComp.buildParameterVOs(baseSegmentVO);
    //        Object voObject = new Object();
    //
    //        EditErrorVO[] contractMainErrors = editingComp.validateEdits(companyStructurePK, baseSegmentParameters, contractErrorStructure, voObject);
    //
    //        if (contractMainErrors != null)
    //        {
    //            PortalEditingException editingException = new PortalEditingException();
    //            editingException.setEditErrorVOs(contractMainErrors);
    //            if (option.equalsIgnoreCase("DFA"))
    //            {
    //                editingException.setReturnPage(CONTRACT_DEFERRED_ANNUITY_MAIN);
    //            }
    //            else if (option.equalsIgnoreCase("VL") ||
    //                     option.equalsIgnoreCase("UL") ||
    //                     option.equalsIgnoreCase("TL"))
    //            {
    //                editingException.setReturnPage(CONTRACT_LIFE_MAIN);
    //            }
    //            else
    //            {
    //                editingException.setReturnPage(CONTRACT_MAIN);
    //            }
    //            appReqBlock.getSessionBean("contractStateBean").putValue("contractNumber",
    //                                                          contractVO.getSegmentVO().getContractNumber());
    //            throw editingException;
    //        }
    //    }
    //    private void validateTransactions(EDITTrxVO editTrxVO,
    //                                       SegmentVO segmentVO,
    //                                        ErrorStructureVO errorStructure,
    //                                         AppReqBlock appReqBlock) throws Exception, PortalEditingException {
    //
    //        Editing editingComp = (Editing) appReqBlock.getWebService("editing-service");
    //
    //        long companyStructurePK = segmentVO.getCompanyStructureFK();
    //
    //        //set event and eventType from quoteVO
    //        String status = "*";
    //        String option = segmentVO.getOptionCodeCT();
    //
    //        errorStructure.setEventName(status);
    //        errorStructure.setEventTypeName(option);
    //
    //        // Collect all the parameters - even if they aren't being used in the edit, segmentVO only has allocations
    //        ParameterVO[] transactionsParameters =  editingComp.buildParameterVOs(editTrxVO);
    //        Object voObject = new Object();
    //
    //        EditErrorVO[] transactionErrors = editingComp.validateEdits(companyStructurePK, transactionsParameters, errorStructure, voObject);
    //
    //        if (transactionErrors != null){
    //
    //            PortalEditingException editingException = new PortalEditingException();
    //            editingException.setEditErrorVOs(transactionErrors);
    //
    //            throw editingException;
    //        }
    //     }
    //
    //     private void validateSuspense(SuspenseVO suspenseVO,
    //                                       long companyStructurePK,
    //                                       String option,
    //                                        ErrorStructureVO errorStructure,
    //                                         AppReqBlock appReqBlock) throws Exception, PortalEditingException
    //     {
    //
    //        Editing editingComp = (Editing) appReqBlock.getWebService("editing-service");
    //
    //        //set event and eventType from quoteVO
    //        errorStructure.setEventName("*");
    //        errorStructure.setEventTypeName(option);
    //
    //        // Collect all the parameters - even if they aren't being used in the edit
    //        ParameterVO[] suspenseParameters =  editingComp.buildParameterVOs(suspenseVO);
    //        Object voObject = new Object();
    //
    //        EditErrorVO[] suspenseErrors = editingComp.validateEdits(companyStructurePK, suspenseParameters, errorStructure, voObject);
    //
    //        if (suspenseErrors != null){
    //
    //            PortalEditingException editingException = new PortalEditingException();
    //            editingException.setEditErrorVOs(suspenseErrors);
    //            editingException.setReturnPage(CONTRACT_SUSPENSE);
    //
    //            throw editingException;
    //        }
    //    }
    protected String showEditingExceptionDialog(AppReqBlock appReqBlock) throws Exception
    {
        PortalEditingException editingException = (PortalEditingException) appReqBlock.getHttpSession().getAttribute("portalEditingException");

        // Remove editingException from Session (to clear it), and move it to request scope.
        appReqBlock.getHttpSession().removeAttribute("portalEditingException");

        appReqBlock.getHttpServletRequest().setAttribute("portalEditingException", editingException);

        return EDITING_EXCEPTION_DIALOG;
    }

    private String showLockedValuesDialog(AppReqBlock appReqBlock) throws Exception
    {
        PortalEditingException editingException = (PortalEditingException) appReqBlock.getHttpSession().getAttribute("portalEditingException");

        // Remove editingException from Session (to clear it), and move it to request scope.
        appReqBlock.getHttpSession().removeAttribute("portalEditingException");

        appReqBlock.getHttpServletRequest().setAttribute("portalEditingException", editingException);

        return LOCKED_VALUES_DIALOG;
    }

    private String showInvalidInvestmentsDialog(AppReqBlock appReqBlock) throws Exception
    {
        PortalEditingException editingException = (PortalEditingException) appReqBlock.getHttpSession().getAttribute("portalEditingException");

        // Remove editingException from Session (to clear it), and move it to request scope.
        appReqBlock.getHttpSession().removeAttribute("portalEditingException");

        appReqBlock.getHttpServletRequest().setAttribute("portalEditingException", editingException);

        return INVALID_INVESTMENTS_DIALOG;
    }

    private String performPageEditing(AppReqBlock appReqBlock) throws Exception
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        CodeTableVO[] optionCodes = codeTableWrapper.getCodeTableEntries("OPTIONCODE");

        SessionBean clients = appReqBlock.getSessionBean("contractClients");
        SessionBean funds = appReqBlock.getSessionBean("contractFunds");

        SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
        PageBean formBean = contractMainSessionBean.getPageBean("formBean");
        String optionId = formBean.getValue("optionId");

        Map allocationPctHT = new HashMap();
        Map fundPageBeans = funds.getPageBeans();

        Iterator it = fundPageBeans.values().iterator();

        while (it.hasNext())
        {
            PageBean fundBean = (PageBean) it.next();

            if (fundBean.getValue("status") == null || fundBean.getValue("status").equals(""))
            {
                String coverage = fundBean.getValue("optionId");
                boolean coverageFound = false;

                for (int o = 0; o < optionCodes.length; o++)
                {
                    if (optionCodes[o].getCode().equalsIgnoreCase(coverage))
                    {
                        coverageFound = true;

                        break;
                    }
                }

                if (!coverageFound)
                {
                    coverage = codeTableWrapper.getCodeTableEntry(Long.parseLong(coverage)).getCode();
                }

                String allocPcnt = fundBean.getValue("allocationPercent");
                String overrideStatus = fundBean.getValue("overrideStatus");

                if (overrideStatus.equalsIgnoreCase("P"))
                {
                    //double allocationPct = Double.parseDouble(allocPcnt);
                    EDITBigDecimal allocationPct = new EDITBigDecimal(allocPcnt);

                    if (allocationPctHT.containsKey(coverage))
                    {
                        EDITBigDecimal coverageAllocPct = (EDITBigDecimal) allocationPctHT.get(coverage);
                        coverageAllocPct = coverageAllocPct.addEditBigDecimal(Util.roundAllocationToFourDecimals(allocationPct));
                        allocationPctHT.put(coverage, Util.roundAllocationToFourDecimals(coverageAllocPct));
                    }
                    else
                    {
                        allocationPctHT.put(coverage, Util.roundAllocationToFourDecimals(allocationPct));
                    }
                }
            }
        }

        Iterator htKeys = allocationPctHT.keySet().iterator();
        boolean totalFundAllocation100 = true;
        String allocationCoverage = "";

        while (htKeys.hasNext())
        {
            String coverage = (String) htKeys.next();

            EDITBigDecimal totalAllocation = (EDITBigDecimal) allocationPctHT.get(coverage);

            if (!totalAllocation.isEQ(new EDITBigDecimal("1")))
            {
                totalFundAllocation100 = false;
                allocationCoverage = coverage;
            }
        }

        Map payeeAllocPctHT = new HashMap();
        Map pbeAllocPctHT = new HashMap();
        Map pbeAllocDollHT = new HashMap();
        Map cbeAllocPctHT = new HashMap();
        Map cbeAllocDollHT = new HashMap();
        Map clientPageBeans = clients.getPageBeans();
        boolean ownerFound = false;
        boolean annuitantFound = false;

        Iterator clientIT = clientPageBeans.values().iterator();

        while (clientIT.hasNext())
        {
            PageBean clientBean = (PageBean) clientIT.next();

            String relationshipType = clientBean.getValue("relationshipInd");
            String optionCode = clientBean.getValue("optionId");
            String terminationDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(clientBean.getValue("terminationDate"));
            String contractClientOverrideStatus = clientBean.getValue("contractClientOverrideStatus");

            if (relationshipType.equalsIgnoreCase("OWN") && terminationDate.equalsIgnoreCase(EDITDate.DEFAULT_MAX_DATE))
            {
                ownerFound = true;
            }

            if (relationshipType.equalsIgnoreCase("ANN") && terminationDate.equalsIgnoreCase(EDITDate.DEFAULT_MAX_DATE))
            {
                annuitantFound = true;
            }

            String allocationPct = "";
            String allocationDollars = "";
            String splitEqualInd = "";

            String[] allocPcnts = clientBean.getValues("allocationPercents");
            String[] allocDollars = clientBean.getValues("allocationDollars");
            String[] ccAllocOverrideStatuses = clientBean.getValues("ccAllocOverrideStatuses");
            String[] splitEquals = clientBean.getValues("splitEquals");

            for (int s = 0; s < ccAllocOverrideStatuses.length; s++)
            {
                String status = ccAllocOverrideStatuses[s];

                if (status.equalsIgnoreCase("P"))
                {
                    clientBean.putValue("allocationPercent", allocPcnts[s]);
                    clientBean.putValue("allocationDollar", allocDollars[s]);
                    allocationPct = allocPcnts[s];
                    allocationDollars = allocDollars[s];
                    splitEqualInd = splitEquals[s];

                    break;
                }
            }

            if (relationshipType.equalsIgnoreCase("PAY"))
            {
                if (!allocationPct.equals(""))
                {
                    if (payeeAllocPctHT.containsKey(optionCode))
                    {
                        EDITBigDecimal coverageAllocPct = (EDITBigDecimal) payeeAllocPctHT.get(optionCode);
                        coverageAllocPct = coverageAllocPct.addEditBigDecimal(Util.roundAllocationToFourDecimals(new EDITBigDecimal(allocationPct)));
                        payeeAllocPctHT.put(optionCode, Util.roundAllocationToFourDecimals(coverageAllocPct));
                    }
                    else
                    {
                        payeeAllocPctHT.put(optionCode, Util.roundAllocationToFourDecimals(new EDITBigDecimal(allocationPct)));
                    }
                }
            }

            if (relationshipType.equalsIgnoreCase("PBE") &&
                (terminationDate.equalsIgnoreCase(EDITDate.DEFAULT_MAX_DATE) && !contractClientOverrideStatus.equalsIgnoreCase("D")))
            {
                if (((!allocationPct.equals("") && new EDITBigDecimal(allocationPct).isGT("0")) ||
                     (!allocationDollars.equals("") && new EDITBigDecimal(allocationDollars).isGT("0"))) &&
                    !splitEqualInd.equalsIgnoreCase("Y"))
                {
                    if (!allocationPct.equals("") && new EDITBigDecimal(allocationPct).isGT("0"))
                    {
                        if (pbeAllocPctHT.containsKey(optionCode))
                        {
                            EDITBigDecimal coverageAllocPct = (EDITBigDecimal) pbeAllocPctHT.get(optionCode);
                            coverageAllocPct = coverageAllocPct.addEditBigDecimal(Util.roundAllocationToFourDecimals(new EDITBigDecimal(allocationPct)));
                            pbeAllocPctHT.put(optionCode, Util.roundAllocationToFourDecimals(coverageAllocPct));
                        }
                        else
                        {
                            pbeAllocPctHT.put(optionCode, Util.roundAllocationToFourDecimals(new EDITBigDecimal(allocationPct)));
                        }
                    }
                    else if (!allocationDollars.equals("") && new EDITBigDecimal(allocationDollars).isGT("0"))
                    {
                        if (pbeAllocDollHT.containsKey(optionCode))
                        {
                            EDITBigDecimal coverageAllocDoll = new EDITBigDecimal((String) pbeAllocDollHT.get(optionCode));
                            coverageAllocDoll = coverageAllocDoll.addEditBigDecimal(new EDITBigDecimal(allocationDollars));
                            pbeAllocDollHT.put(optionCode, coverageAllocDoll.toString());
                        }
                        else
                        {
                            pbeAllocDollHT.put(optionCode, allocationDollars);
                        }
                    }
                }
            }

            if (relationshipType.equalsIgnoreCase("CBE") &&
                (terminationDate.equalsIgnoreCase(EDITDate.DEFAULT_MAX_DATE) && !contractClientOverrideStatus.equalsIgnoreCase("D")))
            {
                if (((!allocationPct.equals("") && new EDITBigDecimal(allocationPct).isGT("0")) ||
                     (!allocationDollars.equals("") && new EDITBigDecimal(allocationDollars).isGT("0"))) &&
                    !splitEqualInd.equalsIgnoreCase("Y"))
                {
                    if (!allocationPct.equals("") && new EDITBigDecimal(allocationPct).isGT("0"))
                    {
                        if (cbeAllocPctHT.containsKey(optionCode))
                        {
                            EDITBigDecimal coverageAllocPct = (EDITBigDecimal) cbeAllocPctHT.get(optionCode);
                            coverageAllocPct = coverageAllocPct.addEditBigDecimal(Util.roundAllocationToFourDecimals(new EDITBigDecimal(allocationPct)));
                            cbeAllocPctHT.put(optionCode, Util.roundAllocationToFourDecimals(coverageAllocPct));
                        }
                        else
                        {
                            cbeAllocPctHT.put(optionCode, Util.roundAllocationToFourDecimals(new EDITBigDecimal(allocationPct)));
                        }
                    }
                    else if (!allocationDollars.equals("") && new EDITBigDecimal(allocationDollars).isGT("0"))
                    {
                        if (cbeAllocDollHT.containsKey(optionCode))
                        {
                            EDITBigDecimal coverageAllocDoll = new EDITBigDecimal((String) cbeAllocDollHT.get(optionCode));
                            coverageAllocDoll = coverageAllocDoll.addEditBigDecimal(new EDITBigDecimal(allocationDollars));
                            cbeAllocDollHT.put(optionCode, coverageAllocDoll.toString());
                        }
                        else
                        {
                            cbeAllocDollHT.put(optionCode, allocationDollars);
                        }
                    }
                }
            }
        }

        Iterator payeeHTKeys = payeeAllocPctHT.keySet().iterator();
        Iterator pbeHTKeys = pbeAllocPctHT.keySet().iterator();
        Iterator pbeDollarHTKeys = pbeAllocDollHT.keySet().iterator();
        Iterator cbeHTKeys = cbeAllocPctHT.keySet().iterator();
        Iterator cbeDollarHTKeys = cbeAllocDollHT.keySet().iterator();
        boolean totalPayeeCoverageAllocation100 = true;
        boolean totalPBECoverageAllocation100 = true;
        boolean totalCBECoverageAllocation100 = true;
        String payeeAllocationCoverage = "";
        String pbeAllocationCoverage = "";
        String cbeAllocationCoverage = "";

        while (payeeHTKeys.hasNext())
        {
            String coverage = (String) payeeHTKeys.next();

            EDITBigDecimal totalAllocation = (EDITBigDecimal) payeeAllocPctHT.get(coverage);

            if (!totalAllocation.isEQ("1"))
            {
                totalPayeeCoverageAllocation100 = false;

                if (Util.isANumber(coverage))
                {
                    payeeAllocationCoverage = codeTableWrapper.getCodeTableEntry(Long.parseLong(coverage)).getCode();
                }
                else
                {
                    payeeAllocationCoverage = coverage;
                }
            }
        }

        while (pbeHTKeys.hasNext())
        {
            String coverage = (String) pbeHTKeys.next();

            EDITBigDecimal totalAllocation = (EDITBigDecimal) pbeAllocPctHT.get(coverage);

            if (!totalAllocation.isEQ("1"))
            {
                totalPBECoverageAllocation100 = false;

                if (Util.isANumber(coverage))
                {
                    pbeAllocationCoverage = codeTableWrapper.getCodeTableEntry(Long.parseLong(coverage)).getCode();
                }
                else
                {
                    pbeAllocationCoverage = coverage;
                }
            }
        }

        EDITBigDecimal totalPBEDollarAlloc = new EDITBigDecimal();
        while (pbeDollarHTKeys.hasNext())
        {
            String coverage = (String) pbeDollarHTKeys.next();

            totalPBEDollarAlloc = totalPBEDollarAlloc.addEditBigDecimal(new EDITBigDecimal((String) pbeAllocDollHT.get(coverage)));
        }

        while (cbeHTKeys.hasNext())
        {
            String coverage = (String) cbeHTKeys.next();

            EDITBigDecimal totalAllocation = (EDITBigDecimal) cbeAllocPctHT.get(coverage);

            if (!totalAllocation.isEQ("1"))
            {
                totalCBECoverageAllocation100 = false;

                if (Util.isANumber(coverage))
                {
                    cbeAllocationCoverage = codeTableWrapper.getCodeTableEntry(Long.parseLong(coverage)).getCode();
                }
                else
                {
                    cbeAllocationCoverage = coverage;
                }
            }
        }

        EDITBigDecimal totalCBEDollarAlloc = new EDITBigDecimal();
        while (cbeDollarHTKeys.hasNext())
        {
            String coverage = (String) cbeDollarHTKeys.next();

            totalCBEDollarAlloc = totalCBEDollarAlloc.addEditBigDecimal(new EDITBigDecimal((String) cbeAllocDollHT.get(coverage)));
        }

        if (!totalFundAllocation100)
        {
            appReqBlock.getHttpServletRequest().setAttribute("investmentMessage", "Total Fund Allocation for " + allocationCoverage + " Must Be 100%");

            return CONTRACT_INVESTMENTS;
        }
        else if (!ownerFound)
        {
            appReqBlock.getHttpServletRequest().setAttribute("clientMessage", "Active Owner Role Not Found For Contract");

            return CONTRACT_NON_PAYEE;
        }
        else if (!annuitantFound && optionId.equalsIgnoreCase("DFA"))
        {
            appReqBlock.getHttpServletRequest().setAttribute("clientMessage", "Active Annuitant Role Not Found For Contract");

            return CONTRACT_NON_PAYEE;
        }
        else if (!totalPayeeCoverageAllocation100)
        {
            appReqBlock.getHttpServletRequest().setAttribute("payeeMessage", "Total Payee Allocation for " + payeeAllocationCoverage + " Must Be 100%");

            return CONTRACT_PAYEE;
        }
        else if (!totalPBECoverageAllocation100 && totalPBEDollarAlloc.equals(new EDITBigDecimal()))
        {
            appReqBlock.getHttpServletRequest().setAttribute("beneMessage", "Total Primary Bene Allocation for " + pbeAllocationCoverage + " Must Be 100%");

            return CONTRACT_NON_PAYEE;
        }
        else if (!totalCBECoverageAllocation100 && totalCBEDollarAlloc.equals(new EDITBigDecimal()))
        {
            appReqBlock.getHttpServletRequest().setAttribute("beneMessage", "Total Contingent Bene Allocation for " + cbeAllocationCoverage + " Must Be 100%");

            return CONTRACT_NON_PAYEE;
        }
        else
        {
            return "";
        }
    }

    public ChangeHistoryVO setChangeValues(ChangeHistoryVO changeHistoryVO, String fundName) throws Exception
    {
        String beforeValue = changeHistoryVO.getBeforeValue();
        String afterValue = changeHistoryVO.getAfterValue();

        if (!beforeValue.equals(""))
        {
            changeHistoryVO.setBeforeValue(fundName);
        }

        if (!afterValue.equals(""))
        {
            changeHistoryVO.setAfterValue(fundName);
        }

        return changeHistoryVO;
    }

    public ChangeHistoryVO getClientIds(ChangeHistoryVO changeHistoryVO, AppReqBlock appReqBlock) throws Exception
    {
        String beforeValue = changeHistoryVO.getBeforeValue();
        String afterValue = changeHistoryVO.getAfterValue();

        ClientDetailVO[] clientDetailVO = null;

        client.business.Lookup clientLookup = new client.component.LookupComponent();
        role.business.Lookup roleLookup = new role.component.LookupComponent();

        if ((beforeValue != null) && !beforeValue.equals(""))
        {
            ClientRoleVO[] clientRoleVO = roleLookup.getRoleByClientRolePK(Long.parseLong(beforeValue));

            clientDetailVO = clientLookup.findByClientPK(clientRoleVO[0].getClientDetailFK(), true, null);

            if (clientDetailVO != null)
            {
                changeHistoryVO.setBeforeValue(clientDetailVO[0].getTaxIdentification());
            }
        }
        else
        {
            changeHistoryVO.setBeforeValue("");
        }

        if ((afterValue != null) && !afterValue.equals(""))
        {
            ClientRoleVO[] clientRoleVO = roleLookup.getRoleByClientRolePK(Long.parseLong(afterValue));

            clientDetailVO = clientLookup.findByClientPK(clientRoleVO[0].getClientDetailFK(), true, null);

            if (clientDetailVO != null)
            {
                changeHistoryVO.setAfterValue(clientDetailVO[0].getTaxIdentification());
            }
        }
        else
        {
            changeHistoryVO.setAfterValue("");
        }

        return changeHistoryVO;
    }

    public String getFundNames(AppReqBlock appReqBlock, SegmentVO segmentVO, long modifiedTableKey) throws Exception
    {
        engine.business.Lookup engineLookup = new engine.component.LookupComponent();

        FundVO[] fundNameVOs = null;

        if (fundNameVOs == null)
        {
            fundNameVOs = engineLookup.findAllFundVOs(false, null);
        }

        InvestmentVO[] investmentVOs = segmentVO.getInvestmentVO();
        String fundName = null;
        long filteredFundFK = 0;

        for (int i = 0; i < investmentVOs.length; i++)
        {
            if (modifiedTableKey == investmentVOs[i].getInvestmentPK())
            {
                filteredFundFK = investmentVOs[i].getFilteredFundFK();

                FilteredFundVO[] filteredFundVO = engineLookup.findFilteredFundVOsByPK(filteredFundFK, false, null);
                long fundFK = filteredFundVO[0].getFundFK();

                for (int j = 0; j < fundNameVOs.length; j++)
                {
                    if (fundFK == fundNameVOs[j].getFundPK())
                    {
                        fundName = fundNameVOs[j].getName();

                        break;
                    }
                }

                break;
            }
        }

        return fundName;
    }

    public String findClient(String tableName, long modifiedTableKey, SegmentVO segmentVO, AppReqBlock appReqBlock) throws Exception
    {
        String clientRoleFK = "";
        String taxId = "";
        ContractClientVO[] contractClientVO = segmentVO.getContractClientVO();

        if (tableName.equals("ContractClient"))
        {
            for (int i = 0; i < contractClientVO.length; i++)
            {
                if (modifiedTableKey == contractClientVO[i].getContractClientPK())
                {
                    clientRoleFK = contractClientVO[i].getClientRoleFK() + "";

                    break;
                }
            }
        }

        if (tableName.equals("ContractClientAllocation"))
        {
            for (int i = 0; i < contractClientVO.length; i++)
            {
                ContractClientAllocationVO[] contractClientAllocVO = contractClientVO[i].getContractClientAllocationVO();

                for (int j = 0; j < contractClientAllocVO.length; j++)
                {
                    if (modifiedTableKey == contractClientAllocVO[j].getContractClientAllocationPK())
                    {
                        clientRoleFK = contractClientVO[i].getClientRoleFK() + "";

                        break;
                    }
                }
                 //end inner for
            }
        }

        ClientDetailVO[] clientDetailVO = null;

        client.business.Lookup clientLookup = new client.component.LookupComponent();

        role.business.Lookup roleLookup = new role.component.LookupComponent();

        if (!clientRoleFK.equals(""))
        {
            ClientRoleVO[] clientRoleVO = roleLookup.getRoleByClientRolePK(Long.parseLong(clientRoleFK));

            clientDetailVO = clientLookup.findClientDetailByClientPK(clientRoleVO[0].getClientDetailFK(), false, null);

            if (clientDetailVO != null)
            {
                taxId = clientDetailVO[0].getTaxIdentification();
            }
        }

        return taxId;
    }

    private String findClientsByNameDOB(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
        String dob = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("dob"));

        appReqBlock.setReqParm("searchType", search.business.Lookup.FIND_BY_CLIENT_NAME);

        findClients(appReqBlock);

        SessionBean contractClientAddSessionBean = appReqBlock.getSessionBean("contractClientAddSessionBean");

        List beansToRemove = new ArrayList();

        if (contractClientAddSessionBean.hasPageBeans())
        {
            Map clientBeans = contractClientAddSessionBean.getPageBeans();
            Set clientBeanKeys = clientBeans.keySet();
            Iterator it = clientBeanKeys.iterator();
            while (it.hasNext())
            {
                String clientDetailPK = (String) it.next();
                PageBean clientDetailPageBean = (PageBean) clientBeans.get(clientDetailPK);
                String clientDetailDOB = Util.initString(clientDetailPageBean.getValue("dateOfBirth"), null);

                if (clientDetailDOB != null)
        {
                    if (!clientDetailDOB.equals(dob))
            {
                        beansToRemove.add(clientDetailPK);
                    }
            }
            }
        }

        for (int i = 0; i < beansToRemove.size(); i++)
        {
            contractClientAddSessionBean.removePageBean((String) beansToRemove.get(i));
        }

        if (!contractClientAddSessionBean.hasPageBeans())
        {
            contractClientAddSessionBean.putValue("searchStatus", "noData");
        }

        return CONTRACT_CLIENT_ADD_DIALOG;
    }

    private String findClients(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean contractClientAddSessionBean = appReqBlock.getSessionBean("contractClientAddSessionBean");
        contractClientAddSessionBean.clearState();

        search.business.Lookup searchLookup = new search.component.LookupComponent();

        ClientDetailVO[] clientDetailVOs = null;

        SearchResponseVO[] searchResponseVOs = searchLookup.searchForClients(appReqBlock);
        if (searchResponseVOs != null)
        {
            searchResponseVOs = filterForAuthorization(appReqBlock, searchResponseVOs);

            if (searchResponseVOs != null)
            {
                clientDetailVOs = getClientDetailsAfterSearch(searchResponseVOs);
            }
        }

        if (clientDetailVOs != null)
        {
            for (int c = 0; c < clientDetailVOs.length; c++)
            {
                PageBean clientDetailPageBean = new PageBean();

                String clientDetailPK = clientDetailVOs[c].getClientDetailPK() + "";

                clientDetailPageBean.putValue("clientDetailPK", clientDetailPK);
                clientDetailPageBean.putValue("lastName", clientDetailVOs[c].getLastName());
                clientDetailPageBean.putValue("firstName", clientDetailVOs[c].getFirstName());
                clientDetailPageBean.putValue("middleName", clientDetailVOs[c].getMiddleName());
                clientDetailPageBean.putValue("namePrefix", clientDetailVOs[c].getNamePrefix());
                clientDetailPageBean.putValue("operator", clientDetailVOs[c].getOperator());
                clientDetailPageBean.putValue("maintDateTime", clientDetailVOs[c].getMaintDateTime());
                clientDetailPageBean.putValue("nameSuffix", clientDetailVOs[c].getNameSuffix());
                clientDetailPageBean.putValue("corporateName", clientDetailVOs[c].getCorporateName());
                clientDetailPageBean.putValue("taxIdNumber", Util.initString(clientDetailVOs[c].getTaxIdentification(), ""));
                clientDetailPageBean.putValue("dateOfBirth", clientDetailVOs[c].getBirthDate());
                clientDetailPageBean.putValue("clientStatus", Util.initString(clientDetailVOs[c].getStatusCT(), ""));
                ClientAddressVO[] clientAddresses = clientDetailVOs[c].getClientAddressVO();

                
                if (clientAddresses != null)
                {
                    for (int a = 0; a < clientAddresses.length; a++)
                    {
                        String addressType = clientAddresses[a].getAddressTypeCT();

                        if (addressType.equalsIgnoreCase("PrimaryAddress"))
                        {
                            String termDate = clientAddresses[a].getTerminationDate();

                            if (termDate == null || termDate.equals(EDITDate.DEFAULT_MAX_DATE))
                            {
                                clientDetailPageBean.putValue("city", clientAddresses[a].getCity());
                                clientDetailPageBean.putValue("state", clientAddresses[a].getStateCT());
                                clientDetailPageBean.putValue("addressLine1", clientAddresses[a].getAddressLine1());
                                clientDetailPageBean.putValue("zipCode", clientAddresses[a].getZipCode());

                                break;
                            }
                        }
                    }
                }

                contractClientAddSessionBean.putPageBean(clientDetailPK, clientDetailPageBean);
                contractClientAddSessionBean.putValue("searchStatus", "");
            }
        }
        else
        {
            contractClientAddSessionBean.putValue("searchStatus", "noData");
        }

        return CONTRACT_CLIENT_ADD_DIALOG;
    }

//    private void populateContractClientAddSessionBean(AppReqBlock appReqBlock, ClientDetailVO[] clientDetailVOs)
//    {
//        SessionBean contractClientAddSessionBean = appReqBlock.getSessionBean("contractClientAddSessionBean");
//        contractClientAddSessionBean.clearState();
//
//        if (clientDetailVOs != null)
//        {
//            for (int c = 0; c < clientDetailVOs.length; c++)
//            {
//                PageBean clientDetailPageBean = new PageBean();
//
//                String clientDetailPK = clientDetailVOs[c].getClientDetailPK() + "";
//
//                clientDetailPageBean.putValue("clientDetailPK", clientDetailPK);
//                clientDetailPageBean.putValue("lastName", clientDetailVOs[c].getLastName());
//                clientDetailPageBean.putValue("firstName", clientDetailVOs[c].getFirstName());
//                clientDetailPageBean.putValue("corporateName", clientDetailVOs[c].getCorporateName());
//                clientDetailPageBean.putValue("taxIdNumber", clientDetailVOs[c].getTaxIdentification());
//                clientDetailPageBean.putValue("dateOfBirth", clientDetailVOs[c].getBirthDate());
//                clientDetailPageBean.putValue("clientStatus", Util.initString(clientDetailVOs[c].getStatusCT(), ""));
//
//                ClientAddressVO[] clientAddresses = clientDetailVOs[c].getClientAddressVO();
//
//                if (clientAddresses != null)
//                {
//                    for (int a = 0; a < clientAddresses.length; a++)
//                    {
//                        String addressType = clientAddresses[a].getAddressTypeCT();
//
//                        if (addressType.equalsIgnoreCase("PrimaryAddress"))
//                        {
//                            String termDate = clientAddresses[a].getTerminationDate();
//
//                            if (termDate.equals(EDITDate.DEFAULT_MAX_DATE))
//                            {
//                                clientDetailPageBean.putValue("city", clientAddresses[a].getCity());
//                                clientDetailPageBean.putValue("state", clientAddresses[a].getStateCT());
//
//                                break;
//                            }
//                        }
//                    }
//                }
//
//                contractClientAddSessionBean.putPageBean(clientDetailPK, clientDetailPageBean);
//                contractClientAddSessionBean.putValue("searchStatus", "");
//            }
//
//            appReqBlock.getHttpSession().setAttribute("clientDetailVOs", clientDetailVOs);
//        }
//        else
//        {
//            contractClientAddSessionBean.putValue("searchStatus", "noData");
//        }
//    }

    private String findClientsByNameForRefund(AppReqBlock appReqBlock) throws Exception
    {
        String suspensePK = appReqBlock.getReqParm("suspensePK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);

        Suspense suspense = Suspense.findByPK(new Long(suspensePK));
        appReqBlock.getHttpServletRequest().setAttribute("suspense", suspense);

        appReqBlock.getHttpSession().removeAttribute("clientDetailVOs");

        PageBean formBean = appReqBlock.getFormBean();
        String name = formBean.getValue("name");

        client.business.Lookup clientLookup = new client.component.LookupComponent();
        ClientDetailVO[] clientDetailVOs = clientLookup.findClientDetailBy_NameForRefund(name);

        if (clientDetailVOs != null && clientDetailVOs.length > 0)
        {
            clientDetailVOs = (ClientDetailVO[]) Util.sortObjects(clientDetailVOs, new String[]
    {
                        "getLastName", "getFirstName"
                    });
            getCurrentAddressesForClients(clientDetailVOs);
        }

        appReqBlock.getHttpSession().setAttribute("clientDetailVOs", clientDetailVOs);

        return REFUND_SUSPENSE_DIALOG;
    }


    private String findClientByTaxIdForRefund(AppReqBlock appReqBlock) throws Exception
    {
        String suspensePK = appReqBlock.getReqParm("suspensePK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);

        Suspense suspense = Suspense.findByPK(new Long(suspensePK));
        appReqBlock.getHttpServletRequest().setAttribute("suspense", suspense);

        appReqBlock.getHttpSession().removeAttribute("clientDetailVOs");

        PageBean formBean = appReqBlock.getFormBean();
        String taxId = formBean.getValue("taxIdentification");

        client.business.Lookup clientLookup = new client.component.LookupComponent();

        ClientDetailVO[] clientDetailVOs = clientLookup.findClientDetailBy_TaxId(taxId);

        if (clientDetailVOs != null)
        {
            getCurrentAddressesForClients(clientDetailVOs);
    }
        else
    {
            String suspenseMessage = "Tax Id Not Found";
            appReqBlock.getHttpServletRequest().setAttribute("suspenseMessage", suspenseMessage);
        }

        appReqBlock.getHttpSession().setAttribute("clientDetailVOs", clientDetailVOs);

        return REFUND_SUSPENSE_DIALOG;
    }

    private void getCurrentAddressesForClients(ClientDetailVO[] clientDetailVOs)
    {
        for (int i = 0; i < clientDetailVOs.length; i++)
        {
            if (clientDetailVOs[i].getOverrideStatus() == null)
            {
                ClientAddress clientAddress = ClientAddress.findCurrentAddress(new Long(clientDetailVOs[i].getClientDetailPK()));
                if (clientAddress != null)
            {
                    clientDetailVOs[i].addClientAddressVO((ClientAddressVO)clientAddress.getVO());
                }
            }
            }
        }


    private String buildRolesAndContractClients(AppReqBlock appReqBlock) throws Exception
    {
        String issueAgeMessage = null;

        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        role.business.Lookup roleLookup = new role.component.LookupComponent();
        role.business.Role roleComponent = new role.component.RoleComponent();
        client.business.Lookup clientLookup = new client.component.LookupComponent();

        PageBean formBean = appReqBlock.getFormBean();
        String selectedRoles = formBean.getValue("selectedRoles");
        String[] selectedRolesST = Util.fastTokenizer(selectedRoles, ",");
        String selectedClientDetailPK = formBean.getValue("selectedClientDetailPK");
        long clientDetailPK = Long.parseLong(selectedClientDetailPK);
        String optionId = Util.initString(formBean.getValue("selectedOptionId"), "Traditional");
        String riderNumber = Util.initString(formBean.getValue("selectedRiderNumber"), "0");


        String effectiveDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("effectiveDate"));
        PageBean mainFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        String contractEffDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(mainFormBean.getValue("effectiveDate"));

        if (effectiveDate == null)
        {
            effectiveDate = contractEffDate;
        }

        List voExclusionVector = new ArrayList();
        voExclusionVector.add(ClientAddressVO.class);
        voExclusionVector.add(ReinsurerVO.class);
        voExclusionVector.add(ClientRoleVO.class);
        voExclusionVector.add(SuspenseVO.class);
        voExclusionVector.add(ContactInformationVO.class);
        

        String contractNumber = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("contractNumber");

        for (int r = 0; r < selectedRolesST.length; r++)
        {
            PageBean contractClientPageBean = new PageBean();

            if (Util.isANumber(selectedRolesST[r]))
            {
                selectedRolesST[r] = codeTableWrapper.getCodeTableEntry(Long.parseLong(selectedRolesST[r])).getCode();

                ClientRoleVO[] clientRoleVOs = roleLookup.getRoleByRoleTypeClientDetailFKStatusReferenceID(selectedRolesST[r], clientDetailPK, "P", contractNumber);
                long clientRolePK = 0;
                long preferenceFK = 0;

                ClientDetailVO[] clientDetailVOs = clientLookup.findClientDetailByClientPK(clientDetailPK, true, voExclusionVector);
                PreferenceVO[] preferences = clientDetailVOs[0].getPreferenceVO();

                String taxId = Util.initString(clientDetailVOs[0].getTaxIdentification(), "");

                String newIssuesEligibilityStatus = "";
                String newIssuesEligibilityStartDate = "";

                if ((clientRoleVOs == null) || (clientRoleVOs.length == 0))
                {
                    if (clientDetailVOs != null)
                    {
                        int i = 0;

                        if (preferences != null)
                        {
                            for (i = 0; i < preferences.length; i++)
                            {
                                if (preferences[i].getOverrideStatus().equalsIgnoreCase("P"))
                                {
                                    preferenceFK = preferences[i].getPreferencePK();
                                    contractClientPageBean.putValue("disbursementSource", preferences[i].getDisbursementSourceCT());
                                    contractClientPageBean.putValue("printAs", preferences[i].getPrintAs());
                                    contractClientPageBean.putValue("printAs2", preferences[i].getPrintAs2());

                                    break;
                                }
                            }
                        }
                    }

                    ClientRoleVO clientRoleVO = new ClientRoleVO();

                    clientRoleVO.setClientRolePK(0);
                    clientRoleVO.setClientDetailFK(Long.parseLong(selectedClientDetailPK));
                    clientRoleVO.setPreferenceFK(preferenceFK);
                    clientRoleVO.setRoleTypeCT(selectedRolesST[r]);
                    clientRoleVO.setOverrideStatus("P");
                    clientRoleVO.setReferenceID(contractNumber);

                    clientRolePK = roleComponent.saveOrUpdateClientRole(clientRoleVO);
                }
                else
                {
                    clientRolePK = clientRoleVOs[0].getClientRolePK();
                    preferenceFK = clientRoleVOs[0].getPreferenceFK();

                    if (preferences != null)
                    {
                        for (int i = 0; i < preferences.length; i++)
                        {
                            if (preferenceFK == preferences[i].getPreferencePK())
                            {
                                contractClientPageBean.putValue("disbursementSource", preferences[i].getDisbursementSourceCT());
                                contractClientPageBean.putValue("printAs", preferences[i].getPrintAs());
                                contractClientPageBean.putValue("printAs2", preferences[i].getPrintAs2());

                                break;
                            }
                        }
                    }

                    newIssuesEligibilityStatus = Util.initString(clientRoleVOs[0].getNewIssuesEligibilityStatusCT(), "");
                    newIssuesEligibilityStartDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(clientRoleVOs[0].getNewIssuesEligibilityStartDate());
                }

                contractClientPageBean.putValue("contractClientPK", "0");
                contractClientPageBean.putValue("clientRoleFK", clientRolePK + "");
                contractClientPageBean.putValue("relationshipInd", selectedRolesST[r]);
                contractClientPageBean.putValue("optionId", optionId);
                contractClientPageBean.putValue("taxId", taxId);
                contractClientPageBean.putValue("effectiveDate", DateTimeUtil.formatYYYYMMDDToMMDDYYYY(effectiveDate));
                contractClientPageBean.putValue("terminationDate", DateTimeUtil.formatYYYYMMDDToMMDDYYYY(EDITDate.DEFAULT_MAX_DATE));
                contractClientPageBean.putValue("newIssuesEligibilityStatus", newIssuesEligibilityStatus);
                contractClientPageBean.putValue("newIssuesStartDate", newIssuesEligibilityStartDate);

                String dateOfBirth = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(clientDetailVOs[0].getBirthDate());

                contractClientPageBean.putValue("dob", dateOfBirth);

                contractClientPageBean.putValue("firstName", clientDetailVOs[0].getFirstName());
                contractClientPageBean.putValue("middleName", clientDetailVOs[0].getMiddleName());
                contractClientPageBean.putValue("lastName", clientDetailVOs[0].getLastName());
                contractClientPageBean.putValue("prefix", clientDetailVOs[0].getNamePrefix());
                contractClientPageBean.putValue("suffix", clientDetailVOs[0].getNameSuffix());
                contractClientPageBean.putValue("corporateName", clientDetailVOs[0].getCorporateName());
                contractClientPageBean.putValue("genderId", clientDetailVOs[0].getGenderCT());

                String usCitizenshipIndStatus = "unchecked";
                TaxInformationVO[] taxInformationVO = clientDetailVOs[0].getTaxInformationVO();

                if ((taxInformationVO != null) && (taxInformationVO.length > 0))
                {
                    usCitizenshipIndStatus = taxInformationVO[0].getCitizenshipIndCT();

                    if ((usCitizenshipIndStatus != null) && usCitizenshipIndStatus.equalsIgnoreCase("Y"))
                    {
                        usCitizenshipIndStatus = "checked";
                    }
                }

                contractClientPageBean.putValue("usCitizenIndStatus", usCitizenshipIndStatus);
                contractClientPageBean.putValue("contractClientOverrideStatus", "P");
                contractClientPageBean.addToValues("contractClientAllocationPKs", "0");
                contractClientPageBean.addToValues("allocationPercents", "0");
                contractClientPageBean.addToValues("ccAllocOverrideStatuses", "P");
                contractClientPageBean.addToValues("splitEquals", "N");
                contractClientPageBean.addToValues("allocationDollars", "0");
                contractClientPageBean.putValue("riderNumber", riderNumber);

                String segmentName = mainFormBean.getValue("segmentName");
                issueAgeMessage = calculateIssueAge(contractClientPageBean, segmentName);

                appReqBlock.getSessionBean("contractClients").putPageBean(taxId + riderNumber + optionId + selectedRolesST[r] + clientRolePK + "0", contractClientPageBean);

                if (!issueAgeMessage.equals(""))
                {
                    setOwnerIssueAge(appReqBlock.getSessionBean("contractClients"));
                }
            }
        }

        return CONTRACT_NON_PAYEE;
    }

    protected String showDepositBucketsDialog(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");
        savePreviousPageFormBean(appReqBlock, currentPage);

        PageBean formBean = appReqBlock.getFormBean();
        String investmentPK = formBean.getValue("investmentPK");

        if (Util.isANumber(investmentPK))
        {
            contract.business.Lookup contractLookup = new contract.component.LookupComponent();

            BucketVO[] bucketVOs = contractLookup.getBucketsByInvestmentFKForScrolling(Long.parseLong(investmentPK), 0, "FORWARD");

            SessionBean contractDepositBucketsBean = appReqBlock.getSessionBean("contractDepositBucketsBean");
            contractDepositBucketsBean.clearState();

            if (bucketVOs != null)
            {
                for (int b = 0; b < bucketVOs.length; b++)
                {
                    PageBean bucketPageBean = new PageBean();

                    String bucketPK = bucketVOs[b].getBucketPK() + "";
                    String investmentFK = bucketVOs[b].getInvestmentFK() + "";

                    String formattedDepositDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(bucketVOs[b].getDepositDate());

                    EDITBigDecimal depositAmount = new EDITBigDecimal(bucketVOs[b].getDepositAmount());
                    EDITBigDecimal bonusAmount = new EDITBigDecimal(bucketVOs[b].getBonusAmount());
                    EDITBigDecimal rebalanceAmount = new EDITBigDecimal(bucketVOs[b].getRebalanceAmount());
                    EDITBigDecimal indexCapRate = new EDITBigDecimal(bucketVOs[b].getIndexCapRate());
                    EDITBigDecimal cumDollars = new EDITBigDecimal(bucketVOs[b].getCumDollars());
                    EDITBigDecimal cumUnits = new EDITBigDecimal(bucketVOs[b].getCumUnits());
                    EDITBigDecimal bonusIntRate = new EDITBigDecimal(bucketVOs[b].getBonusIntRate());
                    EDITBigDecimal priorBucketRate = new EDITBigDecimal(bucketVOs[b].getPriorBucketRate());
                    int bonusIntDuration = bucketVOs[b].getBonusIntRateDur();

                    String formattedLastValDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(bucketVOs[b].getLastValuationDate());

                    EDITBigDecimal interestRate = new EDITBigDecimal(bucketVOs[b].getInterestRateOverride());
                    EDITBigDecimal bucketInterestRate = new EDITBigDecimal(bucketVOs[b].getBucketInterestRate());
                    int duration = bucketVOs[b].getDurationOverride();

                    String formattedRenewalDate = "";

                    if (bucketVOs[b].getRenewalDate() != null)
                    {
                        formattedRenewalDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(bucketVOs[b].getRenewalDate());
                    }

                    EDITBigDecimal poUnits = new EDITBigDecimal(bucketVOs[b].getPayoutUnits());
                    EDITBigDecimal poDollars = new EDITBigDecimal(bucketVOs[b].getPayoutDollars());
                    bucketPageBean.putValue("bucketPK", bucketPK);
                    bucketPageBean.putValue("investmentFK", investmentFK);
                    bucketPageBean.putValue("depositDate", formattedDepositDate);
                    bucketPageBean.putValue("depositAmount", Util.formatDecimal("########0.00", depositAmount));
                    bucketPageBean.putValue("bonusAmount", Util.formatDecimal("########0.00", bonusAmount));
                    bucketPageBean.putValue("rebalanceAmount", Util.formatDecimal("########0.00", rebalanceAmount));
                    bucketPageBean.putValue("indexCapRate", indexCapRate.toString());
                    bucketPageBean.putValue("cumDollars", Util.formatDecimal("########0.00", cumDollars));
                    bucketPageBean.putValue("cumUnits", cumUnits.toString());
                    bucketPageBean.putValue("lastValDate", formattedLastValDate);

                    if (interestRate.isEQ(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
                    {
                        bucketPageBean.putValue("interestRate", "");
                    }
                    else
                    {
                        bucketPageBean.putValue("interestRate", interestRate.toString());
                    }

                    if (bucketInterestRate.isEQ(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
                    {
                        bucketPageBean.putValue("bucketInterestRate", "");
                    }
                    else
                    {
                        bucketPageBean.putValue("bucketInterestRate", bucketInterestRate.toString());
                    }

                    if (duration == 0)
                    {
                        bucketPageBean.putValue("duration", "");
                    }
                    else
                    {
                        bucketPageBean.putValue("duration", duration + "");
                    }

                    if (priorBucketRate.isEQ(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
                    {
                        bucketPageBean.putValue("priorBucketRate", "");
                    }
                    else
                    {
                        bucketPageBean.putValue("priorBucketRate", priorBucketRate.toString());
                    }

                    bucketPageBean.putValue("renewalDate", formattedRenewalDate);
                    bucketPageBean.putValue("poUnits", poUnits + "");
                    bucketPageBean.putValue("poDollars", Util.formatDecimal("########0.00", poDollars));

                    if (bonusIntRate.isEQ("0"))
                    {
                        bucketPageBean.putValue("boIntRate", "");
                    }
                    else
                    {
                        bucketPageBean.putValue("boIntRate", bonusIntRate + "");
                    }

                    if (bonusIntDuration == 0)
                    {
                        bucketPageBean.putValue("boDuration", "");
                    }
                    else
                    {
                        bucketPageBean.putValue("boDuration", bonusIntDuration + "");
                    }

                    contractDepositBucketsBean.putPageBean(bucketPK, bucketPageBean);

                    if (b == 0)
                    {
                        appReqBlock.getHttpServletRequest().setAttribute("beginningBucketPK", bucketPK);
                    }
                    else if (b == (bucketVOs.length - 1))
                    {
                        appReqBlock.getHttpServletRequest().setAttribute("endingBucketPK", bucketPK);
                    }
                }
            }
        }

        appReqBlock.getHttpServletRequest().setAttribute("investmentPK", investmentPK);

        return DEPOSIT_BUCKETS_DIALOG;
    }

    protected String showDepositBucketsDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
        String investmentFK = formBean.getValue("investmentFK");
        String selectedBucket = formBean.getValue("selectedBucket");
        String beginningBucketPK = formBean.getValue("beginningBucketPK");
        String endingBucketPK = formBean.getValue("endingBucketPK");

        SessionBean contractDepositBucketsBean = appReqBlock.getSessionBean("contractDepositBucketsBean");

        PageBean pageBean = contractDepositBucketsBean.getPageBean(selectedBucket);

        appReqBlock.getHttpServletRequest().setAttribute("investmentFK", investmentFK);
        appReqBlock.getHttpServletRequest().setAttribute("beginningBucketPK", beginningBucketPK);
        appReqBlock.getHttpServletRequest().setAttribute("endingBucketPK", endingBucketPK);
        appReqBlock.getHttpServletRequest().setAttribute("bucketPK", selectedBucket);
        appReqBlock.getHttpServletRequest().setAttribute("depositAmount", pageBean.getValue("depositAmount"));
        appReqBlock.getHttpServletRequest().setAttribute("bonusAmount", pageBean.getValue("bonusAmount"));
        appReqBlock.getHttpServletRequest().setAttribute("rebalanceAmount", pageBean.getValue("rebalanceAmount"));
        appReqBlock.getHttpServletRequest().setAttribute("indexCapRate", pageBean.getValue("indexCapRate"));
        appReqBlock.getHttpServletRequest().setAttribute("depositDate", pageBean.getValue("depositDate"));
        appReqBlock.getHttpServletRequest().setAttribute("cumDollars", pageBean.getValue("cumDollars"));
        appReqBlock.getHttpServletRequest().setAttribute("cumUnits", pageBean.getValue("cumUnits"));
        appReqBlock.getHttpServletRequest().setAttribute("poUnits", pageBean.getValue("poUnits"));
        appReqBlock.getHttpServletRequest().setAttribute("poDollars", pageBean.getValue("poDollars"));
        appReqBlock.getHttpServletRequest().setAttribute("lastValDate", pageBean.getValue("lastValDate"));
        appReqBlock.getHttpServletRequest().setAttribute("interestRate", pageBean.getValue("interestRate"));
        appReqBlock.getHttpServletRequest().setAttribute("priorBucketRate", pageBean.getValue("priorBucketRate"));
        appReqBlock.getHttpServletRequest().setAttribute("bucketInterestRate", pageBean.getValue("bucketInterestRate"));
        appReqBlock.getHttpServletRequest().setAttribute("duration", pageBean.getValue("duration"));
        appReqBlock.getHttpServletRequest().setAttribute("renewalDate", pageBean.getValue("renewalDate"));
        appReqBlock.getHttpServletRequest().setAttribute("boDuration", pageBean.getValue("boDuration"));
        appReqBlock.getHttpServletRequest().setAttribute("boIntRate", pageBean.getValue("boIntRate"));

        return DEPOSIT_BUCKETS_DIALOG;
    }

    protected String scrollDepositBuckets(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
        String investmentFK = formBean.getValue("investmentFK");
        String beginningBucketPK = formBean.getValue("beginningBucketPK");
        String endingBucketPK = formBean.getValue("endingBucketPK");
        String scrollDirection = formBean.getValue("scrollDirection");

        if (scrollDirection.equalsIgnoreCase("FORWARD"))
        {
            beginningBucketPK = endingBucketPK;
        }

        contract.business.Lookup contractLookup = new contract.component.LookupComponent();

        BucketVO[] bucketVOs = null;

        if (investmentFK != null && Util.isANumber(investmentFK))
        {
            bucketVOs = contractLookup.getBucketsByInvestmentFKForScrolling(Long.parseLong(investmentFK), Long.parseLong(beginningBucketPK), scrollDirection);
        }

        if (bucketVOs != null)
        {
            SessionBean contractDepositBucketsBean = appReqBlock.getSessionBean("contractDepositBucketsBean");

            contractDepositBucketsBean.clearState();

            for (int b = 0; b < bucketVOs.length; b++)
            {
                PageBean bucketPageBean = new PageBean();

                String bucketPK = bucketVOs[b].getBucketPK() + "";

                String formattedDepositDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(bucketVOs[b].getDepositDate());

                EDITBigDecimal depositAmount = new EDITBigDecimal(bucketVOs[b].getDepositAmount());
                EDITBigDecimal bonusAmount = new EDITBigDecimal(bucketVOs[b].getBonusAmount());
                EDITBigDecimal indexCapRate = new EDITBigDecimal(bucketVOs[b].getIndexCapRate());
                EDITBigDecimal cumDollars = new EDITBigDecimal(bucketVOs[b].getCumDollars());

                String formattedLastValDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(bucketVOs[b].getLastValuationDate());

                EDITBigDecimal interestRate = new EDITBigDecimal(bucketVOs[b].getInterestRateOverride());
                EDITBigDecimal bucketInterestRate = new EDITBigDecimal(bucketVOs[b].getBucketInterestRate());

                int duration = bucketVOs[b].getDurationOverride();

                String formattedRenewalDate = "";

                if (bucketVOs[b].getRenewalDate() != null)
                {
                    formattedRenewalDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(bucketVOs[b].getRenewalDate());
                }

                bucketPageBean.putValue("bucketPK", bucketPK);
                bucketPageBean.putValue("investmentFK", investmentFK);
                bucketPageBean.putValue("depositDate", formattedDepositDate);
                bucketPageBean.putValue("depositAmount", depositAmount + "");
                bucketPageBean.putValue("bonusAmount", bonusAmount + "");
                bucketPageBean.putValue("indexCapRate", indexCapRate + "");
                bucketPageBean.putValue("cumDollars", cumDollars + "");
                bucketPageBean.putValue("lastValDate", formattedLastValDate);

                if (interestRate.isEQ("0"))
                {
                    bucketPageBean.putValue("interestRate", "");
                }
                else
                {
                    bucketPageBean.putValue("interestRate", interestRate + "");
                }

                if (bucketInterestRate.isEQ("0"))
                {
                    bucketPageBean.putValue("bucketInterestRate", "");
                }
                else
                {
                    bucketPageBean.putValue("bucketInterestRate", bucketInterestRate + "");
                }

                if (duration == 0)
                {
                    bucketPageBean.putValue("duration", "");
                }

                else
                {
                    bucketPageBean.putValue("duration", duration + "");
                }

                bucketPageBean.putValue("renewalDate", formattedRenewalDate);

                contractDepositBucketsBean.putPageBean(bucketPK, bucketPageBean);

                if (b == 0)
                {
                    appReqBlock.getHttpServletRequest().setAttribute("beginningBucketPK", bucketPK);
                }

                if (b == (bucketVOs.length - 1))
                {
                    appReqBlock.getHttpServletRequest().setAttribute("endingBucketPK", bucketPK);
                }
            }
        }

        appReqBlock.getHttpServletRequest().setAttribute("investmentFK", investmentFK);

        return DEPOSIT_BUCKETS_DIALOG;
    }

    private String showDepositDialog(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

        return DEPOSIT_DIALOG;
    }

    private String showContractBillingDialog(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

        return loadContractBilling(appReqBlock);
    }

    private String showScheduledPremiumDialog(AppReqBlock appReqBlock) throws Exception
    {
        return SCHEDULED_PREMIUM_DIALOG;
    }

    private String showUnitsDialog(AppReqBlock appReqBlock) throws Exception
    {
        return UNITS_DIALOG;
    }

    private String saveBillingChange(AppReqBlock appReqBlock) throws Exception
    {
    	appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").putValue("isBillingChangeTrx", "true");
    	
        BillScheduleVO billScheduleVO = (BillScheduleVO) Util.mapFormDataToVO(appReqBlock.getHttpServletRequest(), BillScheduleVO.class, false);

        //Need to compare to existing billSchedule in the appReqBlock
        BillScheduleVO existingBillScheduleVO = (BillScheduleVO)appReqBlock.getHttpSession().getAttribute("BillScheduleVO");

        boolean changeToEFTExists = false;
        if (existingBillScheduleVO != null)
        {
            changeToEFTExists = checkForChangesToEFT(appReqBlock,existingBillScheduleVO, billScheduleVO);
        }
        
        String complexChangeType = null;
        String billScheduleChangeType = (String) appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("billScheduleChangeType");
        
        if (billScheduleChangeType == null || billScheduleChangeType.equals(""))
        {
	        complexChangeType = checkForComplexChangeType(appReqBlock,existingBillScheduleVO, billScheduleVO, changeToEFTExists);
	        
	        if (complexChangeType != null && complexChangeType != "")
	        {
	            appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").putValue("conversionValue", complexChangeType); //ContractSetup.COMPLEXCHANGETYPECT_BILLMETHOD);
	        }
        }
        
        String responseMessage = (String)appReqBlock.getHttpServletRequest().getAttribute("responseMessage");

        if(new EDITDate(billScheduleVO.getBillChangeStartDate()).before(new EDITDate()))
        {
            responseMessage="Bill Change Start Date must be greater than or equal to today. ";
            appReqBlock.getHttpServletRequest().setAttribute("responseMessage", responseMessage);
        }
        if (!changeToEFTExists && responseMessage == null)
        {
            String changedBilling = Util.initString((String)appReqBlock.getHttpSession().getAttribute("changedBilling"), "false");
            if (changedBilling.equals("true"))
            {
                responseMessage = editFrequencyValue(appReqBlock, billScheduleVO);
            }
            else
            {
            	if (complexChangeType == null || !complexChangeType.equalsIgnoreCase(ContractSetup.COMPLEXCHANGETYPECT_EFTDRAFTDAY)) {
                responseMessage = editBillChangeStartDate(appReqBlock, billScheduleVO);
            }
        }
        }

        if (responseMessage == null)
        {
            String operator = appReqBlock.getUserSession().getUsername();

            //  Convert the dates to the back-end format (gets converted to front-end format in page)
            DateTimeUtil.convertDatesToYYYYMMDD(billScheduleVO);

            if (billScheduleVO.getEFTDraftDayStartMonthCT() == null && changeToEFTExists)
            {
                String paidToDate =  DateTimeUtil.formatMMDDYYYYToYYYYMMDD(appReqBlock.getReqParm("paidToDate"));
                EDITDate paidToDateED = new EDITDate(paidToDate);
                billScheduleVO.setEFTDraftDayStartMonthCT(paidToDateED.getFormattedMonth());
            }
            if (billScheduleVO.getCreationOperator() == null)
            {
                billScheduleVO.setCreationOperator(operator);
                billScheduleVO.setCreationDate(new EDITDate().getFormattedDate());
                billScheduleVO.setBillTypeCT(BillSchedule.BILL_TYPE_INDIVUAL);
            }

            appReqBlock.getHttpSession().setAttribute("BillScheduleVO", billScheduleVO);
        }
        else
        {
            appReqBlock.getHttpSession().setAttribute("BillScheduleVO", existingBillScheduleVO);
            
            return showContractBillingDialog(appReqBlock);
        }
      
      return saveContractDetail(appReqBlock); 
    
    }

    private String editBillChangeStartDate(AppReqBlock appReqBlock, BillScheduleVO billScheduleVO)
    {
        String responseMessage = null;


        if (billScheduleVO.getBillChangeStartDate() == null)
        {
            responseMessage = "BillChangeStartDate Required";
        }

        appReqBlock.getHttpServletRequest().setAttribute("responseMessage", responseMessage);

        return responseMessage;

    }

    /**
     * The change to direct bill requires that the frequency selected match to the value set on the
     * Area table, field TRANSITIONBILLMODE.  The frequency will remain this value until transition period ends.
     * @param appReqBlock
     * @param billScheduleVO
     * @return
     */
    private String editFrequencyValue(AppReqBlock appReqBlock, BillScheduleVO billScheduleVO)
    {
        String responseMessage = null;
        String segmentPK = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("segmentPK");
        Segment segment = Segment.findByPK(new Long(segmentPK));
        long productStructureFK = segment.getProductStructureFK().longValue();
        String issueState = segment.getIssueStateCT();

        String grouping = "BILLCHANGE";
        String field = "TRANSITIONBILLMODE";
        String qualifier = "*";
        EDITDate effectiveDate = new EDITDate();

        engine.business.Lookup engineLookup = new engine.component.LookupComponent();

        AreaValueVO[] areaValueVOs = engineLookup.getMultipleAreaValues(productStructureFK, issueState, grouping,
                                  effectiveDate, field, qualifier);
        
        
        if (areaValueVOs != null)
        {
            responseMessage = "Billing Frequency Selected Not Allowed";
            String billFrequency = Util.initString(billScheduleVO.getBillingModeCT(), "");
            String description = CodeTableWrapper.getSingleton().getCodeDescByCodeTableNameAndCode("BILLFREQUENCY", billFrequency);

        	for (int x = 0; x < areaValueVOs.length; x++) {
	            String value = areaValueVOs[x].getAreaValue();
	            if (value.equalsIgnoreCase(description))
	            {
	                responseMessage = null;
	                break;
	            }
        	}
        }
        else
        {
            responseMessage = "Area Table Not Found For Frequency Edit";
        }

        appReqBlock.getHttpServletRequest().setAttribute("responseMessage", responseMessage);

        return responseMessage;
    }

    /**
     * When the BillMethod has changed from Direct to EFT, require the draft fields.  If an
     * error occurs the EFT change is lost so the boolean must be saved in session.  It is retrieved
     * from session in oder to calculate Next Dates.
     * @param appReqBlock
     * @param existingBillScheduleVO
     * @param billScheduleVO
     * @return
     */
    private boolean checkForChangesToEFT(AppReqBlock appReqBlock, BillScheduleVO existingBillScheduleVO, BillScheduleVO billScheduleVO)
    {
        boolean changeToEFTExists =  false;
        String responseMessage = null;

        if (billScheduleVO.getBillMethodCT().equalsIgnoreCase(BillSchedule.BILL_METHOD_EFT))
        {
            if (existingBillScheduleVO.getBillMethodCT().equalsIgnoreCase(BillSchedule.BILL_METHOD_DIRECT_BILL))
            {
                String segmentStatus = appReqBlock.getSessionBean("contractMainSessionBean").getValue("statusCode");
                if (!(segmentStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_ACTIVE) 
                		|| segmentStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_ISSUEPENDINGPREMIUM)
                		|| segmentStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_TRANSITION)))
                {
                    responseMessage = "Contract Status Must Equal 'IssuePendingPremium', 'Active' or 'Transition' for Change To EFT";
                    appReqBlock.getHttpServletRequest().setAttribute("responseMessage", responseMessage);                }
                else
                {
                    changeToEFTExists = true;
                    appReqBlock.getHttpSession().setAttribute("changeToEFTExists", "true");
                }
            }
        }

        if (!changeToEFTExists)
        {
            String changeToEFTExistsInd = (String)appReqBlock.getHttpSession().getAttribute("changeToEFTExists");

            if (changeToEFTExistsInd != null)
            {
                changeToEFTExists = true;
                appReqBlock.getHttpSession().removeAttribute("changeToEFTExists");
            }
        }

        return changeToEFTExists;
    }
    
    /**
     * For certain changes to the BillSchedule, set the ComplexChangeType accordingly
     * @param appReqBlock
     * @param existingBillScheduleVO
     * @param billScheduleVO
     * @return
     */
    private String checkForComplexChangeType(AppReqBlock appReqBlock, BillScheduleVO existingBillScheduleVO, BillScheduleVO billScheduleVO, boolean changeToEFTExists)
    {
    	String complexChangeType = "";
    	
    	boolean billChangeIndicator = false;
    	boolean billModeChange = false;
    	boolean billMethodChange = false;
    	boolean modeMethodCombo = false;

    	if (!(existingBillScheduleVO.getBillingModeCT() == null && billScheduleVO.getBillingModeCT() == null) &&
    			((existingBillScheduleVO.getBillingModeCT() == null && billScheduleVO.getBillingModeCT() != null) ||
    			(existingBillScheduleVO.getBillingModeCT() != null && billScheduleVO.getBillingModeCT() == null) ||
    			(!existingBillScheduleVO.getBillingModeCT().equalsIgnoreCase(billScheduleVO.getBillingModeCT()))))
    	{
    		billModeChange = true;
    	}
    	
    	if (!(existingBillScheduleVO.getDeductionFrequencyCT() == null && billScheduleVO.getDeductionFrequencyCT() == null) &&
    			((existingBillScheduleVO.getDeductionFrequencyCT() == null && billScheduleVO.getDeductionFrequencyCT() != null) ||
    			(existingBillScheduleVO.getDeductionFrequencyCT() != null && billScheduleVO.getDeductionFrequencyCT() == null) ||
    			(!existingBillScheduleVO.getDeductionFrequencyCT().equalsIgnoreCase(billScheduleVO.getDeductionFrequencyCT()))))
    	{
    		billChangeIndicator = true;
    		complexChangeType = ContractSetup.COMPLEXCHANGETYPECT_DEDUCTIONFREQUENCY;
    	}
    	
    	// EFT
    	if (!(existingBillScheduleVO.getBillMethodCT() == null && billScheduleVO.getBillMethodCT() == null) &&
    			((existingBillScheduleVO.getBillMethodCT() == null && billScheduleVO.getBillMethodCT() != null) ||
    			(existingBillScheduleVO.getBillMethodCT() != null && billScheduleVO.getBillMethodCT() == null) ||
    			(!existingBillScheduleVO.getBillMethodCT().equalsIgnoreCase(billScheduleVO.getBillMethodCT()))))
    	{
    		billMethodChange = true;
    		
    		if (billModeChange)
    		{
    			modeMethodCombo = true;
    		}
    	}
    	
    	//EFT Draft Day
    	if (!billMethodChange && billScheduleVO.getBillMethodCT().equalsIgnoreCase("EFT") && 
    			existingBillScheduleVO.getEFTDraftDay() != billScheduleVO.getEFTDraftDay()) {
    		
    		complexChangeType = ContractSetup.COMPLEXCHANGETYPECT_EFTDRAFTDAY;
    	}
    	
    	if (!(existingBillScheduleVO.getTransitionPeriodEndDate() == null && billScheduleVO.getTransitionPeriodEndDate() == null) &&
    			((existingBillScheduleVO.getTransitionPeriodEndDate() == null && billScheduleVO.getTransitionPeriodEndDate() != null) ||
    			(existingBillScheduleVO.getTransitionPeriodEndDate() != null && billScheduleVO.getTransitionPeriodEndDate() == null) ||
    			(!(new EDITDate(existingBillScheduleVO.getTransitionPeriodEndDate())
    					.equals(new EDITDate(billScheduleVO.getTransitionPeriodEndDate()))))))
    	{
    		if(!billChangeIndicator)
    		{
    			billChangeIndicator = true;
    			complexChangeType = ContractSetup.COMPLEXCHANGETYPECT_TRANSDATE;
    		}
    	}
    	
    	if (modeMethodCombo)
    	{
    		complexChangeType = ContractSetup.COMPLEXCHANGETYPECT_BILLMETHOD;
    		billChangeIndicator = true;
    	}
    	
    	if (!billChangeIndicator)
    	{
    		if (billMethodChange)
    		{
    			complexChangeType = ContractSetup.COMPLEXCHANGETYPECT_BILLMETHOD;
        		billChangeIndicator = true;
    		}
    		else if (billModeChange)
    		{
    			complexChangeType = ContractSetup.COMPLEXCHANGETYPECT_BILLFREQUENCY;
        		billChangeIndicator = true;
    		}
    	}
    	
    	return complexChangeType;
    }

    /**
     * From the contractListBillingDialog, this brings up the changeToIndividualBillDialog
     * @param appReqBlock
     * @return
     */
    private String changeToIndividualBill(AppReqBlock appReqBlock)
    {
        return CHANGE_TO_INDIVIDUAL_BILL_DIALOG;
    }

    /**
     * From the contractIndividualBillingDialog, this brings up the changeToListBillDialog
     * @param appReqBlock
     * @return
     */
    private String changeToListBill(AppReqBlock appReqBlock)
    {
        FormBean formBean = appReqBlock.getFormBean();
        appReqBlock.getHttpSession().setAttribute("DepartmentLocations", null);
        String segmentPKString = formBean.getValue("segmentPK");
        Segment segment = Segment.findByPK(Long.parseLong(segmentPKString));
        ContractGroup contractGroup = ContractGroup.findByPK(segment.getContractGroupFK()) ;
        appReqBlock.getHttpSession().setAttribute("groupNumber", contractGroup.getContractGroupNumber());

        return CHANGE_TO_LIST_BILL_DIALOG;
    }

    /**
     * From the changeToIndividualBillDialog, this method gets called when hit save.  It will create a new individual
     * BillSchedule using the same info from the existing BillSchedule.  The new BillSchedule is what gets attached
     * to the Segment before the Segment save.
     *
     * @param appReqBlock
     *
     * @return
     */
    private String saveChangeToIndividualBill(AppReqBlock appReqBlock)
    {
        String returnPage = null;

        FormBean formBean = appReqBlock.getFormBean();

        String billMethodCT = Util.initString(formBean.getValue("billMethodCT"), null);
        String operator = appReqBlock.getUserSession().getUsername();

        if (billMethodCT != null && !billMethodCT.equalsIgnoreCase(BillSchedule.BILL_METHOD_DIRECT_BILL))
        {
            String responseMessage = "Bill Method Must Equal Direct Before Using EFT";
            appReqBlock.getHttpServletRequest().setAttribute("responseMessage", responseMessage);
            returnPage = CONTRACT_LIST_BILLING_DIALOG;
        }
        else
        {
            String segmentPK = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("segmentPK");


            try
            {
                if (segmentPK != null)
                {
                    Segment segment = Segment.findByPK(new Long(segmentPK));
                    
                    String deductionAmountOverride = new EDITBigDecimal().toString();
                    String deductionAmountEffectiveDate = null;
                                        
                    String areaValue = getAreaValueForIndividualBillingChange(segment);

                    boolean changedBilling = segment.changeToIndividualBilling(billMethodCT, operator, areaValue);

                    BillSchedule billSchedule = segment.getBillSchedule();

                    BillScheduleVO billScheduleVO = (BillScheduleVO) SessionHelper.map(billSchedule, SessionHelper.EDITSOLUTIONS);

                    //  When the segment's billing was changed, a new BillSchedule was created.
                    //  The BillSchedule has a PK value.  But we are using VOs.
                    //  The pk needs to be set to zero on the VO so it can be saved to the database on the big segment save.
                    if (changedBilling)
                    {
                        billScheduleVO.setBillSchedulePK(0L);
                        billScheduleVO.setBillingModeCT(BillSchedule.QUARTERLY);
                        appReqBlock.getHttpSession().setAttribute("changedBilling", "true");
                    }

                    //  Send the BillScheduleVO back to the page for display
                    appReqBlock.getHttpSession().setAttribute("BillScheduleVO", billScheduleVO);

                    //  Changes were made to the Segment's relationships and fields when converting the billing.
                    //  The changes were made to a Hibernate entity.  Would be nice if we could just map that entity to
                    //  a SegmentVO but the SegmentVO is not stored in the beans, the segmentPK is.  When saving the
                    //  contract, the SegmentVO is built using the individual fields stored in the beans.  That means for
                    //  every individual field we just modified, we have to set them in the beans or they will be lost on
                    //  the save.  Ain't cloud land great?
                    SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
                    PageBean contractMainFormBean = contractMainSessionBean.getPageBean("formBean");

                    contractMainFormBean.putValue("contractGroupFK", String.valueOf(Util.initLong(segment.getContractGroup(), "contractGroupPK", 0L)));
                    contractMainFormBean.putValue("billScheduleFK", String.valueOf(Util.initLong(billSchedule, "billSchedulePK", 0L)));
                    contractMainFormBean.putValue("departmentLocationFK", String.valueOf(Util.initLong(segment.getDepartmentLocation(), "departmentLocationPK", 0L)));
                    contractMainFormBean.putValue("priorContractGroupFK", String.valueOf(Util.initLong(segment.getPriorContractGroup(), "contractGroupPK", 0L)));
                    contractMainFormBean.putValue("billScheduleChangeType", Util.initString(segment.getBillScheduleChangeType(), ""));
                    contractMainFormBean.putValue("priorPRDDue", (String) Util.initObject(segment, "priorPRDDue", ""));
                    contractMainFormBean.putValue("conversionValue", (String) Util.initString(areaValue, ""));
                    contractMainFormBean.putValue("deductionAmountOverride", (String) Util.initString(deductionAmountOverride, ""));
                    contractMainFormBean.putValue("deductionAmountEffectiveDate", (String) Util.initString(deductionAmountEffectiveDate, ""));
                    // set as empty string because null won't get added to bean. Hopefully, saving of the VO will "magically" set empty strings to null before going to db

                    returnPage = this.determineBillingDialogToDisplay(billScheduleVO.getBillMethodCT(), checkProductType(contractMainFormBean.getValue("optionId")));
                }
            }
            catch (EDITEventException e)
            {
                System.out.println(e);

                e.printStackTrace();

                appReqBlock.getHttpServletRequest().setAttribute("responseMessage", "Error changing to individual billing: " + e.getMessage());
            }
        }

        new ContractBillingTableModel(appReqBlock);

        return returnPage;
    }

    /**
     * Looks up the AreaValue for an individual billing change based on the grouping, field, productStructure, and issueState.
     *
     * @return  AreaValue matching the criteria
     */
    private String getAreaValueForIndividualBillingChange(Segment segment)
    {
        String grouping = "BILLCHANGE";
        String field = "CONTCONV";
        String qualifier = "*";
        EDITDate effectiveDate = new EDITDate();
        
        String state;
        if (getAreaValueForIndividualBillingChangeUseIssueState(segment)) {
            state = segment.getIssueStateCT();	
        } else {
        	state = segment.getOriginalStateCT();
        }
        

        engine.business.Lookup engineLookup = new engine.component.LookupComponent();

        AreaValueVO areaValueVO = engineLookup.getAreaValue(segment.getProductStructureFK().longValue(), state,
                grouping, effectiveDate, field, qualifier);

        return areaValueVO.getAreaValue();
    }
    
    private boolean getAreaValueForIndividualBillingChangeUseIssueState(Segment segment)
    {
    	
        String grouping = "BILLCHANGE";
        String field = "USEISSUESTATE";
        String qualifier = "*";
        EDITDate effectiveDate = new EDITDate();

        engine.business.Lookup engineLookup = new engine.component.LookupComponent();

        AreaValueVO areaValueVO = engineLookup.getAreaValue(segment.getProductStructureFK().longValue(), segment.getOriginalStateCT(),
                grouping, effectiveDate, field, qualifier);

        return (areaValueVO.getAreaValue().equals("Y")) ? true : false;
    }

    /**
     * From the changeToListBillDialog, this method gets called when hit save.  It will change the Segment's BillScheduleFK
     * to the specified Group's BillSchedule
     *
     * @param appReqBlock
     *
     * @return
     */
    private String saveChangeToListBill(AppReqBlock appReqBlock)
    {
        FormBean formBean = appReqBlock.getFormBean();

        appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").putValue("isBillingChangeTrx", "true");
        
        String contractGroupNumber = formBean.getValue("contractGroupNumber");
        String departmentLocationPKString = formBean.getValue("departmentLocationPK");
        Long departmentLocationPK = Util.initLong(departmentLocationPKString, null);

        String segmentPK = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("segmentPK");

        String returnPage = null;

        try
        {
            if (segmentPK != null)
            {
                Segment segment = Segment.findByPK(new Long(segmentPK));

                segment.changeToListBilling(contractGroupNumber, departmentLocationPK);

                BillSchedule billSchedule = segment.getBillSchedule();

                //  Send the BillSchedule, ContractGroup, and ClientDetail back to the page for display
                BillScheduleVO billScheduleVO = (BillScheduleVO) SessionHelper.map(billSchedule, SessionHelper.EDITSOLUTIONS);

                ContractGroup groupContractGroup = segment.getContractGroup();

                if (groupContractGroup != null)
                {
                    ClientDetail clientDetail = ClientDetail.findBy_ContractGroup(groupContractGroup);

                    appReqBlock.putInRequestScope("clientDetail", clientDetail);
                }

                appReqBlock.getHttpSession().setAttribute("BillScheduleVO", billScheduleVO);

                //  Changes were made to the Segment's relationships and fields when converting the billing.
                //  The changes were made to a Hibernate entity.  Would be nice if we could just map that entity to
                //  a SegmentVO but the SegmentVO is not stored in the beans, the segmentPK is.  When saving the
                //  contract, the SegmentVO is built using the individual fields stored in the beans.  That means for
                //  every individual field we just modified, we have to set them in the beans or they will be lost on
                //  the save.  Ain't cloud land great?
                SessionBean contractMainSessionBean = appReqBlock.getSessionBean("contractMainSessionBean");
                PageBean contractMainFormBean = contractMainSessionBean.getPageBean("formBean");

                contractMainFormBean.putValue("contractGroupFK", String.valueOf(Util.initLong(segment.getContractGroup(), "contractGroupPK", 0L)));
                contractMainFormBean.putValue("billScheduleFK", String.valueOf(Util.initLong(billSchedule, "billSchedulePK", 0L)));
                contractMainFormBean.putValue("departmentLocationFK", String.valueOf(Util.initLong(segment.getDepartmentLocation(), "departmentLocationPK", 0L)));
                contractMainFormBean.putValue("priorContractGroupFK", String.valueOf(Util.initLong(segment.getPriorContractGroup(), "contractGroupPK", 0L)));
                contractMainFormBean.putValue("billScheduleChangeType", Util.initString(segment.getBillScheduleChangeType(), ""));
                contractMainFormBean.putValue("priorPRDDue", (String) Util.initObject(segment, "priorPRDDue", ""));
                // set as empty string because null won't get added to bean. Hopefully, saving of the VO will "magically" set empty strings to null before going to db

                returnPage = this.determineBillingDialogToDisplay(billScheduleVO.getBillMethodCT(), checkProductType(contractMainFormBean.getValue("optionId")));
            }
        }
        catch (EDITEventException e)
        {
            System.out.println(e);

            e.printStackTrace();

            appReqBlock.getHttpServletRequest().setAttribute("responseMessage", "Error changing to list billing: " + e.getMessage());
        }

        new ContractBillingTableModel(appReqBlock);

        return returnPage;
    }

    private String showQuestionnaireResponseDialog(AppReqBlock appReqBlock) throws Exception
    {
        // Check for authorization
        new InforceUseCaseComponent().accessQuestionnaireResponse();

        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

        String returnPage = performPageEditing(appReqBlock);

        new QuestionnaireResponseTableModel(appReqBlock);

        if (!returnPage.equals(""))
        {
            return returnPage;
        }
        else
        {
            return QUESTIONNAIRE_RESPONSE_DIALOG;
        }
    }

    /**
     * Helper method to load the contract billing information into the contractBillingDialog
     * @param appReqBlock
     * @return
     */
    private String loadContractBilling(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");

//        String segmentPK = formBean.getValue("segmentPK");
        String contractGroupFK = formBean.getValue("contractGroupFK");

        BillScheduleVO billScheduleVO = (BillScheduleVO) appReqBlock.getHttpSession().getAttribute("BillScheduleVO");

        if (contractGroupFK != null)
        {
            ContractGroup groupContractGroup = ContractGroup.findBy_ContractGroupPK(new Long(contractGroupFK));

            //  Get the ClientDetail that corresponds to the Group ContractGroup and put it into requestScope for display
            ClientDetail clientDetail = ClientDetail.findBy_ContractGroup(groupContractGroup);

            appReqBlock.putInRequestScope("clientDetail", clientDetail);
        }

        new ContractBillingTableModel(appReqBlock);

        return determineBillingDialogToDisplay(billScheduleVO.getBillMethodCT(), checkProductType(formBean.getValue("optionId")));
    }

    private String showInforceQuoteDialog(AppReqBlock appReqBlock) throws Exception
    {
        if ((appReqBlock.getSessionBean("contractMainSessionBean").getValue("contractId") == null) || appReqBlock.getSessionBean("contractMainSessionBean").getValue("contractId").equals(""))
        {
            appReqBlock.getHttpServletRequest().setAttribute("errorMessage", "Contract Must Be Selected For Inforce Quote");
        }
        else
        {
            new InforceUseCaseComponent().performInforceQuote();
        }

        // Current system date is the default Quote Date.
        String quoteDate = DateTimeUtil.formatYYYYMMDDToMMDDYYYY(new EDITDate().getFormattedDate());

        appReqBlock.getHttpServletRequest().setAttribute("quoteDate", quoteDate);

        appReqBlock.getHttpSession().removeAttribute("quoteVO");
        
        return INFORCE_QUOTE_DIALOG;
    }
    private String closeTranDialog(AppReqBlock appReqBlock) throws Exception
    {
    	String segmentPK = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("segmentPK");

        UserSession userSession = appReqBlock.getUserSession();

        if (!segmentPK.equals(""))
        {
            userSession.setSegmentPK(Long.parseLong(segmentPK));
        }

        appReqBlock.getFormBean().putValue("segmentPK", String.valueOf(userSession.getSegmentPK()));
        
    	return loadContract(appReqBlock);
    }
    
    private String closeInforceQuoteDialog(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("quoteVO");

//        PageBean baseRiderBean = appReqBlock.getSessionBean("contractBase").getPageBean("contractBase");
//        String optionId = baseRiderBean.getValue("optionId");

        // when user performs quote calculations the contract is locked and unlocked
        // while unlocking the segmentPK is set to zero hence the buttons
        // change and delete on contract toolbar are  disabled,
        // the following code solves the problem.
        String segmentPK = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("segmentPK");

        UserSession userSession = appReqBlock.getUserSession();

        if (!segmentPK.equals(""))
        {
            userSession.setSegmentPK(Long.parseLong(segmentPK));
        }

        appReqBlock.getFormBean().putValue("segmentPK", String.valueOf(userSession.getSegmentPK()));
        
        return loadContract(appReqBlock);
    }

    private String closeLoanPayoffQuoteDialog(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("loanPayoffQuoteVO");

        return CONTRACT_LOAN_INVESTMENTS;
    }

    private String performInforceQuote(AppReqBlock appReqBlock) throws Exception
    {
        boolean errorFound = editInforceQuoteRequest(appReqBlock);

        String ignoreEditWarnings = appReqBlock.getReqParm("ignoreEditWarnings");
        ignoreEditWarnings = (ignoreEditWarnings == null) ? "" : ignoreEditWarnings;
//        VOEditException voEditException = null;
        PortalEditingException editingException = null;

        PageBean formBean = appReqBlock.getFormBean();
        String quoteDate = formBean.getValue("quoteDate");
        PageBean contractMain = appReqBlock.getSessionBean("contractBase").getPageBean("contractBase");
        String segmentPK = contractMain.getValue("segmentPK");
        String quoteTypeCT = Util.initString(appReqBlock.getReqParm("quoteType"), null);
        String returnPage = "";
         appReqBlock.putInRequestScope("quoteType", quoteTypeCT);

        if ((segmentPK != null) && Util.isANumber(segmentPK))
        {
             if (!errorFound)
            {
                //lock segment being quoted
                long segmentPKAsLong = (Util.isANumber(segmentPK)) ? Long.parseLong(segmentPK) : 0;
                UserSession userSession = appReqBlock.getUserSession();

                userSession.lockSegment(segmentPKAsLong);

                String operator = userSession.getUsername();

                Event eventComponent = new EventComponent();

                if (!ignoreEditWarnings.equalsIgnoreCase("true"))
                {
                    try
                    {
                        QuoteVO quoteVO = eventComponent.performInforceQuote(DateTimeUtil.formatMMDDYYYYToYYYYMMDD(quoteDate), quoteTypeCT, Long.parseLong(segmentPK), operator);
                        appReqBlock.getHttpSession().setAttribute("quoteVO", quoteVO);
                        appReqBlock.getHttpServletRequest().setAttribute("quoteDate", quoteDate);
                        engine.business.Lookup calcLookup = new engine.component.LookupComponent();
                        List voInclusionList = new ArrayList();
                        voInclusionList.add(FundVO.class);

                        FilteredFundVO[] filteredFundVO = calcLookup.composeFilteredFundVOByProductStructurePK(quoteVO.getSegmentVO()[0].getProductStructureFK(), voInclusionList);
                        appReqBlock.getHttpSession().setAttribute("filteredFundVOs", filteredFundVO);
                    }
                    catch (SPException e)
                    {
                        System.out.println(e);

                        e.printStackTrace();

                        ValidationVO[] validationVOs = e.getValidationVO();

                        if (validationVOs != null)
                        {
                            if (validationVOs.length > 0)
                            {
                                editingException = new PortalEditingException();

                                editingException.setValidationVOs(validationVOs);
                            }
                        }
                    }
                    catch (Exception e) // This was a RuntimeException - not sure why.
                    {
                        System.out.println(e);
                        e.printStackTrace();
                        EDITEventException editEventException = new EDITEventException(e.getMessage());
                        throw editEventException;                   

                    }
                    finally
                    {
                        userSession = appReqBlock.getUserSession();

                        userSession.unlockSegment();
                    }
                }
            }
        }

        appReqBlock.putInRequestScope("quoteTypeCT", quoteTypeCT);

        if (quoteTypeCT == null || quoteTypeCT.equals("CashTerminationValue"))
        {
            returnPage = INFORCE_QUOTE_DIALOG;
        }
        else if (quoteTypeCT.equals("Loan"))
        {
            returnPage = LOAN_QUOTE_DIALOG;
        }
        else if (quoteTypeCT.equals("RPU"))
        {
            returnPage = RPU_QUOTE_DIALOG;
        }
        else
        {
            returnPage = TRAD_INFORCE_QUOTE_DIALOG;
        }

        if (editingException != null)
        {
            editingException.setReturnPage(returnPage);
            throw editingException;
        }
        else
        {
            return returnPage;
        }
    }



    private String showSelectedInfQuoteFund(AppReqBlock appReqBlock)
    {
        String returnPage = "";

        appReqBlock.getHttpServletRequest().setAttribute("selectedFund", appReqBlock.getReqParm("selectedFund"));

        String quoteTypeCT =  Util.initString(appReqBlock.getReqParm("quoteType"), null);

        appReqBlock.putInRequestScope("quoteTypeCT", quoteTypeCT);

        if (quoteTypeCT == null || quoteTypeCT.equals("CashTerminationValue"))
        {
            returnPage = INFORCE_QUOTE_DIALOG;
        }
        else if (quoteTypeCT.equals("Loan"))
        {
            returnPage = LOAN_QUOTE_DIALOG;
        }

        return returnPage;
    }

    private String performLoanPayoffQuote(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();
        String quoteDate = formBean.getValue("quoteDate");

        String segmentPK = appReqBlock.getSessionBean("contractBase").getPageBean("contractBase").getValue("segmentPK");

        if ((segmentPK != null) && Util.isANumber(segmentPK))
        {
            event.business.Event eventComponent = new event.component.EventComponent();
            LoanPayoffQuoteVO loanPayoffQuoteVO = eventComponent.performLoanPayoffQuote(DateTimeUtil.formatMMDDYYYYToYYYYMMDD(quoteDate), Long.parseLong(segmentPK));

            appReqBlock.getHttpSession().setAttribute("loanPayoffQuoteVO", loanPayoffQuoteVO);

            engine.business.Lookup calcLookup = new engine.component.LookupComponent();
            List voInclusionList = new ArrayList();
            voInclusionList.add(FundVO.class);

            FilteredFundVO[] filteredFundVO = calcLookup.composeFilteredFundVOByProductStructurePK(loanPayoffQuoteVO.getSegmentVO().getProductStructureFK(), voInclusionList);
            appReqBlock.getHttpSession().setAttribute("filteredFundVOs", filteredFundVO);
        }
        else
        {
            appReqBlock.getHttpServletRequest().setAttribute("quoteDate", quoteDate);
            appReqBlock.getHttpServletRequest().setAttribute("loanQuoteMessage", "Contract Must Be Selected For Loan Payoff Quote");
        }

        return INFORCE_QUOTE_DIALOG;
    }

    private String clearInforceQuoteDialog(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("quoteVO");

        return INFORCE_QUOTE_DIALOG;
    }

    private String analyzeInforceQuote(AppReqBlock appReqBlock) throws Exception
    {
        boolean errorFound = editInforceQuoteRequest(appReqBlock);

        PageBean formBean = appReqBlock.getFormBean();
        String quoteDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("quoteDate"));
        String quoteTypeCT = Util.initString(appReqBlock.getReqParm("quoteType"), null);
        appReqBlock.putInRequestScope("quoteType", quoteTypeCT);

        PageBean contractMain = appReqBlock.getSessionBean("contractBase").getPageBean("contractBase");
        String segmentPK = contractMain.getValue("segmentPK");

        if (!errorFound)
        {
            //lock segment being quoted
            long segmentPKAsLong = (Util.isANumber(segmentPK)) ? Long.parseLong(segmentPK) : 0;
            UserSession userSession = appReqBlock.getUserSession();

            userSession.lockSegment(segmentPKAsLong);
            String operator = userSession.getUsername();
            Quote quote = new Quote();
            Analyzer analyzer = quote.analyzeInforceQuote(quoteDate, quoteTypeCT, segmentPKAsLong, operator);
            appReqBlock.getHttpSession().setAttribute("analyzerComponent", analyzer);

            SessionBean paramBean = appReqBlock.getSessionBean("paramBean");
            paramBean.clearState();

            PageBean debugScriptBean = paramBean.getPageBean("debugScriptBean");
            String[] scriptLines = analyzer.getScriptLines();
            debugScriptBean.putValues("scriptLines", scriptLines, new String[]
                {
                    "toString"
                }, null);

            String scriptName = analyzer.getScriptName();
            debugScriptBean.putValue("scriptName", scriptName);
            analyzer.resetScriptProcessor();

            String[] stringArray = analyzer.getDataStack();
            debugScriptBean.putValues("dataStackValues", stringArray, new String[]
                {
                    "toString"
                }, null);

            appReqBlock.getHttpSession().setAttribute("workingStorage", analyzer.getWS());
            stringArray = analyzer.getFunctions();
            debugScriptBean.putValues("functionTables", stringArray, new String[]
                {
                    "toString"
                }, null);
            stringArray = analyzer.getFunctionEntry("");
            debugScriptBean.putValues("functionEntries", stringArray, new String[]
                {
                    "toString"
                }, null);
            stringArray = debugScriptBean.getValues("breakPoints");
            debugScriptBean.putValues("breakPoints", stringArray, new String[]
                {
                    "toString"
                }, null);
            debugScriptBean.putValue("instPtr", analyzer.getInstPtr());
            debugScriptBean.putValue("lastInstPtr", analyzer.getLastInstPtr());
            debugScriptBean.putValue("currentRow", analyzer.getCurrentRow());
            appReqBlock.getHttpServletRequest().setAttribute("pageBean", debugScriptBean);
            appReqBlock.getHttpServletRequest().setAttribute("analyzeInforceQuote", "true");

//            Event eventComponent = new EventComponent();
//
//            QuoteVO quoteVO = eventComponent.performInforceQuote(quoteDate, Long.parseLong(segmentPK), operator);
//
//            appReqBlock.getHttpSession().setAttribute("quoteVO", quoteVO);
//            appReqBlock.getHttpServletRequest().setAttribute("quoteMonth", quoteMonth);
//            appReqBlock.getHttpServletRequest().setAttribute("quoteDay", quoteDay);
//            appReqBlock.getHttpServletRequest().setAttribute("quoteYear", quoteYear);

            userSession = appReqBlock.getUserSession();

            userSession.unlockSegment();
        }

         String returnPage = null;
         if (quoteTypeCT == null || quoteTypeCT.equals("CashTerminationValue"))
         {
             returnPage = INFORCE_QUOTE_DIALOG;
         }
         else if (quoteTypeCT.equals("Loan"))
         {
             returnPage = LOAN_QUOTE_DIALOG;
         }
         else
         {
             returnPage = TRAD_INFORCE_QUOTE_DIALOG;
         }
        
        return returnPage;
    }

    private boolean editInforceQuoteRequest(AppReqBlock appReqBlock)
    {
        boolean errorFound = false;

        PageBean formBean = appReqBlock.getFormBean();
        String quoteDate = formBean.getValue("quoteDate");
        PageBean contractMain = appReqBlock.getSessionBean("contractBase").getPageBean("contractBase");
        String segmentPK = contractMain.getValue("segmentPK");

        appReqBlock.getHttpServletRequest().setAttribute("quoteDate", quoteDate);

        if ((segmentPK != null) && Util.isANumber(segmentPK))
        {
            EDITDate quoteEDITDate = DateTimeUtil.getEDITDateFromMMDDYYYY(quoteDate);
            EDITDate effectiveEDITDate = DateTimeUtil.getEDITDateFromMMDDYYYY(contractMain.getValue("effectiveDate"));
            EDITDate incomeMaturityEDITDate = DateTimeUtil.getEDITDateFromMMDDYYYY(contractMain.getValue("terminationDate"));
            EDITDate issueDate = DateTimeUtil.getEDITDateFromMMDDYYYY(contractMain.getValue("issueDate"));
           
            // Defect 1055 adding issueDate for quotedate comparision check
            if ((quoteEDITDate.afterOREqual(effectiveEDITDate) || quoteEDITDate.afterOREqual(issueDate)))
            {
                errorFound = false;
            }
            else
            {
                if (quoteEDITDate.before(effectiveEDITDate)|| quoteEDITDate.before(issueDate))
                {
                    appReqBlock.getHttpServletRequest().setAttribute("inforceQuoteMessage", "Quote Date Less Than EffectiveDate/IssueDate  Of Contract");
                    errorFound = true;
                }
                else
                {
                    appReqBlock.getHttpServletRequest().setAttribute("inforceQuoteMessage", "Quote Date Greater Than Income/Maturity Date Of Contract");
                    errorFound = true;
                }
            }

            String optionCode = contractMain.getValue("optionId");
            if (optionCode.equalsIgnoreCase(Segment.OPTIONCODECT_TRADITIONAL_LIFE))
            {
                String quoteTypeCT = Util.initString(appReqBlock.getReqParm("quoteType"), "");
                String contractStatus = Util.initString(contractMain.getValue("segmentStatus"), null);
                if (quoteTypeCT.equalsIgnoreCase(FULL_SURRENDER_TYPE))
                {
                    if (!contractStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_ACTIVE) &&
                        !contractStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_REDUCED_PAIDUP) &&
                        !contractStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_LAPSEPENDING) &&
                        !contractStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_LTC) &&
                        !contractStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_CONVERSION_PENDING) &&
                        !contractStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_TRANSITION))
                    {
                        appReqBlock.getHttpServletRequest().setAttribute("inforceQuoteMessage", "Contract Not In Allowable Status For Quote");
                        errorFound = true;
                    }
                }
                else if (quoteTypeCT.equalsIgnoreCase(NOT_TAKEN_TYPE))
                {
                    if (!contractStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_ACTIVE) &&
                        !contractStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_ISSUEPENDINGPREMIUM) &&
                        !contractStatus.equalsIgnoreCase(Segment.SEGMENTSTATUSCT_TRANSITION))
                    {
                        appReqBlock.getHttpServletRequest().setAttribute("inforceQuoteMessage", "Contract Not In Allowable Status For Quote");
                        errorFound = true;
                    }
                }
            }
        }
        else
        {
            appReqBlock.getHttpServletRequest().setAttribute("inforceQuoteMessage", "Contract Must Be Selected For Inforce Quote");
            errorFound = true;
        }

        return errorFound;
    }


    private String clearLoanPayoffQuoteDialog(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("loanPayoffQuoteVO");

        return LOAN_PAYOFF_QUOTE_DIALOG;
    }

    private String showDepositDetailSummary(AppReqBlock appReqBlock) throws Exception
    {
        String selectedDepositsPK = appReqBlock.getFormBean().getValue("selectedDepositsPK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedDepositsPK", selectedDepositsPK);

        return DEPOSIT_DIALOG;
    }

    protected String showVOEditExceptionDialog(AppReqBlock appReqBlock) throws Exception
    {
//        VOEditException voEditException = (VOEditException) appReqBlock.getHttpSession().getAttribute("VOEditException");
//
//        // Remove voEditException from Session (to clear it), and move it to request scope.
//        appReqBlock.getHttpSession().removeAttribute("VOEditException");
//
//        appReqBlock.getHttpServletRequest().setAttribute("VOEditException", voEditException);

        return VO_EDIT_EXCEPTION_DIALOG;
    }

    private String showTaxAdjustmentDialog(AppReqBlock appReqBlock) throws Exception
    {
        //  Check for authorization
        String editTrxPK = appReqBlock.getReqParm("editTrxPK");
        appReqBlock.getHttpServletRequest().setAttribute("editTrxHistoryPK", appReqBlock.getReqParm("editTrxHistoryPK"));

        String filterTransaction = Util.initString(appReqBlock.getHttpServletRequest().getParameter("filterTransaction"), null);
        String statusRestriction = Util.initString(appReqBlock.getHttpServletRequest().getParameter("statusRestriction"), "");
        String fromDate = Util.initString(appReqBlock.getHttpServletRequest().getParameter("fromDate"), null);
        String toDate = Util.initString(appReqBlock.getHttpServletRequest().getParameter("toDate"), null);
        String filterPeriod = Util.initString(appReqBlock.getHttpServletRequest().getParameter("filterPeriod"), null);

        appReqBlock.getHttpServletRequest().setAttribute("filterTransaction", filterTransaction);
        appReqBlock.getHttpServletRequest().setAttribute("statusRestriction", statusRestriction);
        appReqBlock.getHttpServletRequest().setAttribute("fromDate", fromDate);
        appReqBlock.getHttpServletRequest().setAttribute("toDate", toDate);
        appReqBlock.getHttpServletRequest().setAttribute("filterPeriod", filterPeriod);
        checkForAdjustTransactionAuthorization(Long.parseLong(editTrxPK));

        new ContractHistorySummaryTableModel(appReqBlock);

        return TAX_ADJUSTMENT_DIALOG;
    }

    private String saveTaxAdjustment(AppReqBlock appReqBlock) throws Exception
    {
        PageBean financialHistoryBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("historyFormBean");
        PageBean formBean = appReqBlock.getFormBean();

        boolean findEditTrxVO = false;
        String taxYear = formBean.getValue("taxYear");

        if (!taxYear.equals(""))
        {
            financialHistoryBean.putValue("taxYear", taxYear);
            findEditTrxVO = true;
        }

        String costBasis = formBean.getValue("costBasis");

        if (!costBasis.equals(""))
        {
            financialHistoryBean.putValue("costBasis", costBasis);
            findEditTrxVO = true;
        }

        if (findEditTrxVO)
        {
            EDITTrxVO editTrxVOs = (EDITTrxVO) appReqBlock.getHttpSession().getAttribute("editTrxVOs");
            EDITTrxVO[] changedEditTrxVOs = (EDITTrxVO[]) appReqBlock.getHttpSession().getAttribute("changedEditTrxVOs");
            long editTrxPK = editTrxVOs.getEDITTrxPK();
            findChangedEditTrxVO(editTrxVOs, changedEditTrxVOs, editTrxPK, appReqBlock, taxYear, costBasis, null);
        }

        String editTrxHistoryPK = appReqBlock.getReqParm("editTrxHistoryPK");
        appReqBlock.setReqParm("selectedRowIds_ContractHistorySummaryTableModel", ("EDITTrxHistory_" + editTrxHistoryPK));

        return showHistoryDetailSummary(appReqBlock);

    }

    private String showDisburseTaxAdjustDialog(AppReqBlock appReqBlock) throws Exception
    {
        //  Check for authorization
//        PageBean financialHistoryBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("historyFormBean");

//        long editTrxPK = Long.parseLong(financialHistoryBean.getValue("editTrxPK"));

//        long editTrxPK = Long.parseLong(appReqBlock.getReqParm("editTrxPK"));
        new ContractHistorySummaryTableModel(appReqBlock);

        new ContractHistorySummaryTableModel(appReqBlock);

        return DISBURSE_TAX_ADJUST_DIALOG;
    }

    private String saveDisburseTaxAdjustment(AppReqBlock appReqBlock)
    {
        PageBean financialHistoryBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("historyFormBean");

        PageBean formBean = appReqBlock.getFormBean();

        boolean findEditTrxVO = false;
        String taxYear = formBean.getValue("taxYear");

        if (!taxYear.equals(""))
        {
            financialHistoryBean.putValue("taxYear", taxYear);
            findEditTrxVO = true;
        }

        String costBasis = formBean.getValue("costBasis");

        if (!costBasis.equals(""))
        {
            financialHistoryBean.putValue("costBasis", costBasis);
            findEditTrxVO = true;
        }

        String distributionCode = formBean.getValue("distributionCode");
        if (Util.isANumber(distributionCode))
        {
            distributionCode = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(distributionCode)).getCode();
            financialHistoryBean.putValue("distributionCode", distributionCode);
            findEditTrxVO = true;
        }
        else
        {
            distributionCode = null;
        }

        if (findEditTrxVO)
        {
            EDITTrxVO editTrxVOs = (EDITTrxVO) appReqBlock.getHttpSession().getAttribute("editTrxVOs");
            EDITTrxVO[] changedEditTrxVOs = (EDITTrxVO[]) appReqBlock.getHttpSession().getAttribute("changedEditTrxVOs");
            long editTrxPK = editTrxVOs.getEDITTrxPK();
            findChangedEditTrxVO(editTrxVOs, changedEditTrxVOs, editTrxPK, appReqBlock, taxYear, costBasis, distributionCode);
        }

        new ContractHistorySummaryTableModel(appReqBlock);

        return CONTRACT_FH_HISTORY;
    }

    private void findChangedEditTrxVO(EDITTrxVO editTrxVO, EDITTrxVO[] changedEditTrxVOs,
                                      long editTrxPK, AppReqBlock appReqBlock, String taxYear,
                                      String costBasis, String distributionCode)
    {
        List holdEditTrx = new ArrayList();

        if (changedEditTrxVOs != null)
        {
            for (int c = 0; c < changedEditTrxVOs.length; c++)
            {
                holdEditTrx.add(changedEditTrxVOs[c]);
            }
        }

        if (!taxYear.equals(""))
        {
            if (editTrxPK == editTrxVO.getEDITTrxPK())
            {
//                if (!taxYear.equals(""))
//                {
                    editTrxVO.setTaxYear(Integer.parseInt(taxYear));
//                }

            }
        }
                FinancialHistoryVO[] financialHistoryVO = editTrxVO.getEDITTrxHistoryVO()[0].getFinancialHistoryVO();

//                if (!costBasis.equals(""))
//                {
                    financialHistoryVO[0].setCostBasis(new EDITBigDecimal(costBasis).getBigDecimal());
//                }

                if (distributionCode != null)
        {
                    financialHistoryVO[0].setDistributionCodeCT(distributionCode);
        }

        holdEditTrx.add(editTrxVO);

        changedEditTrxVOs = (EDITTrxVO[]) holdEditTrx.toArray(new EDITTrxVO[holdEditTrx.size()]);
        appReqBlock.getHttpSession().setAttribute("changedEditTrxVOs", changedEditTrxVOs);
    }

    private void checkForAddTransactionAuthorization(String transactionType) throws Exception
    {
        if (transactionType.equalsIgnoreCase("AD"))
        {
            new EventUseCaseComponent().addAdjustDownTransaction();
        }
        else if (transactionType.equalsIgnoreCase("AU"))
        {
            new EventUseCaseComponent().addAdjustUpTransaction();
        }
        else if (transactionType.equalsIgnoreCase("AA"))
        {
            new EventUseCaseComponent().addAssetAllocationTransaction();
        }
        else if (transactionType.equalsIgnoreCase("DE"))
        {
            new EventUseCaseComponent().addDeathTransaction();
        }
        else if (transactionType.equalsIgnoreCase("DC"))
        {
            new EventUseCaseComponent().addDecreaseTransaction();
        }
        else if (transactionType.equalsIgnoreCase("FP"))
        {
            new EventUseCaseComponent().addForcedPayoutTransaction();
        }
        else if (transactionType.equalsIgnoreCase("FS"))
        {
            new EventUseCaseComponent().addFullSurrenderTransaction();
        }
        else if (transactionType.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_SURRENDER_OVERLOAN))
        {
            new EventUseCaseComponent().addSurrenderOverloanTransaction();
        }
        else if (transactionType.equalsIgnoreCase("IN"))
        {
            new EventUseCaseComponent().addIncreaseTransaction();
        }
        else if (transactionType.equalsIgnoreCase("LN"))
        {
            new EventUseCaseComponent().addLoanTransaction();
        }
        else if (transactionType.equalsIgnoreCase("LR"))
        {
            new EventUseCaseComponent().addLoanRepaymentTransaction();
        }
        else if (transactionType.equalsIgnoreCase("LS"))
        {
            new EventUseCaseComponent().addLumpSumTransaction();
        }
        else if (transactionType.equalsIgnoreCase("NT"))
        {
            new EventUseCaseComponent().addNotTakenTransaction();
        }
        else if (transactionType.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_PREMIUM_LOAN))
        {
            new EventUseCaseComponent().addPremiumLoanTransaction();
        }
        else if (transactionType.equalsIgnoreCase("PO"))
        {
            new EventUseCaseComponent().addPayoutTransaction();
        }
        else if (transactionType.equalsIgnoreCase("PR"))
        {
            new EventUseCaseComponent().addPortfolioRebalancingTransaction();
        }
        else if (transactionType.equalsIgnoreCase("PY"))
        {
            new EventUseCaseComponent().addPremiumTransaction();
        }
        else if (transactionType.equalsIgnoreCase("SW"))
        {
            new EventUseCaseComponent().addSystematicWithdrawalTransaction();
        }
        else if (transactionType.equalsIgnoreCase("TF") ||
                 transactionType.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_SERIES_TRANSFER))
        {
            new EventUseCaseComponent().addTransferTransaction();
        }
        else if (transactionType.equalsIgnoreCase("WI"))
        {
            new EventUseCaseComponent().addWithdrawalTransaction();
        }
    }

    private void checkForReverseTransactionAuthorization(long editTrxPK) throws Exception
    {
        String transactionTypeCT = this.getTransactionTypeCT(editTrxPK);

        if (transactionTypeCT.equalsIgnoreCase("AD"))
        {
            new EventUseCaseComponent().reverseAdjustDownTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("AU"))
        {
            new EventUseCaseComponent().reverseAdjustUpTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("AA"))
        {
            new EventUseCaseComponent().reverseAssetAllocationTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("DE"))
        {
            new EventUseCaseComponent().reverseDeathTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("DC"))
        {
            new EventUseCaseComponent().reverseDecreaseTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("FP"))
        {
            new EventUseCaseComponent().reverseForcedPayoutTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("FS"))
        {
            new EventUseCaseComponent().reverseFullSurrenderTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_SURRENDER_OVERLOAN))
        {
            new EventUseCaseComponent().reverseSurrenderOverloanTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("IN"))
        {
            new EventUseCaseComponent().reverseIncreaseTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_LOAN))
        {
            new EventUseCaseComponent().reverseLoanTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("LR"))
        {
            new EventUseCaseComponent().reverseLoanRepaymentTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("LS"))
        {
            new EventUseCaseComponent().reverseLumpSumTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("NT"))
        {
            new EventUseCaseComponent().reverseNotTakenTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("PO"))
        {
            new EventUseCaseComponent().reversePayoutTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("PR"))
        {
            new EventUseCaseComponent().reversePortfolioRebalancingTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("PY"))
        {
            new EventUseCaseComponent().reversePremiumTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("SW"))
        {
            new EventUseCaseComponent().reverseSystematicWithdrawalTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("TF") ||
                 transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_SERIES_TRANSFER))
        {
            new EventUseCaseComponent().reverseTransferTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase("WI"))
        {
            new EventUseCaseComponent().reverseWithdrawalTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_PREMIUM_LOAN))
        {
            new EventUseCaseComponent().reversePremiumLoanTransaction();
        }
        else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_CLAIM_PAYOUT))
        {
            new EventUseCaseComponent().reverseClaimPayoutTransaction();
    }
    }

    private void checkForUpdateTransactionAuthorization(String editTrxPK, String transactionTypeCT) throws Exception
    {
        if (editTrxPK.equals("")) // no pk, must be new (an "add")
        {
            this.checkForAddTransactionAuthorization(transactionTypeCT);
        }
        else
        {
            if (transactionTypeCT.equalsIgnoreCase("AD"))
            {
                new EventUseCaseComponent().updateAdjustDownTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("AU"))
            {
                new EventUseCaseComponent().updateAdjustUpTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("AA"))
            {
                new EventUseCaseComponent().updateAssetAllocationTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("DE"))
            {
                new EventUseCaseComponent().updateDeathTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("DC"))
            {
                new EventUseCaseComponent().updateDecreaseTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("FP"))
            {
                new EventUseCaseComponent().updateForcedPayoutTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("FS"))
            {
                new EventUseCaseComponent().updateFullSurrenderTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_SURRENDER_OVERLOAN))
            {
                new EventUseCaseComponent().updateSurrenderOverloanTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("IN"))
            {
                new EventUseCaseComponent().updateIncreaseTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("LN"))
            {
                new EventUseCaseComponent().updateLoanTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("LR"))
            {
                new EventUseCaseComponent().updateLoanRepaymentTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("LS"))
            {
                new EventUseCaseComponent().updateLumpSumTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("NT"))
            {
                new EventUseCaseComponent().updateNotTakenTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("PO"))
            {
                new EventUseCaseComponent().updatePayoutTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("PR"))
            {
                new EventUseCaseComponent().updatePortfolioRebalancingTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("PY"))
            {
                new EventUseCaseComponent().updatePremiumTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("SW"))
            {
                new EventUseCaseComponent().updateSystematicWithdrawalTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("TF") ||
                     transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_SERIES_TRANSFER))
            {
                new EventUseCaseComponent().updateTransferTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase("WI"))
            {
                new EventUseCaseComponent().updateWithdrawalTransaction();
            }
            else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_PREMIUM_LOAN))
            {
                new EventUseCaseComponent().updatePremiumLoanTransaction();
        }
            else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_CLAIM_PAYOUT))
            {
                new EventUseCaseComponent().updateClaimPayoutTransaction();
            }
    }
    }

    private void checkForAdjustTransactionAuthorization(long editTrxPK) throws Exception
    {
        String transactionTypeCT = this.getTransactionTypeCT(editTrxPK);

        if (transactionTypeCT.equalsIgnoreCase("AD"))
        {
            new EventUseCaseComponent().adjustAdjustDownTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("AU"))
        {
            new EventUseCaseComponent().adjustAdjustUpTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("AA"))
        {
            new EventUseCaseComponent().adjustAssetAllocationTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("DE"))
        {
            new EventUseCaseComponent().adjustDeathTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("DC"))
        {
            new EventUseCaseComponent().adjustDecreaseTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("FP"))
        {
            new EventUseCaseComponent().adjustForcedPayoutTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("FS"))
        {
            new EventUseCaseComponent().adjustFullSurrenderTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_SURRENDER_OVERLOAN))
        {
            new EventUseCaseComponent().adjustSurrenderOverloanTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("IN"))
        {
            new EventUseCaseComponent().adjustIncreaseTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("LN"))
        {
            new EventUseCaseComponent().adjustLoanTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("LR"))
        {
            new EventUseCaseComponent().adjustLoanRepaymentTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("LS"))
        {
            new EventUseCaseComponent().adjustLumpSumTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("NT"))
        {
            new EventUseCaseComponent().adjustNotTakenTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("PO"))
        {
            new EventUseCaseComponent().adjustPayoutTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("PR"))
        {
            new EventUseCaseComponent().adjustPortfolioRebalancingTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("PY"))
        {
            new EventUseCaseComponent().adjustPremiumTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("SW"))
        {
            new EventUseCaseComponent().adjustSystematicWithdrawalTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("TF") ||
                 transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_SERIES_TRANSFER))
        {
            new EventUseCaseComponent().adjustTransferTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase("WI"))
        {
            new EventUseCaseComponent().adjustWithdrawalTaxableHistory();
        }
        else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_PREMIUM_LOAN))
        {
            new EventUseCaseComponent().adjustPremiumLoanTaxableHistory();
    }
        else if (transactionTypeCT.equalsIgnoreCase(EDITTrx.TRANSACTIONTYPECT_CLAIM_PAYOUT))
        {
            new EventUseCaseComponent().adjustClaimPayoutTaxableHistory();
        }
    }

    private String getTransactionTypeCT(long editTrxPK) throws Exception
    {
        Event eventComponent = new EventComponent();

        List voInclusionList = new ArrayList();

        EDITTrxVO editTrxVO = eventComponent.composeEDITTrxVOByEDITTrxPK(editTrxPK, voInclusionList);

        return editTrxVO.getTransactionTypeCT();
    }

    private String getTrxCTFromDescription(String transactionType, String productStructureId)
    {
        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        String transactionTypeCode = null;

//        long productStructurePK = 0; // if productStructureId is blank
//
//        if (!productStructureId.equals("") && (!productStructureId.equalsIgnoreCase("Please Select")))
//        {
//            productStructurePK = Long.parseLong(productStructureId); //  if productStructureId is not blank
//        }
//
//        CodeTableVO[] trxTypes = codeTableWrapper.getCodeTableEntries("TRXTYPE", productStructurePK);
//
//        for (int t = 0; t < trxTypes.length; t++)
//        {
//            if (transactionType.equalsIgnoreCase(trxTypes[t].getCodeDesc()))
//            {
//                transactionTypeCode = trxTypes[t].getCode();
//
//                break;
//            }
//        }

        transactionTypeCode = codeTableWrapper.getCodeByCodeTableNameAndCodeDesc("TRXTYPE", transactionType);

        //look at new Death trx table
        if (transactionTypeCode == null)
        {
            transactionTypeCode = codeTableWrapper.getCodeByCodeTableNameAndCodeDesc("DEATHTRXTYPE", transactionType);
        }
        return transactionTypeCode;
    }

    private Suspense saveSuspenseChangesToSession(AppReqBlock appReqBlock) throws Exception
    {
        PageBean formBean = appReqBlock.getFormBean();

        CodeTableWrapper codeTableWrapper = CodeTableWrapper.getSingleton();

        String suspensePK = Util.initString(formBean.getValue("suspensePK"), "");

        Suspense suspense = (Suspense)appReqBlock.getHttpServletRequest().getAttribute("suspense");

        if (Util.isANumber(suspensePK))
        {
            if (suspense == null  || suspense.getSuspensePK().toString() != suspensePK )
            {
            suspense = Suspense.findByPK(new Long(suspensePK));
                appReqBlock.getHttpSession().removeAttribute("clientDetail");
                appReqBlock.getHttpSession().removeAttribute("clientAddress");
                appReqBlock.getHttpSession().removeAttribute("preference");
            }
        }

        //Transaction Values
        String contractNumber = Util.initString(formBean.getValue("contractNumber"), null);
        String userDefNumber = formBean.getValue("userNumber");

        String effectiveDate = Util.initString(formBean.getValue("effectiveDate"), null);

        EDITDate effDate = null;
        if (effectiveDate != null)
        {
            effDate = DateTimeUtil.getEDITDateFromMMDDYYYY(effectiveDate);
        }
        String taxYear = effDate.getFormattedYear();

        String direction = Util.initString(formBean.getValue("direction"), null);

        if (!direction.equalsIgnoreCase("Please Select"))
        {
            direction = codeTableWrapper.getCodeTableEntry(Long.parseLong(direction)).getCode();
        }
        else
        {
            direction = null;
        }

        String amount = formBean.getValue("amount");
        String memoCode = Util.initString(formBean.getValue("memoCode"), null);
        String premiumType = Util.initString(formBean.getValue("premiumType"), null);

        if (!premiumType.equalsIgnoreCase("Please Select"))
        {
            premiumType = codeTableWrapper.getCodeTableEntry(Long.parseLong(premiumType)).getCode();
        }
        else
        {
            premiumType = null;
        }

        String transactionType = formBean.getValue("transactionType");

        if (!transactionType.equals(""))
        {
            transactionType = codeTableWrapper.getCodeTableEntry(Long.parseLong(transactionType)).getCode();
        }

        EDITDate currentDate = new EDITDate();

        String originalContractNumber = Util.initString(formBean.getValue("originalContractNumber"), null);
        String originalAmount = formBean.getValue("originalAmount");
        String originalMemoCode = Util.initString(formBean.getValue("originalMemoCode"), null);
        String maintenanceInd = formBean.getValue("maintenanceInd");
        String contractPlacedFrom = Util.initString(formBean.getValue("contractPlacedFrom"), null);
        String pendingAmount = formBean.getValue("pendingAmount");
        String reasonCode = formBean.getValue("reasonCode");
        if (Util.isANumber(reasonCode))
        {
            reasonCode = codeTableWrapper.getCodeTableEntry(Long.parseLong(reasonCode)).getCode();
        }
        else if (reasonCode.equalsIgnoreCase("Please Select"))
        {
            reasonCode = null;
        }

        String companyName = appReqBlock.getReqParm("company");
        Company company = null;
        if (companyName != null)
        {
            company = Company.findBy_CompanyName(companyName);
        }

        if (suspensePK.equals("") || suspensePK.equals("0"))
        {
            originalContractNumber = contractNumber;
            originalAmount = amount;
            originalMemoCode = memoCode;
            maintenanceInd = "M";
            contractPlacedFrom = "Individual";
        }

        if (suspense == null)
        {
            suspense = new Suspense();

            suspense.setProcessDate(currentDate);

            if (Util.isANumber(amount))
            {
                suspense.setSuspenseAmount(new EDITBigDecimal(amount));
            }

            suspense.setOriginalContractNumber(originalContractNumber);

            if (Util.isANumber(originalAmount))
            {
                suspense.setOriginalAmount(new EDITBigDecimal(originalAmount));
            }

            suspense.setOriginalMemoCode(originalMemoCode);

            if (Util.isANumber(pendingAmount))
            {
                suspense.setPendingSuspenseAmount(new EDITBigDecimal(pendingAmount));
            }

            suspense.setAccountingPendingInd("Y");
            suspense.setMaintenanceInd(maintenanceInd);
            suspense.setOperator(appReqBlock.getUserSession().getUsername());
            suspense.setMaintDateTime(new EDITDateTime());
            suspense.setSuspenseType(Util.initString(formBean.getValue("suspenseType"), "Contract"));
            suspense.setContractPlacedFrom(contractPlacedFrom);
        }

        suspense.setUserDefNumber(userDefNumber);
        suspense.setEffectiveDate(effDate);
        suspense.setMemoCode(memoCode);
        suspense.setPremiumTypeCT(premiumType);
        suspense.setDirectionCT(direction);
            suspense.setTaxYear(Integer.parseInt(taxYear));
        suspense.setReasonCodeCT(Util.initString(reasonCode, null));

        String preTEFRAGain = Util.initString(formBean.getValue("preTEFRAGain"), "0");
        String preTEFRAAmount = Util.initString(formBean.getValue("preTEFRAAmount"), "0");
        String postTEFRAGain = Util.initString(formBean.getValue("postTEFRAGain"), "0");
        String postTEFRAAmount = Util.initString(formBean.getValue("postTEFRAAmount"), "0");

        suspense.setPreTEFRAGain(new EDITBigDecimal(preTEFRAGain));
        suspense.setPreTEFRAAmount(new EDITBigDecimal(preTEFRAAmount));
        suspense.setPostTEFRAGain(new EDITBigDecimal(postTEFRAGain));
        suspense.setPostTEFRAAmount(new EDITBigDecimal(postTEFRAAmount));
        if (company != null)
        {
            suspense.setCompanyFK(company.getCompanyPK());
        }

        if (Util.isANumber(suspensePK))
        {
            appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);
        }

        return suspense;
    }

    private String showBucketAndInvestmentHistories(AppReqBlock appReqBlock) throws Exception
    {
        event.business.Event eventComponent = new event.component.EventComponent();

        String investmentFK = appReqBlock.getReqParm("investmentFK");
        String editTrxHistoryPK = appReqBlock.getReqParm("editTrxHistoryPK");
        String fundName = appReqBlock.getReqParm("fundName");

        List voInclusionList = new ArrayList();
        voInclusionList.add(BucketVO.class);

        BucketHistoryVO[] bucketHistoryVOs = eventComponent.composeBucketHistoryByInvestmentAndEditTrxHistory(Long.parseLong(investmentFK), Long.parseLong(editTrxHistoryPK), voInclusionList);

        InvestmentHistoryVO[] investmentHistoryVOs = eventComponent.findInvestmentHistoryByInvestmentAndEditTrxHistory(Long.parseLong(investmentFK), Long.parseLong(editTrxHistoryPK));

        if (bucketHistoryVOs != null)
        {
            appReqBlock.getHttpServletRequest().setAttribute("bucketHistoryVOs", bucketHistoryVOs);
        }

        if (investmentHistoryVOs != null)
        {
            appReqBlock.getHttpServletRequest().setAttribute("investmentHistoryVOs", investmentHistoryVOs);

            // This will allow us to match the FKs in the investmentHistoryVOs to the charge code numbers.
            // This map only has pertinent entries.  A way to merge additional join column into
            // the VOs for use by the JSP.
            Map mapChargeCodePKsToNumbers = createMapForChargeCodeLookups(investmentHistoryVOs);

            appReqBlock.getHttpServletRequest().setAttribute("mapChargeCodePKsToNumbers", mapChargeCodePKsToNumbers);
        }

        appReqBlock.getHttpServletRequest().setAttribute("fundName", fundName);

        return BUCKET_AND_INVESTMENT_HISTORIES_DIALOG;
    }

    /**
     * Create a Map relating charge code PKs to charge code numbers that display.
     * This Map is limited to only charge code PKs that are in this array of
     * investment history value objects.
     * @param investmentHistoryVOs
     * @return Map of charge code PKs and charge codes
     */
    private Map createMapForChargeCodeLookups(InvestmentHistoryVO[] investmentHistoryVOs)
    {
        //        // TESTING CODE - since nothing has history with charge codes.
        //        // Uncomment and fill in the testFKs with actual PKs of charge codes.
        //
        //        if (true)
        //        {
        //            long[] testFKs = new long[] {
        //                1110407342065L,
        //                1110407342066L,
        //                1110467402248L
        //            };
        //
        //            int number = testFKs.length;
        //
        //            for (int i = 0; i < investmentHistoryVOs.length; i++)
        //            {
        //                if (Math.random() < 0.5d)  // show a charge code half of the time
        //                {
        //                    InvestmentHistoryVO investmentHistoryVO = investmentHistoryVOs[i];
        //                    int which = (int) (number * Math.random());  
        //                    investmentHistoryVO.setChargeCodeFK(testFKs[which]);
        //                }
        //            }
        //        }
        Map mapToReturn = new HashMap();

        for (int i = 0; i < investmentHistoryVOs.length; i++)
        {
            InvestmentHistoryVO investmentHistoryVO = investmentHistoryVOs[i];

            long chargeCodePK = investmentHistoryVO.getChargeCodeFK();

            if (chargeCodePK != 0)
            {
                ChargeCode chargeCode = ChargeCode.findByPK(chargeCodePK);

                ChargeCodeVO chargeCodeVO = (ChargeCodeVO) chargeCode.getVO();

                String chargeCodeNum = chargeCodeVO.getChargeCode();

                mapToReturn.put(new Long(chargeCodePK), chargeCodeNum);
            }
        }

        return mapToReturn;
    }

    /**
      * Display the Overdue Charges dialog to show the outstanding/unsettled charges for this transaction.
      * @param appReqBlock
      * @return
      */
    public String showOverdueChargeRemainingDialog(AppReqBlock appReqBlock) throws Exception
    {
        String editTrxPK = appReqBlock.getReqParm("editTrxPK");

        OverdueChargeVO[] overdueChargeVOs = null;
        String overdueMessage = null;

        OverdueChargeRemaining overdueChargeRemaining = null; 

        if (Util.isANumber(editTrxPK))
        {
          overdueChargeRemaining = new OverdueChargeRemaining(EDITTrx.findBy_PK(new Long(editTrxPK)), OverdueChargeRemaining.SCOPE_EDITTRX_LEVEL);
          
          overdueChargeRemaining.calculate();
        }

        if (overdueChargeRemaining != null && overdueChargeRemaining.remainingAmountsExist())
        {
            @SuppressWarnings("null")
			Hashtable overdueHT = this.calculateOverdueAmounts(overdueChargeVOs[0]);

            EDITBigDecimal overdueCoi = (EDITBigDecimal) overdueHT.get("overdueCoi");
            EDITBigDecimal overdueAdmin = (EDITBigDecimal) overdueHT.get("overdueAdmin");
            EDITBigDecimal overdueExpense = (EDITBigDecimal) overdueHT.get("overdueExpense");
            EDITBigDecimal overdueCollateralization = (EDITBigDecimal) overdueHT.get("overdueColl");

            if (overdueCoi.isGT("0") || overdueAdmin.isGT("0") || overdueExpense.isGT("0") || overdueCollateralization.isGT("0"))
            {
                appReqBlock.getHttpServletRequest().setAttribute("overdueCoi", overdueCoi.toString());
                appReqBlock.getHttpServletRequest().setAttribute("overdueAdmin", overdueAdmin.toString());
                appReqBlock.getHttpServletRequest().setAttribute("overdueExpense", overdueExpense.toString());
                appReqBlock.getHttpServletRequest().setAttribute("overdueColl", overdueCollateralization.toString());
            }
            else
            {
                overdueMessage = "Transaction does not have overdue charges";
                appReqBlock.getHttpServletRequest().setAttribute("OverdueMessage", overdueMessage);
            }
        }
        else
        {
            overdueMessage = "Transaction does not have overdue charges";
            appReqBlock.getHttpServletRequest().setAttribute("OverdueMessage", overdueMessage);
        }

        return OVERDUE_CHARGE_REMAINING_DIALOG;
    }

    /**
     * Builds list of objects needed from the database
     * @return  ArrayList
     */
    private List setListForSegmentVO()
    {
        List voInclusionList = new ArrayList();
        voInclusionList.add(SegmentVO.class);
        voInclusionList.add(InvestmentVO.class);
        voInclusionList.add(InvestmentAllocationVO.class);
        voInclusionList.add(ContractClientVO.class);
        voInclusionList.add(ContractClientAllocationVO.class);
        voInclusionList.add(PayoutVO.class);
        voInclusionList.add(LifeVO.class);
        voInclusionList.add(NoteReminderVO.class);
        voInclusionList.add(BucketVO.class);
        voInclusionList.add(BucketAllocationVO.class);
        voInclusionList.add(DepositsVO.class);
        voInclusionList.add(InherentRiderVO.class);
        voInclusionList.add(ContractRequirementVO.class);
        voInclusionList.add(AgentHierarchyVO.class);
        voInclusionList.add(AgentHierarchyAllocationVO.class);
        voInclusionList.add(AgentSnapshotVO.class);
        voInclusionList.add(RequiredMinDistributionVO.class);
        voInclusionList.add(BillScheduleVO.class);
        voInclusionList.add(PremiumDueVO.class);
        voInclusionList.add(CommissionPhaseVO.class);
        voInclusionList.add(ValueAtIssueVO.class);

        return voInclusionList;
    }

    /**
     * Saves TEFRA Information for the selected suspense to user session.
     * @param appReqBlock
     * @return
     */
//    private String saveTEFRAInformation(AppReqBlock appReqBlock)
//    {
//        String suspensePK = appReqBlock.getReqParm("suspensePK");
//
//        SuspenseVO[] suspenseVOs = (SuspenseVO[]) appReqBlock.getHttpSession().getAttribute("suspenseVOs");
//
//        SuspenseVO suspenseVO = null;
//
//        for (int i = 0; i < suspenseVOs.length; i++)
//        {
//            suspenseVO = suspenseVOs[i];
//
//            if (suspenseVO.getSuspensePK() == Long.parseLong(suspensePK))
//            {
//                suspenseVO.setPreTEFRAGain(new EDITBigDecimal(appReqBlock.getReqParm("preTEFRAGain")).getBigDecimal());
//                suspenseVO.setPreTEFRAAmount(new EDITBigDecimal(appReqBlock.getReqParm("preTEFRAAmount")).getBigDecimal());
//                suspenseVO.setPostTEFRAGain(new EDITBigDecimal(appReqBlock.getReqParm("postTEFRAGain")).getBigDecimal());
//                suspenseVO.setPostTEFRAAmount(new EDITBigDecimal(appReqBlock.getReqParm("postTEFRAAmount")).getBigDecimal());
//
//                break;
//            }
//        }
//
//        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);
//
//        return CONTRACT_SUSPENSE;
//    }

    /**
     * From the Payee Override Dialog, find the client by the tax id entered
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String findPayeeClientByTaxId(AppReqBlock appReqBlock) throws Exception
    {
        client.business.Lookup clientLookup = new client.component.LookupComponent();

        PageBean formBean = appReqBlock.getFormBean();
        String taxId = formBean.getValue("taxIdentification");

        List voExclusionVector = new ArrayList();
//        voExclusionVector.add(TaxInformationVO.class);
        voExclusionVector.add(ClientRoleVO.class);
        voExclusionVector.add(ClientSetupVO.class);
        voExclusionVector.add(ReinsurerVO.class);

        ClientDetailVO[] clientDetailVOs = clientLookup.findClientDetailByTaxId(taxId, true, voExclusionVector);

        appReqBlock.getHttpSession().setAttribute("clientDetailVOs", clientDetailVOs);
        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return ADD_PAYEE_OVERRIDE_DIALOG;
    }

    /**
     * From the Payee Override Dialog, find the client by the name and DOB entered
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String findPayeeClientsByNameDOB(AppReqBlock appReqBlock) throws Exception
    {
        client.business.Lookup clientLookup = new client.component.LookupComponent();

        PageBean formBean = appReqBlock.getFormBean();
        String name = formBean.getValue("name");
        name = Util.substitute(name, "'", "''");

        String dateOfBirth = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(formBean.getValue("dob"));

        String[] nameElements = Util.fastTokenizer(name, ",");

        ClientDetailVO[] clientDetailVOs = null;
        List voExclusionVector = new ArrayList();
//        voExclusionVector.add(TaxInformationVO.class);
        voExclusionVector.add(ClientRoleVO.class);

        if (nameElements.length == 2)
        {
            if (nameElements[1].equals(""))
            {
                clientDetailVOs = clientLookup.findClientDetailByLastNameDOB(nameElements[0].trim(), dateOfBirth, true, voExclusionVector);
            }
            else
            {
                clientDetailVOs = clientLookup.findClientDetailByLastNamePartialFirstNameDOB(nameElements[0].trim(), nameElements[1].trim(), dateOfBirth, true, voExclusionVector);
            }
        }

        else if (nameElements.length == 1)
        {
            clientDetailVOs = clientLookup.findClientDetailByPartialLastNameDOB(nameElements[0].trim(), dateOfBirth, true, voExclusionVector);
        }

        appReqBlock.getHttpSession().setAttribute("clientDetailVOs", clientDetailVOs);
        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return ADD_PAYEE_OVERRIDE_DIALOG;
    }

    /**
     * From the Payee Override Dialog, find the client by the name entered
     * @param appReqBlock
     * @return
     * @throws Exception
     */
    private String findPayeeClientsByName(AppReqBlock appReqBlock) throws Exception
    {
        client.business.Lookup clientLookup = new client.component.LookupComponent();

        PageBean formBean = appReqBlock.getFormBean();
        String name = formBean.getValue("name");
        name = Util.substitute(name, "'", "''");

        String[] nameElements = Util.fastTokenizer(name, ",");

        ClientDetailVO[] clientDetailVOs = null;
        List voExclusionVector = new ArrayList();
//        voExclusionVector.add(TaxInformationVO.class);
        voExclusionVector.add(ClientRoleVO.class);

        if (nameElements.length == 2)
        {
            if (nameElements[1].equals(""))
            {
                clientDetailVOs = clientLookup.findClientDetailByLastName(nameElements[0].trim(), true, voExclusionVector);
            }
            else
            {
                clientDetailVOs = clientLookup.findClientDetailByLastNamePartialFirstName(nameElements[0].trim(), nameElements[1].trim(), true, voExclusionVector);
            }
        }

        else if (nameElements.length == 1)
        {
            clientDetailVOs = clientLookup.findClientDetailByPartialLastName(nameElements[0].trim(), true, voExclusionVector);
        }

        appReqBlock.getHttpSession().setAttribute("clientDetailVOs", clientDetailVOs);
        appReqBlock.getHttpServletRequest().setAttribute("formBean", formBean);

        return ADD_PAYEE_OVERRIDE_DIALOG;
    }

    private String showSupplementalDialog(AppReqBlock appReqBlock)
    {
        return SUPPLEMENTAL_DIALOG;
    }

    private String enableDepositForAdjustment(AppReqBlock appReqBlock) throws Exception
    {
        try
        {
            new InforceUseCaseComponent().adjustDeposit();
            appReqBlock.getHttpServletRequest().setAttribute("enableForAdjustment", "Y");
        }
        catch (Exception e)
        {
            appReqBlock.getHttpServletRequest().setAttribute("message", "Not Authorized For Adjustment");
        }

        appReqBlock.getHttpServletRequest().setAttribute("selectedDepositsPK", appReqBlock.getReqParm("selectedDepositsPK"));

        return DEPOSIT_DIALOG;
    }

    private String saveDepositAdjustment(AppReqBlock appReqBlock) throws Exception
    {
        String depositsPK = appReqBlock.getReqParm("selectedDepositsPK");
        String depositType = appReqBlock.getReqParm("depositType");

        if (Util.isANumber(depositType))
        {
            depositType = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(depositType)).getCode();

//            String operator = appReqBlock.getUserSession().getUsername();

//            contract.business.Contract contractComponent = new contract.component.ContractComponent();
//            String message = contractComponent.saveDeposit(new Long(depositsPK), depositType, operator);
            DepositsVO[] depositsVOs = (DepositsVO[]) appReqBlock.getHttpSession().getAttribute("depositsVOs");
            
            if (depositsVOs != null)
            {
                for (int i = 0; i < depositsVOs.length; i++)
                {
                    long currentDepositsPK = depositsVOs[i].getDepositsPK();
                    
                    if (currentDepositsPK == Long.valueOf(depositsPK).longValue())
                    {
                        depositsVOs[i].setDepositTypeCT(depositType);
                    }
                }
            }

            String message = "Deposit Saved Successfully";

            appReqBlock.getHttpServletRequest().setAttribute("message", message);

//            PageBean formBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
//            DepositsVO[] depositsVOs = Deposits.findBy_SegmentFK(Long.parseLong(formBean.getValue("segmentPK")));

            appReqBlock.getHttpSession().setAttribute("depositsVOs", depositsVOs);
        }

        return DEPOSIT_DIALOG;
    }

    private String setNoteReminderSequenceNumber(SessionBean contractNotesSessionBean) throws Exception
    {
        int highestSeq = 0;

        Map noteBeans = contractNotesSessionBean.getPageBeans();
        Set keys = noteBeans.keySet();

        Iterator it = keys.iterator();

        while (it.hasNext())
        {
            String key = (String) it.next();

            PageBean pb = (PageBean) noteBeans.get(key);

            String sequence = pb.getValue("sequence");

            if (Util.isANumber(sequence))
            {
                int sequenceNumber = Integer.parseInt(sequence);
                if (sequenceNumber > highestSeq)
                {
                    highestSeq = sequenceNumber;
                }
            }
        }

        return (highestSeq += 1) + "";
    }
    private String showProposalDialog(AppReqBlock appReqBlock) throws Exception
    {
        // Check for authorization
        new InforceUseCaseComponent().performProposal();
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

        return PROPOSAL_DIALOG;
    }

    private String performProposal(AppReqBlock appReqBlock) throws Exception
    {
        String proposalDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(appReqBlock.getReqParm("proposalDate"));

        ContractVO contractVO = buildContractVO(appReqBlock);

        SegmentVO segmentVO = contractVO.getSegmentVO();

        Proposal proposal = new Proposal(segmentVO, proposalDate);

        ProposalVO proposalVO = proposal.getProposal();

        appReqBlock.getHttpSession().setAttribute("proposalVO", proposalVO);

        return PROPOSAL_DIALOG;
    }

    private String clearProposalDialog(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("proposalVO");

        return PROPOSAL_DIALOG;
    }

    private String closeProposalDialog(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("proposalVO");

        PageBean baseRiderBean = appReqBlock.getSessionBean("contractBase").getPageBean("contractBase");
        String optionId = baseRiderBean.getValue("optionId");

        // when user performs quote calculations the contract is locked and unlocked
        // while unlocking the segmentPK is set to zero hence the buttons
        // change and delete on contract toolbar are  disabled,
        // the following code solves the problem.
        String segmentPK = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean").getValue("segmentPK");

        UserSession userSession = appReqBlock.getUserSession();

        if (!segmentPK.equals(""))
        {
            userSession.setSegmentPK(Long.parseLong(segmentPK));
        }

        String productType = checkProductType(optionId);
        String mainReturnPage = getMainReturnPage(productType);

        return mainReturnPage;
    }

    private void populateSuspenseClientInformation(AppReqBlock appReqBlock, Suspense refundSuspense, String disbursementSourceCT, String addressTypeCT)
    {
        String selectedClientDetailPK = Util.initString(appReqBlock.getFormBean().getValue("selectedClientDetailPK"), null);
        appReqBlock.getHttpServletRequest().setAttribute("selectedClientDetailPK", selectedClientDetailPK);

        ClientDetail clientDetail = populateClientDetail(appReqBlock, refundSuspense, selectedClientDetailPK);

        populateClientAddress(appReqBlock, refundSuspense, addressTypeCT, clientDetail);

        populatePreference(appReqBlock, refundSuspense, disbursementSourceCT, clientDetail);

        appReqBlock.getHttpSession().removeAttribute("clientDetail");
        appReqBlock.getHttpSession().removeAttribute("clientAddress");
        appReqBlock.getHttpSession().removeAttribute("preference");
        appReqBlock.getHttpSession().removeAttribute("bankAccountINformation");
    }

   private ClientDetail populateClientDetail(AppReqBlock appReqBlock, Suspense refundSuspense, String selectedClientDetailPK)
    {
        ClientDetail clientDetail = null;
        if (selectedClientDetailPK != null)
        {
            clientDetail = ClientDetail.findByPK(new Long(selectedClientDetailPK));
        }
        else
        {
            clientDetail = (ClientDetail)SessionHelper.newInstance(ClientDetail.class, SessionHelper.EDITSOLUTIONS);
            clientDetail.setOverrideStatus("O");
            clientDetail.setDefaults();
            clientDetail.setTaxIdentification(ClientDetail.DEFAULT_TAXID);
        }

        String trustType = Util.initString(appReqBlock.getReqParm("trustType"), null);
        if (trustType.equalsIgnoreCase("Please Select"))
        {
            trustType = null;
        }

        clientDetail.setLastName(Util.initString(appReqBlock.getReqParm("lastName"), null));
        clientDetail.setFirstName(Util.initString(appReqBlock.getReqParm("firstName"), null));
        clientDetail.setMiddleName(Util.initString(appReqBlock.getReqParm("middleName"), null));
        clientDetail.setNamePrefix(Util.initString(appReqBlock.getReqParm("namePrefix"), null));
        clientDetail.setNameSuffix(Util.initString(appReqBlock.getReqParm("nameSuffix"), null));
        clientDetail.setCorporateName(Util.initString(appReqBlock.getReqParm("corporateName"), null));
        clientDetail.setTrustTypeCT(Util.initString(appReqBlock.getReqParm("trustType"), null));
        clientDetail.setOperator(appReqBlock.getUserSession().getUsername());

        clientDetail.addSuspense(refundSuspense);

        return clientDetail;
    }

    private ClientAddress populateClientAddress(AppReqBlock appReqBlock, Suspense refundSuspense, String addressTypeCT, ClientDetail clientDetail)
    {
        String addressOverrideInd = appReqBlock.getReqParm("addressOverrideInd");
        String overrideInd = appReqBlock.getReqParm(("overrideInd"));

        ClientAddress clientAddress = null;
//        boolean addressTypeChanged = false;

        //When no overrides use the current address of the client
        if (addressOverrideInd == null && overrideInd == null)
        {
            return clientAddress;
        }

        clientAddress = (ClientAddress)appReqBlock.getHttpSession().getAttribute("clientAddress");
        Long clientAddressPK = null;

        if (clientAddress != null)
        {
//            clientAddressPK = clientAddress.getClientAddressPK();
//            if (!clientAddress.getAddressTypeCT().equalsIgnoreCase(addressTypeCT))
//            {
//                addressTypeChanged = true;
//            }
        }

        if (addressOverrideInd != null || clientAddress == null)
//            if ((addressOverrideInd != null && addressTypeChanged) || clientAddress == null)
        {
            clientAddress = (ClientAddress)SessionHelper.newInstance(ClientAddress.class, SessionHelper.EDITSOLUTIONS);;
            clientAddress.setOverrideStatus("O");
            clientAddress.setAddressDefaults(clientDetail.getClientDetailPK());
            setupAddressPageFields(appReqBlock, clientAddress, addressTypeCT);

            clientDetail.addClientAddress(clientAddress);
            clientAddress.addSuspense(refundSuspense);
        }
        else
        {
            if (clientAddressPK != null)
    {
                clientAddress = ClientAddress.findByPK(clientAddressPK);
            }
        }

//        if (addressOverrideInd != null)
//        {
//            setupAddressPageFields(appReqBlock, clientAddress, addressTypeCT);
//        }

        return clientAddress;
    }

    private void setupAddressPageFields(AppReqBlock appReqBlock, ClientAddress clientAddress,String addressTypeCT)
    {
        String state = appReqBlock.getReqParm("state");
        if (state != null && state.equalsIgnoreCase("Please Select"))
        {
            state = null;
        }

        String country = appReqBlock.getReqParm("country");
        if (country != null && country.equalsIgnoreCase("Please Select"))
        {
            country = null;
        }

        String zipCodePlacement = appReqBlock.getReqParm("zipCodePlacement");
        if (zipCodePlacement != null && zipCodePlacement.equalsIgnoreCase("Please Select"))
        {
            zipCodePlacement = null;
        }

        clientAddress.setAddressLine1(Util.initString(appReqBlock.getReqParm("addressLine1"), null));
        clientAddress.setAddressLine2(Util.initString(appReqBlock.getReqParm("addressLine2"), null));
        clientAddress.setAddressLine3(Util.initString(appReqBlock.getReqParm("addressLine3"), null));
        clientAddress.setAddressLine4(Util.initString(appReqBlock.getReqParm("addressLine4"), null));
        clientAddress.setCity(Util.initString(appReqBlock.getReqParm("city"), null));
        clientAddress.setCounty(Util.initString(appReqBlock.getReqParm("county"), null));
        clientAddress.setStateCT(state);
        clientAddress.setCountryCT(country);
        clientAddress.setZipCode(Util.initString(appReqBlock.getReqParm("zipCode"), null));
        clientAddress.setZipCodePlacementCT(zipCodePlacement);
        clientAddress.setAddressTypeCT(addressTypeCT);

    }

    private Preference populatePreference(AppReqBlock appReqBlock, Suspense refundSuspense, String disbursementSourceCT, ClientDetail clientDetail)
    {
        String overallOverrideInd = Util.initString(appReqBlock.getReqParm("overrideInd"), "off");
        String addressOverrideInd = appReqBlock.getReqParm("addressOverrideInd");
        String printAs = Util.initString(appReqBlock.getReqParm("printAs"), null);
        String printAs2 = Util.initString(appReqBlock.getReqParm("printAs2"), null);

        Preference preference = null;
        boolean disbursementSourceChange = false;

        if (overallOverrideInd.equalsIgnoreCase("on"))
        {
            preference = (Preference)appReqBlock.getHttpSession().getAttribute("preference");
            if (preference != null && disbursementSourceCT != null)
            {
                String disbSource = preference.getDisbursementSourceCT();
                if (disbSource == null && disbursementSourceCT != null)
                {
                    disbursementSourceChange = true;
                }
                else if (!disbSource.equalsIgnoreCase(disbursementSourceCT))
                {
                    disbursementSourceChange = true;
                }
            }
            else
            {
                if (disbursementSourceCT != null)
                {
                    disbursementSourceChange = true;
                }
            }
        }

        if ((addressOverrideInd != null && (printAs != null && printAs2 != null)) || disbursementSourceChange)
        {
            preference = (Preference)SessionHelper.newInstance(Preference.class, SessionHelper.EDITSOLUTIONS);
            preference.setPrintAs(printAs);
            preference.setPrintAs2(printAs2);
            preference.setDisbursementSourceCT(disbursementSourceCT);
            preference.setOverrideStatus("O");
            preference.setBankAccountNumber(Util.initString(appReqBlock.getReqParm("bankAccountNumber"), null));
            preference.setBankAccountTypeCT(Util.initString(appReqBlock.getReqParm("bankAccountType"), ""));
            preference.setBankRoutingNumber(Util.initString(appReqBlock.getReqParm("bankRoutingNumber"), null));
            preference.setBankName(Util.initString(appReqBlock.getReqParm("bankName"), null));
            preference.setBankAddressLine1(Util.initString(appReqBlock.getReqParm("bankAddressLine1"), null));
            preference.setBankAddressLine2(Util.initString(appReqBlock.getReqParm("bankAddressLine2"), null));
            preference.setBankCity(Util.initString(appReqBlock.getReqParm("bankCity"), null));
            preference.setBankStateCT(Util.initString(appReqBlock.getReqParm("bankState"), ""));
            preference.setBankZipCode(Util.initString(appReqBlock.getReqParm("bankZipCode"), null));

            clientDetail.addPreference(preference);
            preference.addSuspense(refundSuspense);
        }

        return preference;
    }

    /**
     * During suspense processing if the address type is changed after selecting a client, get the address for the type entered.
     * @param appReqBlock
     * @return
     */
    private String getAddressForType(AppReqBlock appReqBlock)
    {
        String selectedClientDetailPK = Util.initString(appReqBlock.getFormBean().getValue("selectedClientDetailPK"), null);
        appReqBlock.getHttpServletRequest().setAttribute("selectedClientDetailPK", selectedClientDetailPK);
        String suspensePK = appReqBlock.getReqParm("suspensePK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);
        Suspense suspense = Suspense.findByPK(new Long(suspensePK));
        appReqBlock.getHttpServletRequest().setAttribute("suspense", suspense);

        appReqBlock.getHttpServletRequest().setAttribute("refundAmount", appReqBlock.getReqParm("refundAmount"));
        appReqBlock.getHttpServletRequest().setAttribute("disbursementSource", appReqBlock.getReqParm("disbursementSource"));
        appReqBlock.getHttpServletRequest().setAttribute("addressType", appReqBlock.getReqParm("addressType"));
        appReqBlock.getHttpServletRequest().setAttribute("addressRequested", "true");
        appReqBlock.getHttpServletRequest().setAttribute("overrideInd", "checked");
        String addressTypeCT = appReqBlock.getReqParm("addressType");

        //save any bank info that may have been entered
        appReqBlock.setReqParm("bankAccountType", appReqBlock.getReqParm("bankAccountType"));
        appReqBlock.setReqParm("bankRoutingNumber", appReqBlock.getReqParm("bankRoutingNumber"));
        appReqBlock.setReqParm("bankName", appReqBlock.getReqParm("bankName"));
        appReqBlock.setReqParm("bankAddressLine1", appReqBlock.getReqParm("bankAddressLine1"));
        appReqBlock.setReqParm("bankAddressLine2", appReqBlock.getReqParm("bankAddressLine2"));
        appReqBlock.setReqParm("bankCity", appReqBlock.getReqParm("bankCity"));
        appReqBlock.setReqParm("bankState", appReqBlock.getReqParm("bankState"));
        appReqBlock.setReqParm("bankZipCode", appReqBlock.getReqParm("bankZipCode"));

        ClientDetail clientDetail = (ClientDetail) appReqBlock.getHttpSession().getAttribute("clientDetail");

        if (addressTypeCT != null)
        {
            ClientAddress clientAddress = ClientAddress.findByClientDetail_And_AddressTypeCT(clientDetail, addressTypeCT);
            if (clientAddress != null)
            {
                appReqBlock.getHttpSession().setAttribute("clientAddress", clientAddress);
            }
            else
            {
                appReqBlock.getHttpSession().removeAttribute("clientAddress");
            }
        }

        return REFUND_SUSPENSE_DIALOG;
    }

	/**
      * show pop up of the Loan Settlement Info
      * @param appReqBlock
      * @return
      * @throws Exception
      */
    private String showLoanSettlementInfo(AppReqBlock appReqBlock) throws Exception
    {
    	Hashtable loanSettlement = (Hashtable)appReqBlock.getHttpSession().getAttribute("loanSettlement");


        String errorMessage = null;

        if (loanSettlement == null || loanSettlement.isEmpty())
        {
        	errorMessage = "History record does not have any Loan Settlement Information";
            appReqBlock.getHttpServletRequest().setAttribute("ErrorMessage", errorMessage);
        }

        return LOAN_SETTLEMENT_DIALOG;
    }

    private String checkProductType(String optionId)
    {
        String productType = null;
        for (int i = 0; i < TRADITIONAL_PRODUCTS.length; i++)
        {
            if (optionId.equalsIgnoreCase(TRADITIONAL_PRODUCTS[i]))
            {
                productType = TRADITIONAL;
                break;
            }
        }

        if (productType == null)
        {
            if (optionId.equals(UNIVERSAL_LIFE))
            {
                productType = UNIVERSAL_LIFE;
            }
        }
        
        if (productType == null)
        {
        	if (Segment.OPTIONCODES_AH.contains(optionId.toUpperCase())) {
        		productType = AH;
        	}
        }

        if (productType == null)
        {
            for (int i = 0; i < NON_TRADITIONAL_LIFE_PRODUCTS.length; i++)
            {
                if (optionId.equalsIgnoreCase(NON_TRADITIONAL_LIFE_PRODUCTS[i]))
                {
                    productType = NON_TRAD_LIFE;
                    break;
                }
            }
        }

        if (productType == null)
        {
            for (int i = 0; i < DEFERRED_ANNUITY_PRODUCTS.length; i++)
            {
                if (optionId.equalsIgnoreCase(DEFERRED_ANNUITY_PRODUCTS[i]))
                {
                    productType = DEFERRED_ANNUITY;
                    break;
                }
            }
        }

        return productType;
    }

    private String getMainReturnPage(String productType)
    {
        if (productType == null)
        {
            return CONTRACT_MAIN;
        }
        else if (productType.equalsIgnoreCase(TRADITIONAL))
        {
            return CONTRACT_TRAD_MAIN;
        }
        else if (productType.equalsIgnoreCase(UNIVERSAL_LIFE))
        {
            return CONTRACT_UNIVERSAL_LIFE_MAIN;
        }
        else if (productType.equalsIgnoreCase(AH))
        {
        	return CONTRACT_AH_MAIN;
        }
        else if(productType.equalsIgnoreCase(DEFERRED_ANNUITY))
        {
            return CONTRACT_DEFERRED_ANNUITY_MAIN;
        }
        else if (productType.equalsIgnoreCase(NON_TRAD_LIFE))
        {
            return CONTRACT_LIFE_MAIN;
        }
        else
        {
            return CONTRACT_MAIN;
        }
    }

    private String[] getAuthorizedCompanies(AppReqBlock appReqBlock)
    {
        boolean viewAllSuspense = false;
        List companiesAllowed = new ArrayList();
        Long securityProductStructurePK = 0L;

        ProductStructure[] productStructures = appReqBlock.getUserSession().getProductStucturesForUser();

        if (productStructures != null && productStructures.length > 0)
        {
            securityProductStructurePK = ProductStructure.checkForSecurityStructure(productStructures);

            companiesAllowed = ProductStructure.checkForAuthorizedCompanies(productStructures);
        }

        if (securityProductStructurePK > 0)
        {
            UserSession userSession = appReqBlock.getUserSession();
            Operator operator = Operator.findByOperatorName(userSession.getUsername());

            if (userSession.userLoggedIn())
        {
                viewAllSuspense = operator.checkViewAllAuthorization(securityProductStructurePK, "Suspense");
        }
        else
        {
                viewAllSuspense = true;
            }
        }

        String[] companies = null;

        if (viewAllSuspense)
        {
            companies = Company.find_All_CompanyNamesForProductType();
        }
        else
        {
            companies = (String[]) companiesAllowed.toArray(new String[companiesAllowed.size()]);
        }

        return companies;
    }

    private SearchResponseVO[] filterForAuthorization(AppReqBlock appReqBlock, SearchResponseVO[] searchResponseVOs)
    {
        boolean viewAllClients = false;

        ProductStructure[] productStructures = appReqBlock.getUserSession().getProductStucturesForUser();

        if (productStructures == null || productStructures.length == 0)
        {
            return null;
        }

        // we will filter the results by productStructures allowed
        // Make a Set by business contract name for quick checks
        Long securityProductStructurePK = ProductStructure.checkForSecurityStructure(productStructures);

        Set productStructuresAllowedSet = ProductStructure.checkForAuthorizedStructures(productStructures);

        if (securityProductStructurePK > 0L)
        {
            UserSession userSession = appReqBlock.getUserSession();
            Operator operator = Operator.findByOperatorName(appReqBlock.getUserSession().getUsername());

            if (userSession.userLoggedIn())
        {
                viewAllClients = operator.checkViewAllAuthorization(securityProductStructurePK, "Clients");
        }
        else
        {
                viewAllClients = true;
            }
        }

        List filteredClientList = new ArrayList();
        List filteredContractList = new ArrayList();

        for (int i = 0; i < searchResponseVOs.length; i++)
        {
            filteredContractList.clear();
            SearchResponseVO searchResponseVO = searchResponseVOs[i];

            if (searchResponseVO.getSearchResponseContractInfoCount() > 0)
            {
                SearchResponseContractInfo[] searchRespContractInfo = searchResponseVO.getSearchResponseContractInfo();
                for (int j = 0; j < searchRespContractInfo.length; j++)
                {
                    SearchResponseContractInfo contractInfo = searchRespContractInfo[j];

                    String businessContractName = contractInfo.getBusinessContractName();

                    if (productStructuresAllowedSet.contains(businessContractName))
                    {
                        filteredContractList.add(contractInfo);
                    }
                }

                searchResponseVO.removeAllSearchResponseContractInfo();

                if (filteredContractList.size() > 0)
                {
                    searchRespContractInfo = (SearchResponseContractInfo[]) filteredContractList.toArray(new SearchResponseContractInfo[filteredContractList.size()]);
                    searchResponseVO.setSearchResponseContractInfo(searchRespContractInfo);
                    filteredClientList.add(searchResponseVO);
                }
                else if (viewAllClients)
        {
                    filteredClientList.add(searchResponseVO);
                }
        }
        else
        {
                if (viewAllClients)
                {
                    filteredClientList.add(searchResponseVO);
                    continue;
                }
            }
        }

        if (filteredClientList.size() == 0)
        {
            return null;
        }

        return (SearchResponseVO[]) filteredClientList.toArray(new SearchResponseVO[filteredClientList.size()]);
    }

    private ClientDetailVO[] getClientDetailsAfterSearch(SearchResponseVO[] searchResponseVOs) throws Exception
    {
        client.business.Lookup clientLookup = new client.component.LookupComponent();

        List clientDetails = new ArrayList();

        List voInclusionList = new ArrayList();
        voInclusionList.add(ClientAddressVO.class);

        for (int i = 0; i < searchResponseVOs.length; i++)
        {
            long clientDetailFK = searchResponseVOs[i].getClientDetailFK();

            ClientDetailVO clientDetailVO = clientLookup.composeClientDetailVO(clientDetailFK, voInclusionList);

            clientDetails.add(clientDetailVO);
        }

        return (ClientDetailVO[]) clientDetails.toArray(new ClientDetailVO[clientDetails.size()]);
        }

    public String showLoanInfoForTrad(AppReqBlock appReqBlock)
        {
        PageBean formBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");

        String segmentPK = formBean.getValue("segmentPK");

        new LoanSummaryTableModel(new Long(segmentPK), appReqBlock);

        return CONTRACT_LOAN_TRAD;
        }

    public String showLoanDetailForTrad(AppReqBlock appReqBlock)
        {
        String key = appReqBlock.getReqParm("selectedRowIds_LoanSummaryTableModel");

        PageBean formBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");

        String segmentPK = formBean.getValue("segmentPK");

        new LoanSummaryTableModel(new Long(segmentPK), appReqBlock);

        Bucket bucket = Bucket.findByPK(new Long(key));
        appReqBlock.getHttpServletRequest().setAttribute("selectedLoanDetail", bucket);

        return CONTRACT_LOAN_TRAD;
        }

    /**
     * Finds the departmentLocations for a Group ContractGroup with the input contractGroupNumber.  Sends them
     * back to the changeToListBillDialog.
     *
     * @param appReqBlock
     * @return
     */
    public String findDepartmentLocations(AppReqBlock appReqBlock)
    {
        DepartmentLocation[] departmentLocations = null;

        FormBean formBean = appReqBlock.getFormBean();

        String contractGroupNumber = formBean.getValue("contractGroupNumber");

        ContractGroup groupContractGroup = ContractGroup.findBy_ContractGroupNumber_ContractGroupTypeCT(contractGroupNumber, ContractGroup.CONTRACTGROUPTYPECT_GROUP);

        if (groupContractGroup == null)
        {
            appReqBlock.getHttpServletRequest().setAttribute("responseMessage", "Group Number " + contractGroupNumber + " does not exist.");
        }
        else
        {
            departmentLocations = DepartmentLocation.findBy_ContractGroupNumber(contractGroupNumber);
        }

        appReqBlock.getHttpSession().setAttribute("DepartmentLocations", departmentLocations);

        return CHANGE_TO_LIST_BILL_DIALOG;
    }

    /**
     * Gets the proper ContractSetupVO depending on whether it is a new object or an existing one in persistence.
     *
     * @param contractSetupPK
     *
     * @return  ContractSetupVO from persistence or newly instantiated one depending on the contractSetupPK
     */
    private ContractSetupVO getContractSetupVO(String contractSetupPK)
    {
        ContractSetupVO contractSetupVO = null;

        if (contractSetupPK.equals("0") || contractSetupPK.equals(""))
        {
            contractSetupVO = new ContractSetupVO();
        }
        else
        {
            contractSetupVO = new ContractSetupDAO().findByContractSetupPK(new Long(contractSetupPK).longValue())[0];
        }

        return contractSetupVO;
        }

    /**
     * Gets the proper GroupSetupVO depending on whether it is a new object or an existing one in persistence.
     *
     * @param groupSetupPK
     *
     * @return  GroupSetupVO from persistence or newly instantiated one depending on the groupSetupPK
     */
    private GroupSetupVO getGroupSetupVO(String groupSetupPK)
    {
        GroupSetupVO groupSetupVO = null;

        if (groupSetupPK.equals("0") || groupSetupPK.equals(""))
        {
            groupSetupVO = new GroupSetupVO();
        }
        else
        {
            groupSetupVO = new GroupSetupDAO().findByGroupSetupPK(new Long(groupSetupPK).longValue());
        }

        return groupSetupVO;
        }

    private String showNFO_DBOChangeDialog(AppReqBlock appReqBlock) throws Exception
        {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);

        return NFO_DBO_CHANGE_DIALOG;
        }

    private String saveNFO_DBOChangeDialog(AppReqBlock appReqBlock)
    {
        new InforceUseCaseComponent().updateNFODBOChange();

        FormBean formBean = appReqBlock.getFormBean();
        String deathBenefitOption = Util.initString(formBean.getValue("deathBeneOption"), "");
        if (deathBenefitOption.equalsIgnoreCase("Please Select"))
        {
            deathBenefitOption = "";
        }

        String nonForfeitureOption = Util.initString(formBean.getValue("nonForfeitureOption"),  "");
        if (nonForfeitureOption.equalsIgnoreCase("Please Select"))
        {
            nonForfeitureOption = "";
        }
        PageBean contractMainPage = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");

        contractMainPage.putValue("deathBeneOption", deathBenefitOption);
        contractMainPage.putValue("nonForfeitureOption", nonForfeitureOption);

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("formBean", contractMainPage);

        return CONTRACT_TRAD_MAIN;
        }

    private String showClassGenderRatingsDialog(AppReqBlock appReqBlock) throws Exception
        {
        new InforceUseCaseComponent().accessClassGenderRatings();

        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
//        PageBean formBean = appReqBlock.getFormBean();
        PageBean clientFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("clientFormBean");

        String currentPage = stateBean.getValue("currentPage");

        savePreviousPageFormBean(appReqBlock, currentPage);
        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("clientFormBean", clientFormBean);

        return CLASS_GENDER_RATINGS_DIALOG;
        }

    private String saveClassGenderRatingsDialog(AppReqBlock appReqBlock)
    {
        new InforceUseCaseComponent().updateClassGenderRatings();

        PageBean formBean = appReqBlock.getFormBean();
        PageBean clientFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("clientFormBean");
        SessionBean clients = appReqBlock.getSessionBean("contractClients");

        String originalClassCT = clientFormBean.getValue("originalClassCT");
        String pendingClassChangeIndStatus = clientFormBean.getValue("pendingClassChangeIndStatus");
        String taxId = clientFormBean.getValue("taxId");
        String optionId = clientFormBean.getValue("optionId");
        String relationship = clientFormBean.getValue("relationshipInd");
        String clientRoleFK = clientFormBean.getValue("clientRoleFK");
        String contractClientPK = clientFormBean.getValue("contractClientPK");
        String segmentFK = clientFormBean.getValue("segmentFK");
        String riderNumber = Util.initString(clientFormBean.getValue("riderNumber"), "0");
        String clientIdKey = taxId + riderNumber + optionId + relationship + clientRoleFK + contractClientPK;
        String terminationDate = Util.initString(formBean.getValue("terminationDate"), null);

        PageBean clientPageBean = clients.getPageBean(clientIdKey);

        String classChangeEffectiveDate = formBean.getValue("classChangeEffectiveDate");
        String classType = Util.initString(formBean.getValue("classType"), "");
        Segment segment = Segment.findByPK(Long.parseLong(segmentFK));
        if (!originalClassCT.equals(classType) && segment.getOptionCodeCT().equals(("UL"))) {
            Change change = new Change();
            change.setBeforeValue(originalClassCT);
            change.setAfterValue(classType);
            ComplexChange complexChange = new ComplexChange();
            ContractClient contractClient = ContractClient.findByPK(Long.parseLong(contractClientPK));
            complexChange.createComplexChangeForRating(contractClient, "ClassCT", change, segment, 
            		classChangeEffectiveDate,  appReqBlock.getUserSession().getUsername());
            
        	
        }
        if (classType.equalsIgnoreCase("please select"))
        {
            classType = "";
        }

        String tableRating = Util.initString(formBean.getValue("tableRating"), "");
        if (tableRating.equalsIgnoreCase("please select"))
        {
            tableRating = "";
        }

        String ratedGender = Util.initString(formBean.getValue("ratedGender"), "");
        if (ratedGender.equalsIgnoreCase("please select"))
        {
            ratedGender = "";
        }

        String underwritingClass =  Util.initString(formBean.getValue("underwritingClass"), "");
        if (underwritingClass.equalsIgnoreCase("please select"))
        {
            underwritingClass = "";
        }

        clientPageBean.putValue("terminationDate", terminationDate);
        clientPageBean.putValue("clientRoleFK", clientRoleFK);
        clientPageBean.putValue("classType", classType);
        clientPageBean.putValue("tableRating", tableRating);
        clientPageBean.putValue("ratedGender", ratedGender);
        clientPageBean.putValue("underwritingClass", underwritingClass);
        clientPageBean.putValue("flatExtra", Util.initString(formBean.getValue("flatExtra"), ""));
        clientPageBean.putValue("flatExtraAge", Util.initString(formBean.getValue("flatExtraAge"), ""));
        clientPageBean.putValue("flatExtraDur", Util.initString(formBean.getValue("flatExtraDur"), ""));
        clientPageBean.putValue("percentExtra", Util.initString(formBean.getValue("percentExtra"), ""));
        clientPageBean.putValue("percentExtraAge", Util.initString(formBean.getValue("percentExtraAge"), ""));
        clientPageBean.putValue("percentExtraDur", Util.initString(formBean.getValue("percentExtraDur"), ""));

        clients.putPageBean(clientIdKey, clientPageBean);
        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("clientFormBean", clientPageBean);

        return CONTRACT_INSURED;
        }

    public String createTransactionFromQuote(AppReqBlock appReqBlock) throws Exception
    {    
        PageBean formBean = appReqBlock.getFormBean();
        QuoteVO quoteVO = (QuoteVO)appReqBlock.getHttpSession().getAttribute("quoteVO");
        String operator = appReqBlock.getUserSession().getUsername();

        String quoteDate = formBean.getValue("quoteDate");
        PageBean contractMain = appReqBlock.getSessionBean("contractBase").getPageBean("contractBase");
        String segmentPK = contractMain.getValue("segmentPK");
        String freeLookEndDate =  DateTimeUtil.formatMMDDYYYYToYYYYMMDD(contractMain.getValue("freeLookEndDate"));
        String quoteTypeCT = Util.initString(appReqBlock.getReqParm("quoteType"), null);
        appReqBlock.putInRequestScope("quoteType", quoteTypeCT);
        appReqBlock.getHttpServletRequest().setAttribute("quoteDate", quoteDate);

        String notTakenOverrideInd = Util.initString(appReqBlock.getReqParm("notTakenOverrideInd"), "N");
        
//        EDITBigDecimal checkAmount = new EDITBigDecimal(quoteVO.getCheckAmount());
        
        EDITDate quoteDateED = DateTimeUtil.getEDITDateFromMMDDYYYY(quoteDate);

        boolean errorFound = false;
        if (freeLookEndDate != null)
        {
            EDITDate freeLookEndDateED = new EDITDate(freeLookEndDate);
            errorFound = false;

            if (quoteTypeCT.equalsIgnoreCase(NOT_TAKEN_TYPE))
            {
                if (notTakenOverrideInd.equals("N") && quoteDateED.after(freeLookEndDateED))
                {
                    appReqBlock.getHttpServletRequest().setAttribute("inforceQuoteMessage", "Quote Date Cannot Be Greater Than FreeLookEndDate ");
                    errorFound = true;
                }
            }
            else if (quoteTypeCT.equalsIgnoreCase(FULL_SURRENDER_TYPE))
            {
                if (quoteDateED.before(freeLookEndDateED))
                {
                    appReqBlock.getHttpServletRequest().setAttribute("inforceQuoteMessage", "Quote Date Cannot Be Less Than FreeLookEndDate ");
                    errorFound = true;
                }
            }
        }

        if(foundPendingPremiumTrx(new Long(segmentPK)))
        {
            appReqBlock.getHttpServletRequest().setAttribute("inforceQuoteMessage", "Outstanding Premium? Transaction Value could be Different");
            errorFound = true;
        }

        if (!errorFound)
        {
            event.business.Event eventComponent = new event.component.EventComponent();
            String transactionType = null;
            if (quoteTypeCT.equalsIgnoreCase(NOT_TAKEN_TYPE))
            {
                transactionType = EDITTrx.TRANSACTIONTYPECT_NOTTAKEN;
            }
            else
        {
                transactionType = EDITTrx.TRANSACTIONTYPECT_FULLSURRENDER;
            }
            eventComponent.buildTransactionsFromQuote(transactionType, quoteVO, new Long(segmentPK), quoteDateED, operator, notTakenOverrideInd);
            appReqBlock.getHttpServletRequest().setAttribute("inforceQuoteMessage", "Transaction Saved Successfully");
        }
        
        return TRAD_INFORCE_QUOTE_DIALOG;
    	}

    public String showNotTakenOverrideDialog(AppReqBlock appReqBlock) 
        {
        new InforceUseCaseComponent().accessInforceQuoteNotTakenOverrides();
    
        String quoteDate = appReqBlock.getReqParm("quoteDate");
        String quoteType = Util.initString(appReqBlock.getReqParm("quoteType"), null);
        
        appReqBlock.getHttpServletRequest().setAttribute("quoteDate", quoteDate);
        appReqBlock.getHttpServletRequest().setAttribute("quoteType", quoteType);

        return NOT_TAKEN_OVERRIDE_DIALOG;
        }

    public String saveNotTakenOverrideIndicator(AppReqBlock appReqBlock) 
        {
        String quoteDate = appReqBlock.getReqParm("quoteDate");
        String quoteType = Util.initString(appReqBlock.getReqParm("quoteType"), null);
        
        String notTakenOverrideInd = Util.initString(appReqBlock.getReqParm("notTakenOverrideInd"), "N");
        
        appReqBlock.getHttpServletRequest().setAttribute("quoteDate", quoteDate);
        appReqBlock.getHttpServletRequest().setAttribute("quoteType", quoteType);
        
        appReqBlock.getHttpServletRequest().setAttribute("notTakenOverrideInd", notTakenOverrideInd);
        
        return TRAD_INFORCE_QUOTE_DIALOG;
        }

    public boolean foundPendingPremiumTrx(Long segmentPK)
    {
        boolean foundPendingPremium = false;
        EDITTrx[] editTrxes = EDITTrx.findBy_TransactionType_SegmentPK_PendingStatus("PY", segmentPK, "P");

        if (editTrxes != null)
        {
            foundPendingPremium = true;
        }

        return foundPendingPremium;
        }

    private String showFilterSuspenseDialog(AppReqBlock appReqBlock)
        {
        new FilterSuspenseTableModel(appReqBlock);

        return FILTER_SUSPENSE_DIALOG;
        }

    private String showSuspenseTransferDialog(AppReqBlock appReqBlock) throws Exception
    {
        new EventUseCaseComponent().transferSuspense();

        String suspensePK = (String)appReqBlock.getReqParm("selectedSuspensePK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);
        
        Suspense suspense = Suspense.findByPK(Long.parseLong(suspensePK));

        CashBatchContract cashBatchContract = suspense.getCashBatchContract();

        String responseMessage = null;
        
        if (suspense.getPendingSuspenseAmount().isGT(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
        {
        	responseMessage = "Suspense Cannot Be Transferred - Transaction Pending";
        }
        else if (suspense.getSuspenseAmount().isEQ(EDITBigDecimal.EDIT_DECIMAL_ZILCH_STR))
        {
            responseMessage = "Suspense Cannot Be Transferred - Suspense Amount Is Zero";
        }
        else if (cashBatchContract != null && cashBatchContract.getReleaseIndicator().equalsIgnoreCase(CashBatchContract.RELEASE_INDICATOR_PENDING))
        {
            responseMessage = "Suspense Cannot Be Transferred - Cash Batch Has Not Been Released Yet";
        }
        
        if (responseMessage != null && !responseMessage.equals("")) {
        	appReqBlock.getHttpServletRequest().setAttribute("responseMessage", responseMessage);
            return showSuspense(appReqBlock);
        }
        
        new SuspenseTransferTableModel(appReqBlock);

        return SUSPENSE_TRANSFER_DIALOG;
    }

    private String suspenseTransferSaveToSummary(AppReqBlock appReqBlock) throws Exception
    {
        List suspenseTransferRows = (ArrayList)appReqBlock.getHttpSession().getAttribute("suspenseTransferRows");

        String contractNumber = Util.initString((String)appReqBlock.getReqParm("contractNumber"), "");
        String amount = Util.initString((String)appReqBlock.getReqParm("amount"), "");
        String selectedRowId = (String)appReqBlock.getReqParm("selectedTransferPK");
        String reasonCode = Util.initString(appReqBlock.getReqParm("reasonCode"), null);
        appReqBlock.getHttpServletRequest().setAttribute("reasonCode", reasonCode);

        int rowId = 0;
        boolean matchFound = false;

        if (suspenseTransferRows != null)
        {
            for (int i = 0; i < suspenseTransferRows.size(); i++)
            {
                String row = (String)suspenseTransferRows.get(i);
                StringTokenizer tokens = new StringTokenizer(row, "_");

                String arrayRowId = tokens.nextToken();
                if (selectedRowId.equals(arrayRowId))
                {
                    //save previous row
                    suspenseTransferRows.remove(row);
                    suspenseTransferRows.add((rowId + "") + "_" + contractNumber + "_" + amount);
                    matchFound = true;
                    break;
                }
            }
        }
        else
        {
            suspenseTransferRows= new ArrayList();
        }

        if (!matchFound)
        {
            rowId = suspenseTransferRows.size() + 1;
            if (!contractNumber.equals("") || !amount.equals(""))
        {
                suspenseTransferRows.add((rowId + "") + "_" + contractNumber + "_" + amount);
            }
        }

        appReqBlock.getHttpSession().setAttribute("suspenseTransferRows", suspenseTransferRows);
        String suspensePK = (String)appReqBlock.getReqParm("selectedSuspensePK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedTransferPK", selectedRowId);

        return showSuspenseTransferDialog(appReqBlock);
    }

    private String showSuspenseTransferDetail(AppReqBlock appReqBlock) throws Exception
    {
        String selectedTransferPK = new SuspenseTransferTableModel(appReqBlock).getSelectedRowId();
        appReqBlock.getHttpServletRequest().setAttribute("selectedTransferPK", selectedTransferPK);

        String reasonCode = Util.initString(appReqBlock.getReqParm("reasonCode"), null);
        appReqBlock.getHttpServletRequest().setAttribute("reasonCode", reasonCode);

        List suspenseTransferRows = (ArrayList)appReqBlock.getHttpSession().getAttribute("suspenseTransferRows");
        for (int i = 0; i < suspenseTransferRows.size(); i++)
        {
            StringTokenizer tokens = new StringTokenizer((String)suspenseTransferRows.get(i), "_");

            String rowId = tokens.nextToken();
            if (rowId.equals(selectedTransferPK))
        {
                String contractNumber = tokens.nextToken();
                String transferAmount = tokens.nextToken();

                appReqBlock.getHttpServletRequest().setAttribute("contractNumber", contractNumber);
                appReqBlock.getHttpServletRequest().setAttribute("amount", transferAmount);
            }
        }

        return showSuspenseTransferDialog(appReqBlock);
    }

    private String suspenseTransfer(AppReqBlock appReqBlock) throws Exception
    {
        String suspensePK = (String)appReqBlock.getReqParm("selectedSuspensePK");
        appReqBlock.getHttpServletRequest().setAttribute("selectedSuspensePK", suspensePK);
        Suspense suspense = Suspense.findByPK(new Long(suspensePK));

        String reasonCode = Util.initString(appReqBlock.getReqParm("reasonCode"), null);
        String operator = Util.initString((String)appReqBlock.getHttpSession().getAttribute("filterOperator"), null);
        if (operator == null)
        {
            operator = suspense.getOperator();
        }

        List suspenseTransferRows = (ArrayList)appReqBlock.getHttpSession().getAttribute("suspenseTransferRows");

        String errorMessage = null;
        EDITBigDecimal totalTransfer = new EDITBigDecimal("0");

        for (int i = 0; i < suspenseTransferRows.size(); i++)
        {
            StringTokenizer tokens = new StringTokenizer((String)suspenseTransferRows.get(i), "_");

            //The following unused fields are needed to get to the last token do not comment out
            //DO NOT COMMENT OUT
            tokens.nextToken();
            //DO NOT COMMENT OUT

            String contractNumber = tokens.nextToken();
            String transferAmount = tokens.nextToken();
            EDITBigDecimal amount = new EDITBigDecimal(transferAmount);
            totalTransfer = totalTransfer.addEditBigDecimal(amount);
            Segment segment = Segment.findByContractNumber(contractNumber);
            if (segment == null)
            {
                errorMessage = "Contract Number is not valid";
                appReqBlock.getHttpServletRequest().setAttribute("suspenseMessage", errorMessage);
                break;
            }
        }

        if (errorMessage == null)
        {
            if (totalTransfer.equals(suspense.getSuspenseAmount()))
            {

                if (suspensePK != null)
                {
                    Event eventComponent = new EventComponent();

                    String responseMessage = eventComponent.processTransfer(suspenseTransferRows, suspense, reasonCode, operator);
                    appReqBlock.getHttpServletRequest().setAttribute("suspenseMessage", responseMessage);
                    appReqBlock.getHttpSession().removeAttribute("suspenseTransferRows");
                }
            }
            else
            {
                errorMessage = "Total Transfer Amount Must Equal the Suspense Amount";
                appReqBlock.getHttpServletRequest().setAttribute("suspenseMessage", errorMessage);
            }
        }

        return showSuspenseTransferDialog(appReqBlock);
    }

    private String suspenseTransferDelete(AppReqBlock appReqBlock) throws Exception
    {
        String selectedTransferPK = new SuspenseTransferTableModel(appReqBlock).getSelectedRowId();

        String reasonCode = Util.initString(appReqBlock.getReqParm("reasonCode"), null);
        appReqBlock.getHttpServletRequest().setAttribute("reasonCode", reasonCode);

        List newTransferEntries = new ArrayList();

        List suspenseTransferRows = (ArrayList)appReqBlock.getHttpSession().getAttribute("suspenseTransferRows");
        if (selectedTransferPK != null)
        {
            for (int i = 0; i < suspenseTransferRows.size(); i++)
            {
                StringTokenizer tokens = new StringTokenizer((String)suspenseTransferRows.get(i), "_");

                String rowId = tokens.nextToken();
                if (!rowId.equals(selectedTransferPK))
                {
                    newTransferEntries.add((String)suspenseTransferRows.get(i));
                }
            }
        }

        appReqBlock.getHttpSession().setAttribute("suspenseTransferRows", newTransferEntries);

        return showSuspenseTransferDialog(appReqBlock);
    }

    private String closeSuspenseDialog(AppReqBlock appReqBlock)  throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("filterSet");
        appReqBlock.getHttpSession().removeAttribute("fromDate");
        appReqBlock.getHttpSession().removeAttribute("toDate");
        appReqBlock.getHttpSession().removeAttribute("filterPeriod");
        appReqBlock.getHttpSession().removeAttribute("filterOperator");
        appReqBlock.getHttpSession().removeAttribute("filterUserNumber");
        appReqBlock.getHttpSession().removeAttribute("filterReasonCode");
        appReqBlock.getHttpSession().removeAttribute("suspenseTransferRows");

        new FilterSuspenseTableModel(appReqBlock);

        return CONTRACT_SUSPENSE;
    }

    private String closeSuspenseTransferDialog(AppReqBlock appReqBlock) throws Exception
    {
        appReqBlock.getHttpSession().removeAttribute("suspenseTransferRows");

        return showSuspense(appReqBlock);
    }

    private String showSuspenseHistoryDialog(AppReqBlock appReqBlock)
    {
        new SuspenseHistoryTableModel(appReqBlock);

        return SUSPENSE_HISTORY_DIALOG;
	}

    protected String showPreferences(AppReqBlock appReqBlock) throws Exception
    {
        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        String currentPage = stateBean.getValue("currentPage");
        String returnPage = currentPage;

        savePreviousPageFormBean(appReqBlock, currentPage);

        SessionBean preferenceSessionBean = new SessionBean();
        String selectedClientRoleFK = appReqBlock.getFormBean().getValue("selectedClientRoleFK");
        ClientRole clientRole = ClientRole.findByPK(new Long(selectedClientRoleFK));
        ClientDetail clientDetail = clientRole.getClientDetail();
        Set<Preference> preferences = clientDetail.getPreferences();
        Iterator it = preferences.iterator();
        while (it.hasNext())
        {
            Preference preference = (Preference) it.next();

            PageBean preferencePageBean = new PageBean();

            preferencePageBean.putValue("clientDetailFK", preference.getClientDetailFK().toString());

            preferencePageBean.putValue("preferencePK", preference.getPreferencePK().toString());
            preferencePageBean.putValue("printAs", Util.initString(preference.getPrintAs(), ""));
            preferencePageBean.putValue("printAs2", Util.initString(preference.getPrintAs2(), ""));
            preferencePageBean.putValue("disbursementSource", Util.initString(preference.getDisbursementSourceCT(), ""));
            preferencePageBean.putValue("paymentMode", Util.initString(preference.getPaymentModeCT(), ""));
            preferencePageBean.putValue("minimumCheck", preference.getMinimumCheck().toString());
            preferencePageBean.putValue("bankAccountNumber", Util.initString(preference.getBankAccountNumber(), ""));
            preferencePageBean.putValue("bankRoutingNumber", Util.initString(preference.getBankRoutingNumber(), ""));
            preferencePageBean.putValue("bankAccountType", Util.initString(preference.getBankAccountTypeCT(), ""));
            preferencePageBean.putValue("bankName", Util.initString(preference.getBankName(), ""));
            preferencePageBean.putValue("bankAddressLine1", Util.initString(preference.getBankAddressLine1(), ""));
            preferencePageBean.putValue("bankAddressLine2", Util.initString(preference.getBankAddressLine2(), ""));
            preferencePageBean.putValue("bankCity", Util.initString(preference.getBankCity(), ""));
            preferencePageBean.putValue("bankState", Util.initString(preference.getBankStateCT(), ""));
            preferencePageBean.putValue("bankZipCode", Util.initString(preference.getBankZipCode(), ""));
            preferencePageBean.putValue("overrideStatus", Util.initString(preference.getOverrideStatus(), ""));
            preferencePageBean.putValue("preferenceType", Util.initString(preference.getPreferenceTypeCT(), ""));

            preferenceSessionBean.putPageBean(preference.getPreferencePK() + "", preferencePageBean);
        }

        appReqBlock.getHttpSession().setAttribute("preferenceSessionBean", preferenceSessionBean);
        appReqBlock.getHttpServletRequest().setAttribute("selectedClientRoleFK", selectedClientRoleFK);
        appReqBlock.getHttpServletRequest().setAttribute("returnPage", returnPage);

        return PREFERENCES_DIALOG;
    }

    private String showSelectedPreference(AppReqBlock appReqBlock)
    {
        PageBean formBean = appReqBlock.getFormBean();
        String preferencePK = formBean.getValue("preferencePK");
        String selectedClientRoleFK = formBean.getValue("selectedClientRoleFK");
        String returnPage = formBean.getValue("returnPage");

        PageBean pageBean = appReqBlock.getSessionBean("preferenceSessionBean").getPageBean(preferencePK);

        appReqBlock.getHttpServletRequest().setAttribute("pageBean", pageBean);
        appReqBlock.getHttpServletRequest().setAttribute("selectedClientRoleFK", selectedClientRoleFK);
        appReqBlock.getHttpServletRequest().setAttribute("returnPage", returnPage);

        return PREFERENCES_DIALOG;
    }

    private String clearPreferenceForAdd(AppReqBlock appReqBlock)
    {
        PageBean formBean = appReqBlock.getFormBean();

        String selectedClientRoleFK = formBean.getValue("selectedClientRoleFK");
        String returnPage = formBean.getValue("returnPage");

        appReqBlock.getHttpServletRequest().setAttribute("selectedClientRoleFK", selectedClientRoleFK);
        appReqBlock.getHttpServletRequest().setAttribute("returnPage", returnPage);

        return PREFERENCES_DIALOG;
    }

    private String showContractAgentInfo(AppReqBlock appReqBlock)
    {
        String preferencePK = appReqBlock.getFormBean().getValue("preferencePK");
        String selectedClientRoleFK = appReqBlock.getFormBean().getValue("selectedClientRoleFK");
        String returnPage = appReqBlock.getFormBean().getValue("returnPage");

        appReqBlock.getHttpServletRequest().setAttribute("preferencePK", preferencePK);
        appReqBlock.getHttpServletRequest().setAttribute("selectedClientRoleFK", selectedClientRoleFK);
        appReqBlock.getHttpServletRequest().setAttribute("returnPage", returnPage);

        return CONTRACT_AGENT_INFO_DIALOG;
    }

    private String savePreference(AppReqBlock appReqBlock)
    {
        PageBean formBean = appReqBlock.getFormBean();

        String selectedClientRoleFK = formBean.getValue("selectedClientRoleFK");
        String returnPage = formBean.getValue("returnPage");
        appReqBlock.getHttpServletRequest().setAttribute("selectedClientRoleFK", selectedClientRoleFK);
        appReqBlock.getHttpServletRequest().setAttribute("returnPage", returnPage);

        new ClientUseCaseComponent().updatePreference();

        boolean primaryPreferenceFound = false;

        String overrideStatus = formBean.getValue("overrideStatus");
        String preferenceType = Util.initString(formBean.getValue("preferenceType"), "");

        SessionBean preferenceSessionBean = appReqBlock.getSessionBean("preferenceSessionBean");
        Map preferencePageBeans = preferenceSessionBean.getPageBeans();
        Set preferenceKeys = preferencePageBeans.keySet();
        if (overrideStatus.equalsIgnoreCase("P"))
        {
            Iterator it = preferenceKeys.iterator();
            while (it.hasNext())
            {
                String pageBeanPK = (String) it.next();
                PageBean pageBean = (PageBean) preferencePageBeans.get(pageBeanPK);
                if (pageBean.getValue("overrideStatus").equalsIgnoreCase("P"))
                {
                    String preferenceTYPEPB = Util.initString(pageBean.getValue("preferenceType"), "");
                    if (preferenceTYPEPB.equalsIgnoreCase(preferenceType))
                    {
                        primaryPreferenceFound = true;
                        break;
                    }
                }
            }
        }

        if (primaryPreferenceFound)
        {
            appReqBlock.getHttpServletRequest().setAttribute("preferenceMessage", "Default Information Already Exists");
        }

        if (!primaryPreferenceFound)
        {
            try
            {
                ClientRole clientRole = ClientRole.findByPK(new Long(selectedClientRoleFK));
                Preference preference = Preference.createNewPreference(formBean, clientRole);
                SessionHelper.clearSessions();
                
                appReqBlock.getSessionBean("preferenceSessionBean").putPageBean(preference.getPreferencePK().toString(), formBean);
                appReqBlock.getHttpServletRequest().setAttribute("preferenceMessage", "Preference Added");
            }
            catch (Exception e)
            {
                System.out.println(e);

                e.printStackTrace();

                appReqBlock.getHttpServletRequest().setAttribute("preferenceMessage", "Preference Add Failed");
            }
        }

        return PREFERENCES_DIALOG;
    }

    protected String selectPreferenceForClient(AppReqBlock appReqBlock)
    {
        PageBean formBean = appReqBlock.getFormBean();
        String selectedClientRoleFK = formBean.getValue("selectedClientRoleFK");
        String preferencePK = formBean.getValue("preferencePK");
        String returnPage = formBean.getValue("returnPage");

        try
        {
            Preference preference = Preference.findByPK(new Long(preferencePK));
            Preference.updateExistingPreference(preference, new Long(selectedClientRoleFK));
            appReqBlock.getHttpServletRequest().setAttribute("clientMessage", "Preference Updated");
        }
        catch(Exception e)
            {
            appReqBlock.getHttpServletRequest().setAttribute("clientMessage", "Preference Update Failed");
            }

        appReqBlock.getHttpSession().removeAttribute("preferenceSessionBean");
        appReqBlock.getHttpServletRequest().setAttribute("selectedClientRoleFK", selectedClientRoleFK);

        SessionBean stateBean = appReqBlock.getSessionBean("contractStateBean");
        stateBean.putValue("previousPage", stateBean.getValue("currentPage"));
        stateBean.putValue("currentPage", returnPage);

        return returnPage;
        }

    private String showPremiumDueHistoryDialog(AppReqBlock appReqBlock)
    {
        new PremiumDueHistoryTableModel(appReqBlock);

        return PREMIUM_DUE_HISTORY_DIALOG;
	}
    
    private String showFinancialHistoryDialog(AppReqBlock appReqBlock)
    {
        String filterDisplayUndo = (String) appReqBlock.getFormBean().getValue("filterDisplayUndo");
        appReqBlock.getHttpSession().setAttribute("filterDisplayUndo", filterDisplayUndo);

        String filterTransaction = (String) appReqBlock.getFormBean().getValue("filterTransaction");
        appReqBlock.getHttpSession().setAttribute("filterTransaction", filterTransaction);

        new FinancialHistoryTableModel(appReqBlock);

        return FINANCIAL_HISTORY_DIALOG;
	}
       
    private String showContractBillHistoryDialog(AppReqBlock appReqBlock)
    {
        new ContractBillHistoryTableModel(appReqBlock);

        return CONTRACT_BILLS_HISTORY;
    }

    private String showBillingChangeDialog(AppReqBlock appReqBlock)
    {
        new InforceUseCaseComponent().accessBillingChangeDialog();

        return BILLING_CHANGE_DIALOG;
    }

    /**
     * Updates the BillSchedule with the new values in the billingChangeDialog.  The BillSchedule will be saved on the
     * big save.
     * @param appReqBlock
     * @return
     */
    private String saveBillingChangeDialog(AppReqBlock appReqBlock) throws Exception
    {
        String transPeriodEndDate = DateTimeUtil.formatMMDDYYYYToYYYYMMDD(appReqBlock.getReqParm("transitionPeriodEndDate"));
        EDITDate transitionPeriodEndDate = new EDITDate(transPeriodEndDate);

        BillScheduleVO billScheduleVO = (BillScheduleVO) appReqBlock.getHttpSession().getAttribute("BillScheduleVO");

        billScheduleVO.setTransitionPeriodEndDate(transitionPeriodEndDate.getFormattedDate());

        appReqBlock.getHttpSession().setAttribute("BillScheduleVO", billScheduleVO);

        return loadContractBilling(appReqBlock);
    }

    private String showRiderCoverageSelectionDialog(AppReqBlock appReqBlock)
    {
        return RIDER_COVERAGE_SELECTION_DIALOG;
    }

    private String saveRiderCoverageSelection(AppReqBlock appReqBlock)
    {
        PageBean baseFormBean = appReqBlock.getSessionBean("contractMainSessionBean").getPageBean("formBean");
        String insuredRelationToEmp = Util.initString(appReqBlock.getSessionBean("contractMainSessionBean").getValue("insuredRelationToEmp"), null);

        String riderCoveragePK = Util.initString(appReqBlock.getReqParm("selectedCoverage"), "");
        CodeTableVO codeTableVO = CodeTableWrapper.getSingleton().getCodeTableEntry(Long.parseLong(riderCoveragePK));
        String optionCodeDesc   = codeTableVO.getCodeDesc();
        String optionCode       = codeTableVO.getCode();

        //Check the option code for display of increaseOption
        String batchContractSetupFK = Util.initString(baseFormBean.getValue("batchContractSetupFK"), "0");
        String increaseOptionStatus = getCaseProductUnderwriting(appReqBlock, batchContractSetupFK, optionCode, insuredRelationToEmp);

        baseFormBean.putValue("increaseOptionStatus", increaseOptionStatus);
        baseFormBean.putValue("selectedCoveragePK", riderCoveragePK);
        baseFormBean.putValue("riderOption", optionCodeDesc);
        baseFormBean.putValue("pageMode", "detail");

        appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("riderFormBean", new PageBean());

        //  Get the option code from the contract
        String contractOptionCode = baseFormBean.getValue("optionId");

        if (optionCode.equalsIgnoreCase(contractOptionCode))
        {
            String productType = checkProductType(optionCode);
            String mainReturnPage = getMainReturnPage(productType);

            return mainReturnPage;
        }
        else
        {
            //  The selected item is a rider, load the rider's formBean and display the rider page
            PageBean riderBean = appReqBlock.getSessionBean("contractRiders").getPageBean(optionCode);
            appReqBlock.getSessionBean("contractMainSessionBean").putPageBean("riderFormBean", riderBean);
            return CONTRACT_RIDERS;
        }

    }

    private String getCaseProductUnderwriting(AppReqBlock appReqBlock, String batchContractSetupFK, String optionCode, String insuredRelationToEmp)
    {
        String increaseOptionStatus = "";

        if (optionCode.equalsIgnoreCase(Segment.OPTIONCODECT_RIDER_GUARANTEED_INSURANCE_OPTION) ||
            optionCode.equalsIgnoreCase(Segment.OPTIONCODECT_RIDER_LEVEL_TERM_GUARANTEED_INSURANCE_OPTION))
        {
            increaseOptionStatus = "display";
            //get CaseProductUnderwriting
            if (!batchContractSetupFK.equals("0"))
            {
                BatchContractSetup batchContractSetup = BatchContractSetup.findByPK(Long.parseLong(batchContractSetupFK));
                CaseProductUnderwriting[] caseProductUnderwritings = CaseProductUnderwriting.findByEnrollmentFK_FilteredProductFK_Grouping_Field_RelationshipToEmployeeCT(batchContractSetup.getEnrollmentFK(),
                        batchContractSetup.getFilteredProductFK(), CaseProductUnderwriting.GROUPING_CASERIDERS, CaseProductUnderwriting.FIELD_GIOOPTDATES, insuredRelationToEmp);

                if (caseProductUnderwritings != null && caseProductUnderwritings.length > 0)
                {
                    appReqBlock.getHttpServletRequest().setAttribute("caseProductUnderwriting", caseProductUnderwritings);
                }
            }
        }

        return increaseOptionStatus;
    }

    private void getCaseUnderwritingForClient(AppReqBlock appReqBlock, String batchContractSetupFK)
    {
        if (!batchContractSetupFK.equals("0"))
        {
            BatchContractSetup batchContractSetup = BatchContractSetup.findByPK(Long.parseLong(batchContractSetupFK));
            CaseProductUnderwriting[] ratedGenders = CaseProductUnderwriting.findByEnrollmentFK_FilteredProductFK_Grouping_Field_RelationshipToEmployeeCT(batchContractSetup.getEnrollmentFK(),
                    batchContractSetup.getFilteredProductFK(), CaseProductUnderwriting.GROUPING_CASEOTHER, CaseProductUnderwriting.FIELD_RATEDGENDER, null);

            if (ratedGenders != null && ratedGenders.length > 0)
            {
                appReqBlock.getHttpServletRequest().setAttribute("ratedGenders", ratedGenders);
            }

            CaseProductUnderwriting[] underwritingClasses = CaseProductUnderwriting.findByEnrollmentFK_FilteredProductFK_Grouping_Field_RelationshipToEmployeeCT(batchContractSetup.getEnrollmentFK(),
                    batchContractSetup.getFilteredProductFK(), CaseProductUnderwriting.GROUPING_CASEOTHER, CaseProductUnderwriting.FIELD_UNDERWRITING_CLASS, null);

            if (underwritingClasses != null && underwritingClasses.length > 0)
            {
                appReqBlock.getHttpServletRequest().setAttribute("underwritingClasses", underwritingClasses);
            }
        }
    }

    private String showCommissionPhaseHistoryDialog(AppReqBlock appReqBlock)
    {
        String premiumDuePK = new PremiumDueHistoryTableModel(appReqBlock).getSelectedRowId();

        appReqBlock.getHttpServletRequest().setAttribute("selectedPremiumDuePK", premiumDuePK);

        new CommissionPhaseHistoryTableModel(appReqBlock);

        return COMMISSION_PHASE_HISTORY_DIALOG;
    }

    private ContractClient getOwnerContractClient(SegmentVO segmentVO) {
//        long contractClientPK = 0;
        ContractClient contractClient = null;

        if (segmentVO.getContractClientVOCount() > 0) {
            ContractClientVO[] contractClientVOs = segmentVO.getContractClientVO();
            ContractClient[] contractClients = this.convertContractClientVOs(contractClientVOs);
            contractClient = ContractClient.getOwnerContractClient(contractClients);
        }
        return contractClient;
    }

    // The following method is temporary until we fully go to Hibernate
    private ContractClient[] convertContractClientVOs(ContractClientVO[] contractClientVOs) {
        List contractClients = new ArrayList();
        for (int i = 0; i < contractClientVOs.length; i++) {
            ContractClient contractClient = new ContractClient(contractClientVOs[i]);
            contractClients.add(contractClient);
        }
        return (ContractClient[]) contractClients.toArray(new ContractClient[contractClients.size()]);
    }
    
    private boolean contractReversedToQuote(String segmentStatus)
    {
    	if (segmentStatus.equalsIgnoreCase("Pending") || segmentStatus.equalsIgnoreCase("IssuedPendingReq") ||
            segmentStatus.equalsIgnoreCase("Decline") || segmentStatus.equalsIgnoreCase("Incomplete") ||
            segmentStatus.equalsIgnoreCase("Postponed") || segmentStatus.equalsIgnoreCase("Withdrawn") ||
            segmentStatus.equalsIgnoreCase("Submitted") || segmentStatus.equalsIgnoreCase("SubmitPend") ||
            segmentStatus.equalsIgnoreCase("InitialUW") || segmentStatus.equalsIgnoreCase("Approved") ||
            segmentStatus.equalsIgnoreCase("ReinstatementPending") || segmentStatus.equalsIgnoreCase("DeclinedMed") ||
            segmentStatus.equalsIgnoreCase("DeclineElig") || segmentStatus.equalsIgnoreCase("DeclineReq") ||
            segmentStatus.equalsIgnoreCase("PendingIssue") || segmentStatus.equalsIgnoreCase("Reopen")) 
    	{ 		
    		return true;
    	}
    	else
    	{
    		return false;
    	}
    }

	@Override
	protected String getListBillingDialog() { return CONTRACT_LIST_BILLING_DIALOG; }
	@Override
	protected String getListULBillingDialog() { return CONTRACT_LIST_UL_BILLING_DIALOG; }
	@Override
	protected String getIndividualBillingDialog() { return CONTRACT_INDIVIDUAL_BILLING_DIALOG; }
	@Override
	protected String getIndividualULBillingDialog() { return CONTRACT_INDIVIDUAL_UL_BILLING_DIALOG; }
}

